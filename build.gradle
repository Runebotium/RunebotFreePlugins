plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven { url = 'https://repo.runelite.net/' }
    maven { url = 'https://repo.leigham.uk/releases/runebotclientapi' }
    jcenter()
    mavenCentral()
}

def runeLiteVersion = 'latest.release'

// Define rbapiVersion with a default value, which can be overridden from the command line
def rbapiVersion = project.hasProperty('rbapiVersion') ? project.rbapiVersion : '0.1.47'

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation 'junit:junit:4.12'

    compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion

    implementation 'org.json:json:20230227'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    compileOnly group: 'com.example', name: 'runebotclientapi', version: rbapiVersion
    runtimeOnly group: 'com.example', name: 'runebotclientapi', version: rbapiVersion
    testImplementation group: 'com.example', name: 'runebotclientapi', version: rbapiVersion
    implementation 'com.google.archivepatcher:archive-patch-applier:1.0.4'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

group = 'net.runelite.client.plugins'
version = rbapiVersion
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream
tasks.register('aio', Jar) {
    manifest {
        attributes 'Main-Class': 'net.runelite.client.plugins.Main'
    }
    archiveBaseName.set("RuneBot-aio")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

tasks.register('min', Jar) {
    manifest {
        attributes 'Main-Class': 'net.runelite.client.plugins.Main'
    }
    archiveBaseName.set("RuneBot-min")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude("net/runelite/client")
}

tasks.register('DisableRender') {
    dependsOn tasks.named('aio')

    doLast {
        def inputJar = tasks.named('aio').get().archiveFile.get().asFile
        def outputJar = file("$buildDir/libs/RuneBot-renderstop-${version}.jar")

        outputJar.withOutputStream { outputStream ->
            def zipIn = new ZipInputStream(new FileInputStream(inputJar))
            def zipOut = new ZipOutputStream(outputStream)
            byte[] buffer = new byte[1024]

            ZipEntry entry
            while ((entry = zipIn.nextEntry) != null) {
                if (!entry.name.startsWith('net/runelite/client/plugins/') || entry.name.contains('net/runelite/client/plugins/renderstop/')) {
                    zipOut.putNextEntry(new ZipEntry(entry.name))
                    int len
                    while ((len = zipIn.read(buffer)) > 0) {
                        zipOut.write(buffer, 0, len)
                    }
                    zipOut.closeEntry()
                }
            }

            zipIn.close()
            zipOut.close()
        }
    }
}


tasks.register("build-all") {
    dependsOn tasks.named('aio')
    dependsOn tasks.named('min')
    dependsOn tasks.named('DisableRender')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
