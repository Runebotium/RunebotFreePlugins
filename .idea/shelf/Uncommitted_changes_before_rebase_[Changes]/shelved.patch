Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.zip.ZipOutputStream\r\n\r\nplugins {\r\n    id 'java'\r\n    id 'maven-publish'\r\n}\r\n\r\nrepositories {\r\n    mavenLocal()\r\n    maven {url = 'https://repo.runelite.net/'}\r\n    maven {\r\n        url = 'https://repo.leigham.uk/snapshots/runebotclientapi'\r\n    }\r\n    mavenCentral()\r\n}\r\ndef runeLiteVersion = 'latest.release'\r\n\r\ndef rbapiVersion = '0.0.9-beta'\r\n\r\ndependencies {\r\n    compileOnly 'org.projectlombok:lombok:1.18.20'\r\n    annotationProcessor 'org.projectlombok:lombok:1.18.20'\r\n    testImplementation 'junit:junit:4.12'\r\n\r\n    compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion\r\n\r\n    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion\r\n    testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion\r\n\r\n    // Main.Class\r\n    implementation 'org.json:json:20230227'\r\n\r\n    // ChinBreakHandler\r\n    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'\r\n\r\n\r\n    compileOnly group: 'com.example', name: 'runebotclientapi', version: rbapiVersion\r\n    runtimeOnly group: 'com.example', name: 'runebotclientapi', version: rbapiVersion\r\n    testImplementation group: 'com.example', name:'runebotclientapi', version: rbapiVersion\r\n\r\n}\r\nsourceSets {\r\n    main {\r\n        java {\r\n            srcDir \"src\"\r\n        }\r\n    }\r\n}\r\n\r\ngroup = 'net.runelite.client.plugins'\r\nversion = rbapiVersion\r\nsourceCompatibility = \"11\"\r\n\r\ntasks.register('aio', Jar) {\r\n    manifest {\r\n        attributes 'Main-Class': 'net.runelite.client.plugins.Main'\r\n    }\r\n    getArchiveBaseName().set(\"RuneBot-aio\")\r\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\r\n    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }\r\n    with jar\r\n}\r\ntasks.register('min', Jar) {\r\n    manifest {\r\n        attributes 'Main-Class': 'net.runelite.client.plugins.Main'\r\n    }\r\n    getArchiveBaseName().set(\"RuneBot-min\")\r\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\r\n    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }\r\n    exclude(\"net/runelite/client\")\r\n    with jar\r\n}\r\n\r\nimport java.util.zip.ZipEntry\r\nimport java.util.zip.ZipInputStream\r\nimport java.util.zip.ZipOutputStream\r\n\r\ntasks.register('DisableRender') {\r\n    dependsOn tasks.named('aio')\r\n\r\n    doLast {\r\n        // Define the input and output paths\r\n        def inputJar = tasks.aio.archiveFile.get().asFile\r\n        def outputJar = file(\"$buildDir/libs/RuneBot-renderstop-\"+ version +\".jar\")\r\n\r\n        outputJar.withOutputStream { outputStream ->\r\n            def zipIn = new ZipInputStream(new FileInputStream(inputJar))\r\n            def zipOut = new ZipOutputStream(outputStream)\r\n\r\n            // Iterate over the entries in the input JAR\r\n            def entry = zipIn.nextEntry\r\n            while (entry != null) {\r\n                def entryName = entry.name\r\n                println(entryName)\r\n                println(!entryName.startsWith('net/runelite/client/plugins/') || entryName.contains('net/runelite/client/plugins/renderstop/'))\r\n                if (!entryName.startsWith('net/runelite/client/plugins/') || entryName.contains('net/runelite/client/plugins/renderstop/')) {\r\n                    zipOut.putNextEntry(new ZipEntry(entryName))\r\n                    byte[] buffer = new byte[1024]\r\n                    int bytesRead\r\n                    while ((bytesRead = zipIn.read(buffer)) != -1) {\r\n                        zipOut.write(buffer, 0, bytesRead)\r\n                    }\r\n                    zipOut.closeEntry()\r\n                }\r\n                entry = zipIn.nextEntry\r\n            }\r\n\r\n            zipOut.close()\r\n            zipIn.close()\r\n        }\r\n    }\r\n}\r\n\r\ntasks.register(\"build-all\") {\r\n    dependsOn tasks.named('aio')\r\n    dependsOn tasks.named('min')\r\n    dependsOn tasks.named('DisableRender')\r\n}\r\n\r\ntasks.withType(JavaCompile) {\r\n    options.encoding = 'UTF-8'\r\n}\r\ntargetCompatibility = JavaVersion.VERSION_11
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ b/build.gradle	(date 1716731403600)
@@ -9,13 +9,13 @@
     mavenLocal()
     maven {url = 'https://repo.runelite.net/'}
     maven {
-        url = 'https://repo.leigham.uk/snapshots/runebotclientapi'
+        url = 'https://repo.leigham.uk/releases/runebotclientapi'
     }
     mavenCentral()
 }
 def runeLiteVersion = 'latest.release'
 
-def rbapiVersion = '0.0.9-beta'
+def rbapiVersion = '0.1.36'
 
 dependencies {
     compileOnly 'org.projectlombok:lombok:1.18.20'
@@ -33,11 +33,13 @@
     // ChinBreakHandler
     implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
 
-
     compileOnly group: 'com.example', name: 'runebotclientapi', version: rbapiVersion
     runtimeOnly group: 'com.example', name: 'runebotclientapi', version: rbapiVersion
     testImplementation group: 'com.example', name:'runebotclientapi', version: rbapiVersion
 
+    // cfr reader
+    implementation 'org.benf:cfr:0.151'
+
 }
 sourceSets {
     main {
Index: src/main/java/net/runelite/client/plugins/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.runelite.client.plugins;\r\n\r\nimport org.json.JSONObject;\r\nimport org.json.JSONTokener;\r\n\r\nimport javax.swing.*;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.nio.channels.Channels;\r\nimport java.nio.channels.ReadableByteChannel;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\n\r\npublic class Main {\r\n\r\n    // Downloads a file from the specified URL and saves it to the specified file path using NIO\r\n    private static void downloadUsingNIO(String urlStr, String filePath) throws IOException {\r\n        URL url = new URL(urlStr);\r\n        ReadableByteChannel rbc = Channels.newChannel(url.openStream());\r\n        FileOutputStream fos = new FileOutputStream(filePath);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            // Download RuneLiteHijack.jar\r\n            String hijackJarUrl = \"https://github.com/Arnuh/RuneLiteHijack/releases/download/latest/RuneLiteHijack.jar\";\r\n            String hijackJarPath = \"RuneLiteHijack.jar\";\r\n            downloadUsingNIO(hijackJarUrl, hijackJarPath);\r\n\r\n            // Default file path for RuneBotInstaller.jar\r\n            String runeBotJarPath = \"RuneBotInstaller.jar\";\r\n\r\n            // Check the operating system\r\n            String osName = System.getProperty(\"os.name\");\r\n            if (osName.contains(\"Windows\")) {\r\n                runeBotJarPath = System.getProperty(\"user.home\") + \"\\\\AppData\\\\Local\\\\RuneLite\\\\RuneBotInstaller.jar\";\r\n            } else if (osName.contains(\"Mac OS X\")) {\r\n                runeBotJarPath = \"/Applications/RuneLite.app/Contents/Resources/RuneBotInstaller.jar\";\r\n            }\r\n\r\n            // Check if the RuneBotInstaller.jar file already exists\r\n            File runeBotFile = new File(runeBotJarPath);\r\n            if (!runeBotFile.exists()) {\r\n                // Download RuneBotInstaller.jar from the GitHub release\r\n                String runeBotUrl = \"https://github.com/KALE1111/rblaunch/releases/download/v0.3.8/RuneBot-0.3.8.jar\";\r\n                downloadUsingNIO(runeBotUrl, runeBotJarPath);\r\n            }\r\n\r\n            // Read and update the config.json file\r\n            String configFilePath = \"\";\r\n            if (osName.contains(\"Windows\")) {\r\n                configFilePath = System.getProperty(\"user.home\") + \"\\\\AppData\\\\Local\\\\RuneLite\\\\config.json\";\r\n            } else if (osName.contains(\"Mac OS X\")) {\r\n                configFilePath = \"/Applications/RuneLite.app/Contents/Resources/config.json\";\r\n            }\r\n            InputStream inputStream = new FileInputStream(configFilePath);\r\n            JSONTokener tokener = new JSONTokener(inputStream);\r\n            JSONObject object = new JSONObject(tokener);\r\n            inputStream.close();\r\n            // Update the mainClass and classPath properties in the config.json file\r\n            object.remove(\"mainClass\");\r\n            object.put(\"mainClass\", \"ca.arnah.runelite.LauncherHijack\");\r\n            object.remove(\"classPath\");\r\n            object.append(\"classPath\", \"RuneBotInstaller.jar\");\r\n            object.append(\"classPath\", \"RuneLite.jar\");\r\n            FileWriter fileWriter = new FileWriter(configFilePath);\r\n            fileWriter.write(object.toString());\r\n            fileWriter.flush();\r\n            fileWriter.close();\r\n\r\n            // Display success message\r\n            JOptionPane.showMessageDialog(null, \"Installed successfully. Please launch RuneLite normally.\",\r\n                    \"Installer\", JOptionPane.PLAIN_MESSAGE);\r\n            System.exit(0);\r\n        } catch (IOException e) {\r\n            JOptionPane.showMessageDialog(null, String.format(\"Error occurred: %s\", e.getMessage()),\r\n                    \"Installer\", JOptionPane.ERROR_MESSAGE);\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/Main.java b/src/main/java/net/runelite/client/plugins/Main.java
--- a/src/main/java/net/runelite/client/plugins/Main.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ b/src/main/java/net/runelite/client/plugins/Main.java	(date 1716730580887)
@@ -3,83 +3,41 @@
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import javax.swing.*;
 import java.io.*;
 import java.net.URL;
 import java.nio.channels.Channels;
 import java.nio.channels.ReadableByteChannel;
-import java.nio.file.Files;
-import java.nio.file.Paths;
 
 public class Main {
+    public static void main(String[] args) throws IOException {
+        ReadableByteChannel readableByteChannel = Channels.newChannel(new URL("https://github.com/Ethan-Vann/Installer/releases/download/1.0/RuneLiteHijack.jar").openStream());
+        FileOutputStream fileOutputStream;
 
-    // Downloads a file from the specified URL and saves it to the specified file path using NIO
-    private static void downloadUsingNIO(String urlStr, String filePath) throws IOException {
-        URL url = new URL(urlStr);
-        ReadableByteChannel rbc = Channels.newChannel(url.openStream());
-        FileOutputStream fos = new FileOutputStream(filePath);
-        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
-        fos.close();
-        rbc.close();
-    }
-
-    public static void main(String[] args) {
-        try {
-            // Download RuneLiteHijack.jar
-            String hijackJarUrl = "https://github.com/Arnuh/RuneLiteHijack/releases/download/latest/RuneLiteHijack.jar";
-            String hijackJarPath = "RuneLiteHijack.jar";
-            downloadUsingNIO(hijackJarUrl, hijackJarPath);
-
-            // Default file path for RuneBotInstaller.jar
-            String runeBotJarPath = "RuneBotInstaller.jar";
-
-            // Check the operating system
-            String osName = System.getProperty("os.name");
-            if (osName.contains("Windows")) {
-                runeBotJarPath = System.getProperty("user.home") + "\\AppData\\Local\\RuneLite\\RuneBotInstaller.jar";
-            } else if (osName.contains("Mac OS X")) {
-                runeBotJarPath = "/Applications/RuneLite.app/Contents/Resources/RuneBotInstaller.jar";
-            }
-
-            // Check if the RuneBotInstaller.jar file already exists
-            File runeBotFile = new File(runeBotJarPath);
-            if (!runeBotFile.exists()) {
-                // Download RuneBotInstaller.jar from the GitHub release
-                String runeBotUrl = "https://github.com/KALE1111/rblaunch/releases/download/v0.3.8/RuneBot-0.3.8.jar";
-                downloadUsingNIO(runeBotUrl, runeBotJarPath);
-            }
-
-            // Read and update the config.json file
-            String configFilePath = "";
-            if (osName.contains("Windows")) {
-                configFilePath = System.getProperty("user.home") + "\\AppData\\Local\\RuneLite\\config.json";
-            } else if (osName.contains("Mac OS X")) {
-                configFilePath = "/Applications/RuneLite.app/Contents/Resources/config.json";
-            }
-            InputStream inputStream = new FileInputStream(configFilePath);
-            JSONTokener tokener = new JSONTokener(inputStream);
-            JSONObject object = new JSONObject(tokener);
-            inputStream.close();
-            // Update the mainClass and classPath properties in the config.json file
-            object.remove("mainClass");
-            object.put("mainClass", "ca.arnah.runelite.LauncherHijack");
-            object.remove("classPath");
-            object.append("classPath", "RuneBotInstaller.jar");
-            object.append("classPath", "RuneLite.jar");
-            FileWriter fileWriter = new FileWriter(configFilePath);
-            fileWriter.write(object.toString());
-            fileWriter.flush();
-            fileWriter.close();
-
-            // Display success message
-            JOptionPane.showMessageDialog(null, "Installed successfully. Please launch RuneLite normally.",
-                    "Installer", JOptionPane.PLAIN_MESSAGE);
-            System.exit(0);
-        } catch (IOException e) {
-            JOptionPane.showMessageDialog(null, String.format("Error occurred: %s", e.getMessage()),
-                    "Installer", JOptionPane.ERROR_MESSAGE);
-            e.printStackTrace();
-            System.exit(1);
-        }
+        if (System.getProperty("os.name").contains("Mac OS X")) {
+            fileOutputStream = new FileOutputStream("/Applications/RuneLite.app/Contents/Resources/EthanVannInstaller.jar");
+        } else {
+            fileOutputStream = new FileOutputStream(System.getProperty("user.home") + "\\AppData\\Local\\RuneLite\\EthanVannInstaller.jar");
+        }
+        fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);
+        String file;
+        if (System.getProperty("os.name").contains("Mac OS X")) {
+            file = "/Applications/RuneLite.app/Contents/Resources/config.json";
+        } else {
+            file = System.getProperty("user.home") + "\\AppData\\Local\\RuneLite\\config.json";
+        }
+        InputStream inputStream = new FileInputStream(file);
+        JSONTokener tokener = new JSONTokener(inputStream);
+        JSONObject object = new JSONObject(tokener);
+        inputStream.close();
+        object.remove("mainClass");
+        object.put("mainClass", "ca.arnah.runelite.LauncherHijack");
+        object.remove("classPath");
+        object.append("classPath", "EthanVannInstaller.jar");
+        object.append("classPath", "RuneLite.jar");
+        FileWriter fileWriter = new FileWriter(file);
+        fileWriter.write(object.toString());
+        fileWriter.flush();
+        fileWriter.close();
+        fileOutputStream.close();
     }
-}
+}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.runelite.client.plugins.renderstop;\r\n\r\nimport net.runelite.api.*;\r\nimport net.runelite.api.hooks.DrawCallbacks;\r\n\r\npublic class DisableRenderCallbacks implements DrawCallbacks {\r\n\r\n    @Override\r\n    public void draw(Renderable renderable, int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, long hash) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void drawScenePaint(int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, SceneTilePaint paint, int tileZ, int tileX, int tileY, int zoom, int centerX, int centerY) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void drawSceneModel(int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, SceneTileModel model, int tileZ, int tileX, int tileY, int zoom, int centerX, int centerY) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void draw(int overlayColor) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void drawScene(int cameraX, int cameraY, int cameraZ, int cameraPitch, int cameraYaw, int plane) {\r\n    }\r\n\r\n    @Override\r\n    public void postDrawScene() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void animate(Texture texture, int diff) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void loadScene(Scene scene) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void swapScene(Scene scene) {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java b/src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java
--- a/src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ b/src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java	(date 1716731089751)
@@ -5,18 +5,21 @@
 
 public class DisableRenderCallbacks implements DrawCallbacks {
 
+
+
+
     @Override
-    public void draw(Renderable renderable, int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, long hash) {
+    public void draw(Projection projection, Scene scene, Renderable renderable, int i, int i1, int i2, int i3, long l) {
 
     }
 
     @Override
-    public void drawScenePaint(int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, SceneTilePaint paint, int tileZ, int tileX, int tileY, int zoom, int centerX, int centerY) {
+    public void drawScenePaint(Scene scene, SceneTilePaint sceneTilePaint, int i, int i1, int i2) {
 
     }
 
     @Override
-    public void drawSceneModel(int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, SceneTileModel model, int tileZ, int tileX, int tileY, int zoom, int centerX, int centerY) {
+    public void drawSceneTileModel(Scene scene, SceneTileModel sceneTileModel, int i, int i1) {
 
     }
 
@@ -26,8 +29,11 @@
     }
 
     @Override
-    public void drawScene(int cameraX, int cameraY, int cameraZ, int cameraPitch, int cameraYaw, int plane) {
+    public void drawScene(double v, double v1, double v2, double v3, double v4, int i) {
+
     }
+
+
 
     @Override
     public void postDrawScene() {
@@ -48,4 +54,9 @@
     public void swapScene(Scene scene) {
 
     }
+
+    @Override
+    public boolean tileInFrustum(Scene scene, int pitchSin, int pitchCos, int yawSin, int yawCos, int cameraX, int cameraY, int cameraZ, int plane, int msx, int msy) {
+        return DrawCallbacks.super.tileInFrustum(scene, pitchSin, pitchCos, yawSin, yawCos, cameraX, cameraY, cameraZ, plane, msx, msy);
+    }
 }
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasWave.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasWave.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasWave.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasWave.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,136 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import com.google.common.collect.ImmutableMap;
-import java.util.Arrays;
-import java.util.HashSet;
-
-public class NylocasWave {
-    public static final int MAX_WAVE = 31;
-
-    static final ImmutableMap<Object, Object> waves = ImmutableMap.builder()
-            .put(1, new NylocasWave(1, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(2, new NylocasWave(2, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST, true), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(3, new NylocasWave(3, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(4, new NylocasWave(4, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(5, new NylocasWave(5, 16, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(6, new NylocasWave(6, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(7, new NylocasWave(7, 12, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(8, new NylocasWave(8, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(9, new NylocasWave(9, 12, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(10, new NylocasWave(10, 8, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(11, new NylocasWave(11, 8, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(12, new NylocasWave(12, 8, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(13, new NylocasWave(13, 8, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(14, new NylocasWave(14, 8, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(15, new NylocasWave(15, 8, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(16, new NylocasWave(16, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(17, new NylocasWave(17, 12, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(18, new NylocasWave(18, 8, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(19, new NylocasWave(19, 12, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(20, new NylocasWave(20, 16, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(21, new NylocasWave(21, 8, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST, true), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH, true) }))
-            .put(22, new NylocasWave(22, 12, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(23, new NylocasWave(23, 8, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(24, new NylocasWave(24, 8, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(25, new NylocasWave(25, 8, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(26, new NylocasWave(26, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(27, new NylocasWave(27, 8, new NyloNPC[] { new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(28, new NylocasWave(28, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(29, new NylocasWave(29, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH, true), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH, true) }))
-            .put(30, new NylocasWave(30, new NyloNPC[] { new NyloNPC(NylocasType.RANGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_BIG, NylocasSpawnPoint.EAST_BIG, true) }))
-            .put(31, new NylocasWave(31, new NyloNPC[] { new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) })).build();
-
-    static final ImmutableMap<Object, Object> smWaves = ImmutableMap.builder()
-            .put(1, new NylocasWave(1, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(2, new NylocasWave(2, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST, true), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(3, new NylocasWave(3, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(4, new NylocasWave(4, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(5, new NylocasWave(5, 16, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(6, new NylocasWave(6, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(7, new NylocasWave(7, 12, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(8, new NylocasWave(8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(9, new NylocasWave(9, 12, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(10, new NylocasWave(10, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(11, new NylocasWave(11, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(12, new NylocasWave(12, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(13, new NylocasWave(13, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(14, new NylocasWave(14, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(15, new NylocasWave(15, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(16, new NylocasWave(16, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(17, new NylocasWave(17, 12, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(18, new NylocasWave(18, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(19, new NylocasWave(19, 12, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(20, new NylocasWave(20, 16, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(21, new NylocasWave(21, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST, true), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH, true) }))
-            .put(22, new NylocasWave(22, 12, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(23, new NylocasWave(23, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(24, new NylocasWave(24, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(25, new NylocasWave(25, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(26, new NylocasWave(26, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(27, new NylocasWave(27, 8, new NyloNPC[] { new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(28, new NylocasWave(28, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(29, new NylocasWave(29, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH, true), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.SM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH, true) }))
-            .put(30, new NylocasWave(30, new NyloNPC[] { new NyloNPC(NylocasType.SM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_BIG, NylocasSpawnPoint.EAST_BIG, true) }))
-            .put(31, new NylocasWave(31, new NyloNPC[] { new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.SM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.SM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.SM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) })).build();
-
-    static final ImmutableMap<Object, Object> hmWaves = ImmutableMap.builder()
-            .put(1, new NylocasWave(1, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(2, new NylocasWave(2, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST, true), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(3, new NylocasWave(3, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(4, new NylocasWave(4, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(5, new NylocasWave(5, 16, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(6, new NylocasWave(6, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(7, new NylocasWave(7, 12, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(8, new NylocasWave(8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(9, new NylocasWave(9, 12, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH)}))
-            .put(10, new NylocasWave(10, 16, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(11, new NylocasWave(11, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(12, new NylocasWave(12, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(13, new NylocasWave(13, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(14, new NylocasWave(14, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(15, new NylocasWave(15, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH, true), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(16, new NylocasWave(16, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(17, new NylocasWave(17, 12, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(18, new NylocasWave(18, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(19, new NylocasWave(19, 12, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(20, new NylocasWave(20, 16, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(21, new NylocasWave(21, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_WEST, true), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH, true) }))
-            .put(22, new NylocasWave(22, 12, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(23, new NylocasWave(23, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(24, new NylocasWave(24, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.EAST_NORTH, true) }))
-            .put(25, new NylocasWave(25, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(26, new NylocasWave(26, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG, true), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(27, new NylocasWave(27, 8, new NyloNPC[] { new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG, true), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_NORTH) }))
-            .put(28, new NylocasWave(28, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH, true), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) }))
-            .put(29, new NylocasWave(29, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH, true), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.HM_MELEE_BIG, NylocasSpawnPoint.SOUTH_BIG), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH, true) }))
-            .put(30, new NylocasWave(30, 16, new NyloNPC[] { new NyloNPC(NylocasType.HM_RANGE_BIG, NylocasSpawnPoint.WEST_BIG), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_BIG, NylocasSpawnPoint.EAST_BIG, true) }))
-            .put(31, new NylocasWave(31, new NyloNPC[] { new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.WEST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.WEST_SOUTH), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.SOUTH_WEST), new NyloNPC(NylocasType.HM_MELEE_SMALL, NylocasSpawnPoint.SOUTH_EAST), new NyloNPC(NylocasType.HM_MAGE_SMALL, NylocasSpawnPoint.EAST_NORTH), new NyloNPC(NylocasType.HM_RANGE_SMALL, NylocasSpawnPoint.EAST_SOUTH) })).build();
-
-    private final int wave;
-
-    private final HashSet<NyloNPC> waveData;
-
-    private final int waveDelay;
-
-    public int getWave() {
-        return this.wave;
-    }
-
-    public HashSet<NyloNPC> getWaveData() {
-        return this.waveData;
-    }
-
-    public int getWaveDelay() {
-        return this.waveDelay;
-    }
-
-    private NylocasWave(int wave, NyloNPC[] waveData) {
-        this(wave, 4, waveData);
-    }
-
-    private NylocasWave(int wave, int waveDelay, NyloNPC[] waveData) {
-        this.wave = wave;
-        this.waveData = new HashSet<>(Arrays.asList(waveData));
-        this.waveDelay = waveDelay;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/SSLine.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/SSLine.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/SSLine.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/SSLine.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,90 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp;
-
-import java.util.Objects;
-import java.util.function.UnaryOperator;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import net.runelite.api.Client;
-import net.runelite.api.Perspective;
-import net.runelite.api.Player;
-import net.runelite.api.Point;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-
-public final class SSLine {
-    private final Coordinates coordA;
-
-    private final Coordinates coordB;
-
-    private final int sigX;
-
-    private final int sigY;
-
-    public Coordinates getCoordA() {
-        return this.coordA;
-    }
-
-    public Coordinates getCoordB() {
-        return this.coordB;
-    }
-
-    public SSLine(Coordinates coordA, Coordinates coordB, int sigX, int sigY) {
-        this.coordA = coordA;
-        this.coordB = coordB;
-        this.sigX = Integer.signum(sigX);
-        this.sigY = Integer.signum(sigY);
-    }
-
-    @Nullable
-    public Point getTranslatedPointA(@Nonnull Client client) {
-        return translate(client, this.coordA, this.sigX, this.sigY);
-    }
-
-    @Nullable
-    public Point getTranslatedPointB(@Nonnull Client client) {
-        return translate(client, this.coordB, this.sigX, this.sigY);
-    }
-
-    public SSLine offset(UnaryOperator<Coordinates> offsetFunc) {
-        return (offsetFunc == null) ? this : offset(offsetFunc, offsetFunc);
-    }
-
-    public SSLine offset(UnaryOperator<Coordinates> offsetFuncA, UnaryOperator<Coordinates> offsetFuncB) {
-        return new SSLine(
-                (offsetFuncA == null) ? this.coordA : offsetFuncA.apply(this.coordA),
-                (offsetFuncB == null) ? this.coordB : offsetFuncB.apply(this.coordB), this.sigX, this.sigY);
-    }
-
-    @Nullable
-    private static Point translate(@Nonnull Client client, @Nonnull Coordinates coords, int sigX, int sigY) {
-        Player player = client.getLocalPlayer();
-        if (player == null)
-            return null;
-        int regionID = player.getWorldLocation().getRegionID();
-        int plane = client.getPlane();
-        LocalPoint local = LocalPoint.fromWorld(client, WorldPoint.fromRegion(regionID, coords.getX(), coords.getY(), plane));
-        if (local == null)
-            return null;
-        int x = local.getX() + getTileOffset(sigX);
-        int y = local.getY() + getTileOffset(sigY);
-        return Perspective.localToCanvas(client, x, y, client.getTileHeights()[plane][x >> 7][y >> 7]);
-    }
-
-    private static int getTileOffset(int sig) {
-        if (sig == 0)
-            return 0;
-        int off = 64;
-        return (sig > 0) ? 64 : -64;
-    }
-
-    public boolean equals(Object other) {
-        if (!(other instanceof SSLine))
-            return false;
-        return (this.coordA.equals(((SSLine)other).coordA) && this.coordB
-                .equals(((SSLine)other).coordB));
-    }
-
-    public int hashCode() {
-        return Objects.hash(this.coordA, this.coordB, this.sigX, this.sigY);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/RedsOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/RedsOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/RedsOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/RedsOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,84 +0,0 @@
- package net.runelite.client.plugins.spoontob;
- 
- import java.awt.BasicStroke;
- import java.awt.Color;
- import java.awt.Dimension;
- import java.awt.Graphics2D;
- import java.awt.Polygon;
- import java.awt.Shape;
- import javax.inject.Inject;
-
- import net.runelite.client.plugins.spoontob.rooms.Maiden.Maiden;
- import net.runelite.client.plugins.spoontob.rooms.Verzik.Verzik;
- import net.runelite.client.plugins.spoontob.util.TheatreRegions;
- import net.runelite.api.Client;
- import net.runelite.api.NPC;
- import net.runelite.api.NPCComposition;
- import net.runelite.api.Perspective;
- import net.runelite.api.coords.LocalPoint;
- import net.runelite.client.ui.overlay.Overlay;
- import net.runelite.client.ui.overlay.OverlayLayer;
- import net.runelite.client.ui.overlay.OverlayPosition;
- import net.runelite.client.ui.overlay.OverlayPriority;
- 
- public class RedsOverlay
-   extends Overlay
- {
-   @Inject
-   private SpoonTobPlugin plugin;
-   @Inject
-   private SpoonTobConfig config;
-   @Inject
-   private Client client;
-   @Inject
-   private Maiden maiden;
-   @Inject
-   private Verzik verzik;
-   
-   @Inject
-   public RedsOverlay(Client client, SpoonTobConfig config, SpoonTobPlugin plugin, Maiden maiden, Verzik verzik) {
-     client = client;
-     config = config;
-     plugin = plugin;
-     maiden = maiden;
-     verzik = verzik;
-     setPosition(OverlayPosition.DYNAMIC);
-     setPriority(OverlayPriority.HIGH);
-     setLayer(OverlayLayer.ABOVE_SCENE);
-   }
-   
-   public Dimension render(Graphics2D graphics) {
-     if (config.redsTL() != SpoonTobConfig.redsTlMode.OFF && plugin.enforceRegion()) {
-       for (NPC reds : client.getNpcs()) {
-         if (reds.getName() != null && reds.getName().equalsIgnoreCase("nylocas matomenos")) {
-           NPCComposition composition = reds.getComposition();
-           int size = composition.getSize();
-           LocalPoint lp = LocalPoint.fromWorld(client, reds.getWorldLocation());
-           if (lp != null) {
-             lp = new LocalPoint(lp.getX() + size * 128 / 2 - 64, lp.getY() + size * 128 / 2 - 64);
-             Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, lp, size);
-             if (tilePoly != null && (((
-               config.redsTL() == SpoonTobConfig.redsTlMode.MAIDEN || config.redsTL() == SpoonTobConfig.redsTlMode.BOTH) && TheatreRegions.inRegion(client, TheatreRegions.MAIDEN)) || ((config
-               .redsTL() == SpoonTobConfig.redsTlMode.VERZIK || config.redsTL() == SpoonTobConfig.redsTlMode.BOTH) && TheatreRegions.inRegion(client, TheatreRegions.VERZIK)))) {
-               renderPoly(graphics, tilePoly, config.redsTLColor(), config.redsTLColor().getAlpha(), 0);
-             }
-           } 
-         } 
-       } 
-     }
-     
-     return null;
-   }
-   
-   private void renderPoly(Graphics2D graphics, Shape polygon, Color color, int outlineOpacity, int fillOpacity) {
-     if (polygon != null) {
-       graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineOpacity));
-       graphics.setStroke(new BasicStroke(1.0F));
-       graphics.draw(polygon);
-       graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillOpacity));
-       graphics.fill(polygon);
-     } 
-   }
- }
-
-
Index: src/main/java/net/runelite/client/plugins/spoontob/util/TheatreRegions.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreRegions.java b/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreRegions.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreRegions.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,50 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import net.runelite.api.Client;
-import net.runelite.api.Player;
-import net.runelite.api.coords.WorldPoint;
-
-import java.util.Objects;
-
-public enum TheatreRegions {
-    MAIDEN(12613),
-    BLOAT(13125),
-    NYLOCAS(13122),
-    SOTETSEG(13123),
-    SOTETSEG_MAZE(13379),
-    XARPUS(12612),
-    VERZIK(12611),
-    LOOT_ROOM(12867);
-
-    private final int regionId;
-
-    public static boolean inRegion(Client client, TheatreRegions tobRegion) {
-        return inRegion(client, tobRegion.getRegionId());
-    }
-
-    public static boolean inRegion(Client client, int regionId) {
-        return Objects.equals(getCurrentRegionID(client), regionId);
-    }
-
-    public static int getCurrentRegionID(Client client) {
-        if (!client.isInInstancedRegion()) {
-            return -1;
-        } else {
-            Player localPlayer = client.getLocalPlayer();
-            if (localPlayer == null) {
-                return -1;
-            } else {
-                WorldPoint wp = WorldPoint.fromLocalInstance(client, localPlayer.getLocalLocation());
-                return wp == null ? -1 : wp.getRegionID();
-            }
-        }
-    }
-
-    private TheatreRegions(int regionId) {
-        this.regionId = regionId;
-    }
-
-    public int getRegionId() {
-        return this.regionId;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/RaveUtils.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/RaveUtils.java b/src/main/java/net/runelite/client/plugins/spoontob/util/RaveUtils.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/RaveUtils.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,75 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import net.runelite.api.Client;
-import net.runelite.api.Model;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class RaveUtils {
-    @Inject
-    private Client client;
-
-    @Inject
-    private SpoonTobConfig config;
-
-    public Color getColor(int hashCode, boolean syncColor)
-    {
-        return getColor(hashCode, client.getGameCycle(), syncColor, config.raveSpeed());
-    }
-
-    public static Color getColor(int hashCode, int gameCycle, boolean syncColor, int colorSpeed)
-    {
-        if (syncColor) hashCode = 0;
-        int clientTicks = colorSpeed / 20;
-        return Color.getHSBColor(((hashCode + gameCycle) % clientTicks) / ((float) clientTicks), 1.0f, 1.0f);
-    }
-
-    public Color getColor(int hashCode, int gameCycle, boolean syncColor)
-    {
-        if (syncColor) hashCode = 0;
-        int clientTicks = config.raveSpeed() / 20;
-        return Color.getHSBColor(((hashCode + gameCycle) % clientTicks) / ((float) clientTicks), 1.0f, 1.0f);
-    }
-
-    public int colorToRs2hsb(Color color)
-    {
-        float[] hsbVals = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), null);
-
-        // "Correct" the brightness level to avoid going to white at full saturation, or having a low brightness at
-        // low saturation
-        hsbVals[2] -= Math.min(hsbVals[1], hsbVals[2] / 2);
-
-        int encode_hue = (int)(hsbVals[0] * 63);
-        int encode_saturation = (int)(hsbVals[1] * 7);
-        int encode_brightness = (int)(hsbVals[2] * 127);
-        return (encode_hue << 10) + (encode_saturation << 7) + (encode_brightness);
-    }
-
-    public void recolorAllFaces(Model model, Color color)
-    {
-        if (model == null || color == null)
-        {
-            return;
-        }
-
-        int rs2hsb = colorToRs2hsb(color);
-        int[] faceColors1 = model.getFaceColors1();
-        int[] faceColors2 = model.getFaceColors2();
-        int[] faceColors3 = model.getFaceColors3();
-
-        for (int i = 0; i < faceColors1.length; i++)
-        {
-            faceColors1[i] = rs2hsb;
-        }
-        for (int i = 0; i < faceColors2.length; i++)
-        {
-            faceColors2[i] = rs2hsb;
-        }
-        for (int i = 0; i < faceColors3.length; i++)
-        {
-            faceColors3[i] = rs2hsb;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/SpoonTobPlugin.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobPlugin.java b/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobPlugin.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobPlugin.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,608 +0,0 @@
-package net.runelite.client.plugins.spoontob;
-
-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.Lists;
-import com.google.inject.Binder;
-import com.google.inject.Provides;
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.*;
-import net.runelite.api.widgets.Widget;
-import net.runelite.api.MenuEntry;
-import net.runelite.client.callback.ClientThread;
-import net.runelite.client.callback.Hooks;
-import net.runelite.client.config.ConfigManager;
-import net.runelite.client.eventbus.EventBus;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.events.ConfigChanged;
-import net.runelite.client.plugins.Plugin;
-import net.runelite.client.plugins.PluginDescriptor;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.Bloat;
-import net.runelite.client.plugins.spoontob.rooms.Maiden.Maiden;
-import net.runelite.client.plugins.spoontob.rooms.Maiden.MaidenRedsOverlay;
-import net.runelite.client.plugins.spoontob.rooms.Nylocas.NyloInfo;
-import net.runelite.client.plugins.spoontob.rooms.Nylocas.Nylocas;
-import net.runelite.client.plugins.spoontob.rooms.Sotetseg.Sotetseg;
-import net.runelite.client.plugins.spoontob.rooms.Verzik.Verzik;
-import net.runelite.client.plugins.spoontob.rooms.Xarpus.Xarpus;
-import net.runelite.client.plugins.spoontob.util.CustomGameObject;
-import net.runelite.client.plugins.spoontob.util.RaveUtils;
-import net.runelite.client.plugins.spoontob.util.TheatreInputListener;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-import net.runelite.client.ui.overlay.OverlayManager;
-import net.runelite.client.util.Text;
-import org.apache.commons.lang3.ArrayUtils;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.util.List;
-import java.util.*;
-
-@PluginDescriptor(
-        name = "<html><font color=#86C43F>[RB]</font> Spoontob</html>",
-        description = " useful 1 plugin",
-        enabledByDefault = false
-)
-public class SpoonTobPlugin extends Plugin {
-    private Room[] rooms = null;
-    @Inject
-    private EventBus eventBus;
-    @Inject
-    private Maiden maiden;
-    @Inject
-    private Bloat bloat;
-    @Inject
-    private Nylocas nylocas;
-    @Inject
-    private Sotetseg sotetseg;
-    @Inject
-    private Xarpus xarpus;
-    @Inject
-    private Verzik verzik;
-    @Inject
-    private Client client;
-    @Inject
-    private TheatreInputListener theatreInputListener;
-    @Inject
-    private ClientThread clientThread;
-    @Inject
-    private SpoonTobConfig config;
-    @Inject
-    private OverlayManager overlayManager;
-    @Inject
-    private MiscOverlay miscOverlay;
-    @Inject
-    private SituationalTickOverlay tickOverlay;
-    @Inject
-    private MaidenRedsOverlay redsOverlay;
-    @Inject
-    public RaveUtils raveUtils;
-    @Inject
-    private Hooks hooks;
-
-    private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;
-
-    public Color c;
-    private Color rave;
-    private final Set<CustomGameObject> customizedGameObjects = new LinkedHashSet();
-    private final ArrayListMultimap<String, Integer> optionIndexes = ArrayListMultimap.create();
-    private String roomCompleteMsg = "";
-
-    public GameObject bankLootChest = null;
-    public Color raveBankChestColor = Color.WHITE;
-    public Color flowColor = new Color(75, 25, 150, 255);
-    private boolean raveRedUp = true;
-    private boolean raveGreenUp = true;
-    private boolean raveBlueUp = true;
-
-    public ArrayList<Integer> hiddenIndices;
-
-    public HashMap<Player, Integer> situationalTicksList = new HashMap<>();
-    public HashMap<Player, Integer> getSituationalTicksList() {return situationalTicksList;}
-
-    public int situationalTicks = 0;
-
-
-    public static int partySize;
-
-    public void configure(Binder binder) {
-        binder.bind(TheatreInputListener.class);
-    }
-
-    @Provides
-    SpoonTobConfig getConfig(ConfigManager configManager) {
-        return (SpoonTobConfig)configManager.getConfig(SpoonTobConfig.class);
-    }
-
-    protected void startUp() {
-        situationalTicksList.clear();
-        overlayManager.add(miscOverlay);
-        overlayManager.add(tickOverlay);
-        bankLootChest = null;
-        roomCompleteMsg = "";
-        raveBankChestColor = Color.WHITE;
-        if (rooms == null) {
-            rooms = new Room[]{ maiden, bloat, nylocas, sotetseg, xarpus, verzik};
-
-            for (Room room : rooms) {
-                room.init();
-            }
-        }
-
-        for (Room room : rooms) {
-            room.load();
-            eventBus.register(room);
-        }
-
-        hooks.registerRenderableDrawListener(drawListener);
-        hiddenIndices = new ArrayList<>();
-    }
-
-    protected void shutDown() {
-        situationalTicksList.clear();
-        overlayManager.remove(miscOverlay);
-        overlayManager.remove(tickOverlay);
-        bankLootChest = null;
-        modifyCustomObjList(true, true);
-        roomCompleteMsg = "";
-        raveBankChestColor = Color.WHITE;
-
-        for (Room room : rooms) {
-            eventBus.unregister(room);
-            room.unload();
-        }
-
-        hooks.unregisterRenderableDrawListener(drawListener);
-        clearHiddenNpcs();
-        hiddenIndices = null;
-
-        situationalTicks = 0;
-    }
-
-    public void refreshScene() { clientThread.invokeLater(() -> client.setGameState(GameState.LOADING)); }
-
-    @Subscribe
-    public void onClientTick(ClientTick event) {
-        if (config.removeFRCFlag() && client.getGameState() == GameState.LOGGED_IN && !client.isMenuOpen()) {
-            if (TheatreRegions.inRegion(client, TheatreRegions.LOOT_ROOM) || isLootingNonLootRoomChest()) {
-                MenuEntry[] entries = client.getMenuEntries();
-
-                for (MenuEntry entry : entries) {
-                    if (entry.getOption().equals("Bank-all")) {
-                        entry.setForceLeftClick(true);
-                        break;
-                    }
-                }
-                client.setMenuEntries(entries);
-            }
-        }
-
-        if (client.getGameState() != GameState.LOGGED_IN || client.isMenuOpen())
-            return;
-        MenuEntry[] menuEntries = client.getMenuEntries();
-        int idx = 0;
-        optionIndexes.clear();
-        for (MenuEntry entry : menuEntries) {
-            String option = Text.removeTags(entry.getOption()).toLowerCase();
-            optionIndexes.put(option, idx++);
-        }
-        idx = 0;
-        for (MenuEntry entry : menuEntries) {
-            swapMenuEntry(idx++, entry);
-        }
-
-        flowColor();
-    }
-
-    private void swapMenuEntry(int index, MenuEntry menuEntry) {
-        int eventId = menuEntry.getIdentifier();
-        String option = Text.removeTags(menuEntry.getOption()).toLowerCase();
-        String target = Text.removeTags(menuEntry.getTarget()).toLowerCase();
-        String[] FreezeSpells = {"ice barrage", "ice burst", "ice blitz", "ice rush", "entangle", "snare", "bind", "blood barrage", "blood barrage", "smoke barrage"};
-        String[] LunarSpells = {"energy transfer", "heal other", "vengeance other"};
-        MenuEntry[] newEntries = client.getMenuEntries();
-        if (config.removeCastToB() && enforceRegion()) {
-            for (String spell : FreezeSpells) {
-                if (target.startsWith(spell + " ->") &&
-                        (menuEntry.getType().getId() != 8 || target.contains("greater skeletal thrall") || target.contains("greater zombified  thrall") || target.contains("greater ghostly thrall"))) {
-                    delete(menuEntry, newEntries);
-                    return;
-                }
-            }
-        }
-
-        if (option.equals("value") && config.swapTobBuys() && enforceRegion()) {
-            swap("buy-1", option, target, index);
-        }
-    }
-
-    private void swap(String optionA, String optionB, String target, int index) {
-        swap(optionA, optionB, target, index, true);
-    }
-
-    private void swap(String optionA, String optionB, String target, int index, boolean strict) {
-        MenuEntry[] menuEntries = client.getMenuEntries();
-        int thisIndex = findIndex(menuEntries, index, optionB, target, strict);
-        int optionIdx = findIndex(menuEntries, thisIndex, optionA, target, strict);
-        if (thisIndex >= 0 && optionIdx >= 0) {
-            swap(optionIndexes, menuEntries, optionIdx, thisIndex);
-        }
-
-    }
-
-    private int findIndex(MenuEntry[] entries, int limit, String option, String target, boolean strict) {
-        if (strict) {
-            List<Integer> indexes = optionIndexes.get(option);
-
-            for(int i = indexes.size() - 1; i >= 0; --i) {
-                int idx = indexes.get(i);
-                MenuEntry entry = entries[idx];
-                String entryTarget = Text.removeTags(entry.getTarget()).toLowerCase();
-                if (idx <= limit && entryTarget.equals(target)) {
-                    return idx;
-                }
-            }
-        } else {
-            for(int i = limit; i >= 0; --i) {
-                MenuEntry entry = entries[i];
-                String entryOption = Text.removeTags(entry.getOption()).toLowerCase();
-                String entryTarget = Text.removeTags(entry.getTarget()).toLowerCase();
-                if (entryOption.contains(option.toLowerCase()) && entryTarget.equals(target)) {
-                    return i;
-                }
-            }
-        }
-
-        return -1;
-    }
-
-    private void swap(ArrayListMultimap<String, Integer> optionIndexes, MenuEntry[] entries, int index1, int index2) {
-        MenuEntry entry = entries[index1];
-        entries[index1] = entries[index2];
-        entries[index2] = entry;
-        client.setMenuEntries(entries);
-        optionIndexes.clear();
-        int idx = 0;
-
-        for (MenuEntry menuEntry : entries) {
-            String option = Text.removeTags(menuEntry.getOption()).toLowerCase();
-            optionIndexes.put(option, idx++);
-        }
-
-    }
-
-    private void delete(MenuEntry entry, MenuEntry[] newEntries) {
-        for (int i = newEntries.length - 1; i >= 0; i--) {
-            if (newEntries[i].equals(entry))
-                newEntries = (MenuEntry[])ArrayUtils.remove((Object[])newEntries, i);
-        }
-        client.setMenuEntries(newEntries);
-    }
-
-    @Subscribe
-    public void onMenuEntryAdded(MenuEntryAdded event) {
-        if(config.verzikTeleportCrystalHelper() && Text.removeTags(event.getTarget()).contains("Verzik's crystal shard -> ") && event.getOption().equalsIgnoreCase("use")){
-            boolean keepEntry = false;
-            for (Player player : client.getPlayers()){
-                if (player.getName() != null && event.getTarget().replaceAll("[^A-Za-z0-9]", " ").contains(player.getName())) {
-                    keepEntry = true;
-                }
-            }
-
-            if(!keepEntry){
-                MenuEntry[] entries = client.getMenuEntries();
-                MenuEntry[] newEntries = new MenuEntry[entries.length - 1];
-                System.arraycopy(entries, 0, newEntries, 0, newEntries.length);
-                client.setMenuEntries(newEntries);
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        if (enforceRegion()) {
-            partySize = 0;
-            for (int i = 330; i < 335; i++) {
-                if (client.getVarcStrValue(i) != null && !client.getVarcStrValue(i).equals("")) {
-                    partySize++;
-                }
-            }
-        }
-
-
-        raveBankChestColor = Color.getHSBColor(new Random().nextFloat(), 1.0F, 1.0F);
-        if (enforceRegion()) {
-            Random random = new Random();
-            float hue = random.nextFloat();
-            rave = Color.getHSBColor(hue, 0.9F, 1.0F);
-
-            modifyCustomObjList(false, false);
-
-            ArrayList<Player> toRemove0 = new ArrayList<>();
-            for (Player n : situationalTicksList.keySet())
-            {
-                int i = situationalTicksList.get(n);
-                if (i - 1 == 0)
-                {
-                    toRemove0.add(n);
-                    continue;
-                }
-                situationalTicksList.put(n, i - 1);
-            }
-            for (Player n : toRemove0)
-                situationalTicksList.remove(n);
-
-        } else {
-            if (config.recolorBarriers() != SpoonTobConfig.barrierMode.OFF) {
-                if (!client.isInInstancedRegion()) {
-                    Player you = client.getLocalPlayer();
-                    if (you != null) {
-                        WorldPoint wp = you.getWorldLocation();
-                        if (wp.getRegionID() == 14642) {
-                            modifyCustomObjList(true, true);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onConfigChanged(ConfigChanged event) {
-        if (event.getGroup().equals("spoontob")) {
-            if (event.getKey().equals("recolorBarriers") || event.getKey().equals("barriersColor")) {
-                modifyCustomObjList(true, false);
-                modifyCustomObjList(false, false);
-            } else if(event.getKey().equals("lootReminder")){
-                if (config.lootReminder() == SpoonTobConfig.lootReminderMode.OFF || config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMB) {
-                    if (client.hasHintArrow()) {
-                        client.clearHintArrow();
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    private void onGameObjectSpawned(GameObjectSpawned event) {
-        GameObject obj = event.getGameObject();
-        int id = obj.getId();
-        if (id == 32755 || id == 33028) {
-            customizedGameObjects.add(new CustomGameObject(obj, id));
-            modifyCustomObjList(false, false);
-        } else if (id == 41437) {
-            bankLootChest = obj;
-        }
-    }
-
-    @Subscribe
-    private void onGameObjectDespawned(GameObjectDespawned event) {
-        if (event.getGameObject().getId() == 41437) {
-            bankLootChest = null;
-        }
-    }
-
-    @Subscribe
-    public void onGameStateChanged(GameStateChanged event) {
-        if (config.lootReminder() != SpoonTobConfig.lootReminderMode.OFF && bankLootChest != null && client.getLocalPlayer() != null) {
-            if (client.isInInstancedRegion()){
-                if (WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() != 14642) {
-                    bankLootChest = null;
-                    if (client.hasHintArrow()) {
-                        client.clearHintArrow();
-                    }
-                }
-            } else {
-                if (client.getLocalPlayer().getWorldLocation().getRegionID() != 14642) {
-                    bankLootChest = null;
-                    if (client.hasHintArrow()) {
-                        client.clearHintArrow();
-                    }
-                }
-            }
-        }
-    }
-
-    private void modifyCustomObjList(boolean restore, boolean clear) {
-        if (!customizedGameObjects.isEmpty()) {
-            if (restore) {
-                List<CustomGameObject> objs = new ArrayList(customizedGameObjects);
-                Lists.reverse(objs).forEach(CustomGameObject::restore);
-                if (clear) {
-                    customizedGameObjects.clear();
-                }
-            } else if (config.recolorBarriers() == SpoonTobConfig.barrierMode.COLOR) {
-                customizedGameObjects.forEach((o) -> o.setFaceColorValues(config.barriersColor()));
-            } else if (config.recolorBarriers() == SpoonTobConfig.barrierMode.RAVE) {
-                customizedGameObjects.forEach((o) -> o.setFaceColorValues(rave));
-            }
-        }
-    }
-
-    private boolean isLootingNonLootRoomChest() {
-        if (client.isInInstancedRegion()) {
-            return false;
-        } else {
-            Player you = client.getLocalPlayer();
-            if (you == null) {
-                return false;
-            } else {
-                WorldPoint wp = you.getWorldLocation();
-                if (wp.getRegionID() != 14642) {
-                    return false;
-                } else {
-                    Widget widget = client.getWidget(1507328);
-                    return widget != null && !widget.isHidden();
-                }
-            }
-        }
-    }
-
-    public boolean crossedLine(int region, Point start, Point end, boolean vertical) {
-        if (inRegion(region))
-            for (Player p : client.getPlayers()) {
-                WorldPoint wp = p.getWorldLocation();
-                if (vertical) {
-                    for (int j = start.getY(); j < end.getY() + 1; j++) {
-                        if (wp.getRegionY() == j && wp.getRegionX() == start.getX())
-                            return true;
-                    }
-                    continue;
-                }
-                for (int i = start.getX(); i < end.getX() + 1; i++) {
-                    if (wp.getRegionX() == i && wp.getRegionY() == start.getY())
-                        return true;
-                }
-            }
-        return false;
-    }
-
-    public boolean enforceRegion() {
-        return inRegion(12611, 12612, 12613, 12687, 13122, 13123, 13125, 13379);
-    }
-
-    public boolean inRegion(int... regions) {
-        if (client.getMapRegions() != null)
-            for (int i : client.getMapRegions()) {
-                for (int j : regions) {
-                    if (i == j)
-                        return true;
-                }
-            }
-        return false;
-    }
-
-    public void setHiddenNpc(NPC npc, boolean hidden) {
-        if (hidden) {
-            hiddenIndices.add(npc.getIndex());
-        } else {
-            if (hiddenIndices.contains(npc.getIndex()))
-            {
-                hiddenIndices.remove((Integer) npc.getIndex());
-            }
-        }
-    }
-
-    public void clearHiddenNpcs() {
-        hiddenIndices.clear();
-    }
-
-    @VisibleForTesting
-    boolean shouldDraw(Renderable renderable, boolean drawingUI)
-    {
-        if (renderable instanceof NPC)
-        {
-            NPC npc = (NPC) renderable;
-            return !hiddenIndices.contains(npc.getIndex());
-        }
-
-        return true;
-    }
-
-    private void SocketDeathIntegration(int passedIndex) {
-        for (NyloInfo ni : nylocas.nylocasNpcs) {
-            if (passedIndex == ni.nylo.getIndex()) {
-                ni.alive = false;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onAnimationChanged(AnimationChanged event) {
-        if(event.getActor() instanceof Player && event.getActor() != null) {
-            Player player = (Player) event.getActor();
-            int anim = player.getAnimation();
-            int hammerBop = 401;
-            int godBop = 7045;
-            int clawSpec = 7514;
-            int clawBop = 393;
-            int whip = 1658;
-            int blade = 390;
-            int rapier = 8145;
-            int chalyBop = 440;
-            int chalySpec = 1203;
-            int scy = 8056;
-            int bggsSpec = 7643;
-            int bggsSpec2 = 7642;
-            int hammerSpec = 1378;
-            int trident = 1167;
-            int surge = 7855;
-            int ticks = 0;
-            if (anim == scy)
-                ticks = 5;
-            if (anim == clawBop || anim == whip || anim == clawSpec || anim == trident || anim == surge || anim == blade || anim == rapier)
-                ticks = 4;
-            if (anim == chalySpec || anim == chalyBop)
-                ticks = 7;
-            if (anim == hammerSpec || anim == hammerBop || anim == bggsSpec || anim == bggsSpec2 || anim == godBop || anim == 7516)
-                ticks = 6;
-            if (ticks != 0) {
-                if(client.getLocalPlayer() != null && player == client.getLocalPlayer()) {
-                    situationalTicks = ticks;
-                }
-                situationalTicksList.put(player, ticks + 1);
-            }
-        }
-    }
-
-    public Color calculateHitpointsColor(double hpPercent) {
-        hpPercent = Math.max(Math.min(100.0D, hpPercent), 0.0D);
-        double rMod = 130.0D * hpPercent / 100.0D;
-        double gMod = 235.0D * hpPercent / 100.0D;
-        double bMod = 125.0D * hpPercent / 100.0D;
-        int r = (int)Math.min(255.0D, 255.0D - rMod);
-        int g = Math.min(255, (int)(0.0D + gMod));
-        int b = Math.min(255, (int)(0.0D + bMod));
-        return new Color(r, g, b);
-    }
-
-    public Color oldHitpointsColor(double hpPercent) {
-        hpPercent = Math.max(Math.min(100.0D, hpPercent), 0.0D);
-        double rMod = 0;
-        double gMod = 0;
-        double bMod = 0;
-        if (hpPercent >= 75.0D) {
-            rMod = 0;
-            gMod = 255;
-            bMod = 0;
-        } else if (hpPercent < 75.0D && hpPercent >= 50.0D) {
-            rMod = 255;
-            gMod = 255;
-            bMod = 0;
-        } else if (hpPercent < 50.0D && hpPercent >= 30.0D) {
-            rMod = 220;
-            gMod = 200;
-            bMod = 0;
-        } else if (hpPercent < 30.0D) {
-            rMod = 255;
-            gMod = 102;
-            bMod = 102;
-        }
-        int r = (int) rMod;
-        int g = (int)(gMod);
-        int b = (int)(bMod);
-        return new Color(r, g, b);
-    }
-
-    public void flowColor () {
-        int red = flowColor.getRed();
-        red += raveRedUp ? 1 : -1;
-        if(red == 255 || red == 0) {
-            raveRedUp = !raveRedUp;
-        }
-        int green = flowColor.getGreen();
-        green += raveGreenUp ? 1 : -1;
-        if(green == 255 || green == 0) {
-            raveGreenUp = !raveGreenUp;
-        }
-        int blue = flowColor.getBlue();
-        blue += raveBlueUp ? 1 : -1;
-        if(blue == 255 || blue == 0) {
-            raveBlueUp = !raveBlueUp;
-        }
-        flowColor = new Color(red, green, blue, 255);
-    }
-}
-    
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitToolTip.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitToolTip.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitToolTip.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitToolTip.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,63 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Graphics2D;
-import java.awt.Shape;
-import javax.inject.Inject;
-
-import net.runelite.api.Client;
-import net.runelite.api.Model;
-import net.runelite.api.NPC;
-import net.runelite.api.Perspective;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.ui.overlay.Overlay;
-import net.runelite.client.ui.overlay.tooltip.Tooltip;
-import net.runelite.client.ui.overlay.tooltip.TooltipManager;
-import net.runelite.client.util.ColorUtil;
-
-public class MaidenMaxHitToolTip extends Overlay {
-    @Inject
-    private  Client client;
-    @Inject
-    private  TooltipManager tooltipManager;
-
-    @Inject
-    private MaidenMaxHitToolTip(Client client, TooltipManager tooltipManager, Maiden maiden, SpoonTobConfig config) {
-        this.client = client;
-        this.tooltipManager = tooltipManager;
-        this.maiden = maiden;
-        this.config = config;
-    }
-    @Inject
-    private  Maiden maiden;
-    @Inject
-    private  SpoonTobConfig config;
-
-    public Dimension render(Graphics2D graphics) {
-        if (config.maidenMaxHit() != null && !client.isMenuOpen() && maiden.isMaidenActive()) {
-            NPC maidenNpc = maiden.getMaidenNPC();
-            Model model = maidenNpc.getModel();
-            LocalPoint localPoint = maidenNpc.getLocalLocation();
-            if (model != null && localPoint != null) {
-                Shape clickbox = Perspective.getClickbox(client, model, maidenNpc.getOrientation(), localPoint.getX(), localPoint.getY(), client.getPlane());
-                if (clickbox != null &&
-                        clickbox.contains(client.getMouseCanvasPosition().getX(), client.getMouseCanvasPosition().getY())) {
-                    int noPrayerMaxHit = (int) Math.floor(maiden.getMaxHit());
-                    int prayerMaxHit = noPrayerMaxHit / 2;
-                    int elyMaxHit = prayerMaxHit - (int) Math.floor(prayerMaxHit * 0.25D);
-                    tooltipManager.add(new Tooltip(ColorUtil.wrapWithColorTag("No Prayer:", new Color(255, 109, 97)) +
-                            ColorUtil.wrapWithColorTag(" +" + noPrayerMaxHit, new Color(-7278960)) + "</br>" +
-                            ColorUtil.wrapWithColorTag("Prayer:", Color.ORANGE) + ColorUtil.wrapWithColorTag(" +" + prayerMaxHit, new Color(-7278960)) + "</br>" +
-                            ColorUtil.wrapWithColorTag("Elysian:", Color.CYAN) + ColorUtil.wrapWithColorTag(" +" + elyMaxHit, new Color(-7278960))));
-                }
-            }
-        }
-
-
-        return null;
-    }
-}
-
-
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,267 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import net.runelite.api.NPC;
-import net.runelite.api.Perspective;
-import net.runelite.api.Player;
-import net.runelite.api.Point;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.FontManager;
-import net.runelite.client.ui.overlay.OverlayUtil;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.inject.Inject;
-import java.awt.*;
-import java.util.HashMap;
-
-public class NylocasOverlay extends RoomOverlay {
-    @Inject
-    private Nylocas nylocas;
-
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    protected NylocasOverlay(SpoonTobConfig config) {
-        super(config);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if(nylocas.isInNyloRegion() && client.getLocalPlayer() != null){
-            Player player = client.getLocalPlayer();
-            Point point = player.getCanvasTextLocation(graphics, "#", player.getLogicalHeight() + 60);
-            if (nylocas.isInstanceTimerRunning() && config.entryInstanceTimer() == SpoonTobConfig.instancerTimerMode.OVERHEAD && point != null) {
-                renderTextLocation(graphics, String.valueOf(nylocas.getInstanceTimer()), Color.CYAN, point);
-            }
-
-            if (config.showPhaseChange() != SpoonTobConfig.nyloBossPhaseChange.OFF && nylocas.getBossChangeTicks() > 0) {
-                drawNylocas(graphics);
-            }
-
-            if (nylocas.isNyloActive()) {
-                if (config.nyloPillars()) {
-                    Color c;
-                    HashMap<NPC, Integer> npcMap = nylocas.getNylocasPillars();
-                    for (NPC npc : npcMap.keySet()) {
-                        int health = npcMap.get(npc);
-                        String healthStr = health + "%";
-                        WorldPoint p = npc.getWorldLocation();
-                        LocalPoint lp = LocalPoint.fromWorld(client, p.getX() + 1, p.getY() + 1);
-                        if (config.oldHpThreshold()) {
-                            c = plugin.oldHitpointsColor(health);
-                        } else {
-                            c = plugin.calculateHitpointsColor(health);
-                        }
-                        if (lp != null) {
-                            Point canvasPoint = Perspective.localToCanvas(client, lp, client.getPlane(), 65);
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, healthStr, c, canvasPoint);
-                            } else {
-                                renderResizeTextLocation(graphics, healthStr, 13, Font.BOLD, c, canvasPoint);
-                            }
-                        }
-                    }
-                }
-
-                if (config.showNylocasExplosions() != SpoonTobConfig.ExplosionWarning.OFF || config.getHighlightMageNylo() || config.getHighlightMeleeNylo()
-                        || config.getHighlightRangeNylo() || config.nyloAggressiveOverlay() != SpoonTobConfig.aggroStyle.OFF) {
-                    int meleeIndex = 0;
-                    int rangeIndex = 0;
-                    int mageIndex = 0;
-
-                    for (NyloInfo ni : nylocas.nylocasNpcs) {
-                        NPC npc = ni.nylo;
-                        String name = npc.getName();
-                        LocalPoint lp = npc.getLocalLocation();
-
-                        if (ni.alive){
-                            if (nylocas.getAggressiveNylocas().contains(npc) && lp != null) {
-                                if (config.nyloAggressiveOverlay() == SpoonTobConfig.aggroStyle.TILE) {
-                                    Polygon poly = getCanvasTileAreaPoly(client, lp, npc.getComposition().getSize(), -25);
-                                    renderPoly(graphics, Color.RED, poly, config.nyloTileWidth());
-                                } else if (config.nyloAggressiveOverlay() == SpoonTobConfig.aggroStyle.HULL) {
-                                    Shape objectClickbox = npc.getConvexHull();
-                                    if (objectClickbox != null) {
-                                        Color color = Color.RED;
-                                        graphics.setColor(color);
-                                        graphics.setStroke(new BasicStroke((float)config.nyloTileWidth()));
-                                        graphics.draw(objectClickbox);
-                                        graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 0));
-                                        graphics.fill(objectClickbox);
-                                    }
-                                }
-                            }
-
-                            int ticksLeft = ni.ticks;
-                            if (ticksLeft > -1 && ticksLeft <= config.nyloExplosionDisplayTicks()) {
-                                int ticksAlive = ticksLeft;
-                                if (config.nyloTimeAliveCountStyle() == SpoonTobConfig.nylotimealive.COUNTUP)
-                                {
-                                    ticksAlive = 52 - ticksLeft;
-                                }
-
-                                Point textLocation = npc.getCanvasTextLocation(graphics, String.valueOf(ticksAlive), 60);
-                                if ((config.showNylocasExplosions() == SpoonTobConfig.ExplosionWarning.BOTH || config.showNylocasExplosions() == SpoonTobConfig.ExplosionWarning.TILE)
-                                        && ticksLeft <= 6 && lp != null && npc.getComposition() != null) {
-                                    if(config.nyloExplosionType() == SpoonTobConfig.nyloExplosionType.TILE){
-                                        renderPoly(graphics, Color.YELLOW, getCanvasTileAreaPoly(client, lp, npc.getComposition().getSize(), -15), config.nyloTileWidth());
-                                    } else {
-                                        renderPoly(graphics, Color.YELLOW, getCanvasTileAreaPoly(client, lp, npc.getComposition().getSize() + 4, 0), config.nyloTileWidth());
-                                    }
-                                }
-
-                                if(textLocation != null){
-                                    if ((config.showNylocasExplosions() == SpoonTobConfig.ExplosionWarning.BOTH || config.showNylocasExplosions() == SpoonTobConfig.ExplosionWarning.TICKS)) {
-                                        if ((ticksAlive >= 44 && config.nyloTimeAliveCountStyle() == SpoonTobConfig.nylotimealive.COUNTUP)
-                                                || (ticksAlive <= 8 && config.nyloTimeAliveCountStyle() == SpoonTobConfig.nylotimealive.COUNTDOWN)) {
-                                            if (config.fontStyle()){
-                                                renderTextLocation(graphics, String.valueOf(ticksAlive), Color.RED, textLocation);
-                                            }else {
-                                                renderSteroidsTextLocation(graphics, String.valueOf(ticksAlive), 13, Font.BOLD, Color.RED, textLocation);
-                                            }
-                                        } else {
-                                            if (config.fontStyle()){
-                                                renderTextLocation(graphics, String.valueOf(ticksAlive), Color.WHITE, textLocation);
-                                            } else {
-                                                renderSteroidsTextLocation(graphics, String.valueOf(ticksAlive), 13, Font.BOLD, Color.WHITE, textLocation);
-                                            }
-                                        }
-                                    }
-                                }
-                            }
-
-
-                            Color nyloColor = Color.WHITE;
-                            if(name != null && lp != null) {
-                                if (config.getHighlightMeleeNylo() && name.equals("Nylocas Ischyros")) {
-                                    if (config.raveNylo()) {
-                                        nyloColor = nylocas.meleeNyloRaveColors.get(meleeIndex);
-                                        meleeIndex++;
-                                    } else {
-                                        nyloColor = new Color(255, 188, 188);
-                                    }
-                                } else if (config.getHighlightRangeNylo() && name.equals("Nylocas Toxobolos")) {
-                                    if (config.raveNylo()) {
-                                        nyloColor = nylocas.rangeNyloRaveColors.get(rangeIndex);
-                                        rangeIndex++;
-                                    } else {
-                                        nyloColor = Color.GREEN;
-                                    }
-                                } else if (config.getHighlightMageNylo() && name.equals("Nylocas Hagios")) {
-                                    if (config.raveNylo()) {
-                                        nyloColor = nylocas.mageNyloRaveColors.get(mageIndex);
-                                        mageIndex++;
-                                    } else {
-                                        nyloColor = Color.CYAN;
-                                    }
-                                }
-
-                                if (nyloColor != Color.WHITE) {
-                                    renderPoly(graphics, nyloColor, Perspective.getCanvasTileAreaPoly(client, lp, npc.getComposition().getSize()), config.nyloTileWidth());
-                                }
-                            }
-                        }
-                    }
-                }
-
-                if((config.waveSpawnTimer() == SpoonTobConfig.waveSpawnTimerMode.OVERLAY || config.waveSpawnTimer() == SpoonTobConfig.waveSpawnTimerMode.BOTH)
-                        && client.getLocalPlayer() != null && nylocas.nyloWave < 31 && nylocas.waveSpawnTicks > -1) {
-                    String text = String.valueOf(nylocas.waveSpawnTicks);
-                    LocalPoint eastLp = LocalPoint.fromWorld(client, WorldPoint.fromRegion(client.getLocalPlayer().getWorldLocation().getRegionID(), 42, 25, client.getLocalPlayer().getWorldLocation().getPlane()));
-                    LocalPoint westLp = LocalPoint.fromWorld(client, WorldPoint.fromRegion(client.getLocalPlayer().getWorldLocation().getRegionID(), 5, 25, client.getLocalPlayer().getWorldLocation().getPlane()));
-                    LocalPoint southLp = LocalPoint.fromWorld(client, WorldPoint.fromRegion(client.getLocalPlayer().getWorldLocation().getRegionID(), 24, 6, client.getLocalPlayer().getWorldLocation().getPlane()));
-
-                    Color color = config.waveSpawnTimerColor();
-                    if (nylocas.stalledWave) {
-                        color = Color.RED;
-                    }
-
-                    if (config.fontStyle()) {
-                        if (eastLp != null)
-                            renderTextLocation(graphics, text, color, Perspective.getCanvasTextLocation(client, graphics, eastLp, text, 0));
-                        if (westLp != null)
-                            renderTextLocation(graphics, text, color, Perspective.getCanvasTextLocation(client, graphics, westLp, text, 0));
-                        if (southLp != null)
-                            renderTextLocation(graphics, text, color, Perspective.getCanvasTextLocation(client, graphics, southLp, text, 0));
-                    } else {
-                        if (eastLp != null)
-                            renderResizeTextLocation(graphics, text, 14, 1, color, Perspective.getCanvasTextLocation(client, graphics, eastLp, text, 0));
-                        if (westLp != null)
-                            renderResizeTextLocation(graphics, text, 14, 1, color, Perspective.getCanvasTextLocation(client, graphics, westLp, text, 0));
-                        if (southLp != null)
-                            renderResizeTextLocation(graphics, text, 14, 1, color, Perspective.getCanvasTextLocation(client, graphics, southLp, text, 0));
-                    }
-                }
-            }
-
-            if (config.showBigSplits()) {
-                nylocas.getSplitsMap().forEach((npc, ticks) -> {
-                    Polygon poly = Perspective.getCanvasTileAreaPoly(client, npc.getLocalLocation(), 2);
-                    if (poly != null)
-                    {
-                        renderPolygon(graphics, poly, config.bigsColor());
-                    }
-
-                    Point textLocation = Perspective.getCanvasTextLocation(client, graphics, npc.getLocalLocation(), "#", 0);
-                    if (textLocation != null) {
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, Integer.toString(ticks), Color.WHITE, textLocation);
-                        } else {
-                            renderBigSplitsTextLocation(graphics, Integer.toString(ticks), textLocation);
-                        }
-                    }
-                });
-            }
-
-        }
-        return null;
-    }
-
-    public void drawNylocas(Graphics2D graphics) {
-        NPC npc = null;
-        if(nylocas.minibossAlive && nylocas.nyloMiniboss != null && config.showPhaseChange() == SpoonTobConfig.nyloBossPhaseChange.BOTH){
-            npc = nylocas.nyloMiniboss;
-        }else if(nylocas.getNylocasBoss() != null){
-            npc = nylocas.getNylocasBoss();
-        }
-
-        if (npc != null){
-            LocalPoint lp = npc.getLocalLocation();
-            if (lp != null) {
-                String str = Integer.toString(nylocas.getBossChangeTicks());
-                Point loc = Perspective.getCanvasTextLocation(client, graphics, lp, str, 0);
-                if (loc != null) {
-                    if (config.fontStyle()){
-                        renderTextLocation(graphics, str, Color.WHITE, loc);
-                    } else {
-                        renderResizeTextLocation(graphics, str, 14, Font.BOLD, Color.WHITE, loc);
-                    }
-                }
-            }
-        }
-    }
-
-    protected void renderPolygon(Graphics2D graphics, @Nullable Shape polygon, @Nonnull Color color) {
-        if (polygon != null) {
-            graphics.setColor(color);
-            graphics.setStroke(new BasicStroke(2));
-            graphics.draw(polygon);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 0));
-            graphics.fill(polygon);
-        }
-    }
-
-    protected void renderBigSplitsTextLocation(Graphics2D graphics, String txtString, Point canvasPoint) {
-        graphics.setFont(new Font(FontManager.getRunescapeSmallFont().toString(), Font.BOLD, 13));
-        if (canvasPoint != null) {
-            Point canvasCenterPoint = new Point(canvasPoint.getX(), canvasPoint.getY());
-            Point canvasCenterPointShadow = new Point(canvasPoint.getX() + 1, canvasPoint.getY() + 1);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPointShadow, txtString, Color.BLACK);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint, txtString, Color.WHITE);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/WeaponMap.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponMap.java b/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponMap.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponMap.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,912 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import net.runelite.api.ItemID;
-
-import java.util.HashMap;
-
-public class WeaponMap
-{
-    public static HashMap<Integer, WeaponStyle> StyleMap = new HashMap<>();
-
-    static
-    {
-        //Melee
-        StyleMap.put(ItemID._3RD_AGE_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID._3RD_AGE_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID._3RD_AGE_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_BLUDGEON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_DAGGER_P, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_DAGGER_P_13269, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_DAGGER_P_13271, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_TENTACLE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_TENTACLE_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_WHIP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_WHIP_20405, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ABYSSAL_WHIP_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_CANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_DAGGERP_5676, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_DAGGERP_5694, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_SPEARP_5712, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_SPEARP_5726, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ADAMANT_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ALE_OF_THE_GODS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ANCIENT_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ANGER_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ANGER_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ANGER_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ANGER_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.AMYS_SAW, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ARCEUUS_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ARCLIGHT, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ARMADYL_GODSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ARMADYL_GODSWORD_20593, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ARMADYL_GODSWORD_22665, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ARMADYL_GODSWORD_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ASSORTED_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BANDOS_GODSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BANDOS_GODSWORD_20782, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BANDOS_GODSWORD_21060, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BANDOS_GODSWORD_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BARBTAIL_HARPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BARRELCHEST_ANCHOR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BEACH_BOXING_GLOVES, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BEACH_BOXING_GLOVES_11706, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BIRTHDAY_BALLOONS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BIRTHDAY_CAKE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_CANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_DAGGERP_5682, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_DAGGERP_5700, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SALAMANDER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SPEARP_5734, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SPEARP_5736, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLACK_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_INACTIVE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25870, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25872, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25874, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25876, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25878, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25880, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLADE_OF_SAELDOR_C_25882, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLESSED_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLISTERWOOD_SICKLE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLUE_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLUE_FLOWERS_8936, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BLURITE_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BONE_CLUB, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BONE_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BONE_DAGGER_P, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BONE_DAGGER_P_8876, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BONE_DAGGER_P_8878, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BONE_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BOXING_GLOVES, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BOXING_GLOVES_7673, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRINE_SABRE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_DAGGERP_5670, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_DAGGERP_5688, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_SPEARP_5704, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_SPEARP_5718, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRONZE_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BRUMA_TORCH, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.BUTTERFLY_NET, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CANDY_CANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CATTLEPROD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CHAOTIC_HANDEGG, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CLEAVER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_HALBERD_ATTUNED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_HALBERD_BASIC, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_HALBERD_PERFECTED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_HARPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CORRUPTED_SCEPTRE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRIER_BELL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_AXE_23862, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_AXE_INACTIVE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_110, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_110_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_210, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_210_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_24125, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_310, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_310_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_410, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_410_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_510, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_510_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_610, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_610_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_710, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_710_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_810, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_810_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_910, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_910_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_ATTUNED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_BASIC, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_FULL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_FULL_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_INACTIVE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HALBERD_PERFECTED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HARPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HARPOON_23864, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_HARPOON_INACTIVE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_PICKAXE_23863, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_PICKAXE_INACTIVE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CRYSTAL_SCEPTRE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.CURSED_GOBLIN_HAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DARKLIGHT, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DARK_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DECORATIVE_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DECORATIVE_SWORD_4503, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DECORATIVE_SWORD_4508, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE_0, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE_100, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE_25, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE_25516, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE_50, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DHAROKS_GREATAXE_75, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DINHS_BULWARK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_2H_SWORD_20559, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_AXE_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_CANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_CLAWS_20784, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_DAGGER_20407, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_DAGGERP_5680, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_DAGGERP_5698, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HARPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HARPOON_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HASTAKP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HASTAP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HASTAP_22737, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HASTAP_22740, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_HUNTER_LANCE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_PICKAXE_12797, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_PICKAXE_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_PICKAXE_OR_25376, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SCIMITAR_20406, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SCIMITAR_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SPEARP_5716, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SPEARP_5730, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.DRAGON_WARHAMMER_20785, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.EASTER_BASKET, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.EGG_WHISK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ELDER_MAUL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ELDER_MAUL_21205, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ENCHANTED_LYRE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ENCHANTED_LYRE1, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ENCHANTED_LYRE2, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ENCHANTED_LYRE3, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ENCHANTED_LYRE4, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ENCHANTED_LYRE5, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GOBLIN_PAINT_CANNON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.EXCALIBUR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.EXCALIBUR_8280, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.FLAMTAER_HAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.FREMENNIK_BLADE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.FROZEN_ABYSSAL_WHIP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GADDERHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GHRAZI_RAPIER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GHRAZI_RAPIER_23628, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GILDED_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GILDED_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GILDED_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GILDED_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GLOWING_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GOLDEN_TENCH, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_HAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_MAUL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_MAUL_12848, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_MAUL_20557, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_MAUL_24225, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GRANITE_MAUL_24227, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GREEN_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GUTHANS_WARSPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GUTHANS_WARSPEAR_0, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GUTHANS_WARSPEAR_100, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GUTHANS_WARSPEAR_25, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GUTHANS_WARSPEAR_50, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.GUTHANS_WARSPEAR_75, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HARRYS_CUTLASS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HAM_JOINT, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HAND_FAN, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HILL_GIANT_CLUB, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HOLY_HANDEGG, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HOLY_GHRAZI_RAPIER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HOLY_SCYTHE_OF_VITUR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HOLY_SCYTHE_OF_VITUR_UNCHARGED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.HOSIDIUS_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_AXE_UNCHARGED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_AXE_UNCHARGED_25371, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_HARPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_HARPOON_UNCHARGED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_HARPOON_UNCHARGED_25367, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_PICKAXE_UNCHARGED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INFERNAL_PICKAXE_UNCHARGED_25369, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.INQUISITORS_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_DAGGERP_5668, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_DAGGERP_5686, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_SPEARP_5706, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_SPEARP_5720, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.IRON_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.JADE_MACHETE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.KATANA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.KITCHEN_KNIFE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.KERIS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LARGE_SPADE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LEAFBLADED_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LEAFBLADED_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LEAFBLADED_SPEAR_4159, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LEAFBLADED_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LOVAKENGJ_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LUCKY_CUTLASS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.LYRE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MACHETE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MAGIC_BUTTERFLY_NET, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MAGIC_SECATEURS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MAGIC_SECATEURS_NZ, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MAPLE_BLACKJACK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MAPLE_BLACKJACKD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MAPLE_BLACKJACKO, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MEAT_TENDERISER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MERFOLK_TRIDENT, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_DAGGERP_5674, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_DAGGERP_5692, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_SPEARP_5710, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_SPEARP_5724, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MITHRIL_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MIXED_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.MOUSE_TOY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_HALBERD_FULL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_HALBERD_FULL_I, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_HALBERD_FULL_16893, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_HALBERD_FULL_I_16892, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.NOOSE_WAND, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.NUNCHAKU, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.OAK_BLACKJACK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.OAK_BLACKJACKD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.OAK_BLACKJACKO, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.OILY_FISHING_ROD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.OILY_PEARL_FISHING_ROD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.OPAL_MACHETE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ORANGE_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ORANGE_SALAMANDER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.PEACEFUL_HANDEGG, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.PET_ROCK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.PISCARILIUS_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.PROP_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.PURPLE_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAPIER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE_6774, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE_6775, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE_6776, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE_6777, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE_6778, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RAT_POLE_6779, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RED_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RED_FLOWERS_8938, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RED_SALAMANDER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RED_TOPAZ_MACHETE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ROCK_HAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ROYAL_SCEPTRE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUBBER_CHICKEN, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUBBER_CHICKEN_22666, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_BATTLEAXE_20552, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_CANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_DAGGERP_5678, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_DAGGERP_5696, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SCIMITAR_20402, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SCIMITAR_23330, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SCIMITAR_23332, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SCIMITAR_23334, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SPEARP_5714, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SPEARP_5728, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.RUNE_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SANGUINE_SCYTHE_OF_VITUR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SANGUINE_SCYTHE_OF_VITUR_UNCHARGED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SARADOMINS_BLESSED_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SARADOMIN_GODSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SARADOMIN_GODSWORD_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SARADOMIN_MJOLNIR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SARADOMIN_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SARAS_BLESSED_SWORD_FULL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SCYTHE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SCYTHE_OF_VITUR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SCYTHE_OF_VITUR_22664, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SCYTHE_OF_VITUR_UNCHARGED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SECRET_SANTA_PRESENT_RED, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SECRET_SANTA_PRESENT_BLUE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SECRET_SANTA_PRESENT_GREEN, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SECRET_SANTA_PRESENT_BLACK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SECRET_SANTA_PRESENT_GOLD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SEVERED_LEG_24792, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SHADOW_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SHAYZIEN_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SILVERLIGHT, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SILVERLIGHT_6745, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SILVERLIGHT_8279, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SILVER_SICKLE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SILVER_SICKLE_B, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SNOWBALL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STALE_BAGUETTE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STATIUSS_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STATIUSS_WARHAMMER_23620, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_DAGGERP_5672, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_DAGGERP_5690, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_SPEARP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_SPEARP_5708, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_SPEARP_5722, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STEEL_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.STONE_BOWL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SWAMP_LIZARD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.SWIFT_BLADE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TOKTZXILAK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TOKTZXILAK_20554, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TOKTZXILEK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TORAGS_HAMMERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TORAGS_HAMMERS_0, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TORAGS_HAMMERS_100, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TORAGS_HAMMERS_25, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TORAGS_HAMMERS_50, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TORAGS_HAMMERS_75, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAINING_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_ADAMANT_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_AXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_BRONZE_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_CANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_DRAGON_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_HARPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_IRON_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_MITHRIL_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_PICKAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_RUNE_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TRAILBLAZER_STEEL_TROPHY, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TROLLWEISS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TWISTED_BANNER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TZHAARKETEM, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TZHAARKETOM, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.TZHAARKETOM_T, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VERACS_FLAIL, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VERACS_FLAIL_0, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VERACS_FLAIL_100, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VERACS_FLAIL_25, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VERACS_FLAIL_50, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VERACS_FLAIL_75, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VESTAS_BLIGHTED_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VESTAS_LONGSWORD_INACTIVE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VESTAS_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VESTAS_LONGSWORD_23615, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VESTAS_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VIGGORAS_CHAINMACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VIGGORAS_CHAINMACE_U, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.VOLCANIC_ABYSSAL_WHIP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WESTERN_BANNER_1, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WESTERN_BANNER_2, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WESTERN_BANNER_3, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WESTERN_BANNER_4, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_2H_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_BATTLEAXE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_CLAWS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_DAGGER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_DAGGERP, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_DAGGERP_6595, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_DAGGERP_6597, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_HALBERD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_LONGSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_MACE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_SCIMITAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WHITE_WARHAMMER, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILDERNESS_SWORD_1, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILDERNESS_SWORD_2, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILDERNESS_SWORD_3, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILDERNESS_SWORD_4, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILLOW_BLACKJACK, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILLOW_BLACKJACKD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WILLOW_BLACKJACKO, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WOLFBANE, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WOODEN_SPOON, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.WOODEN_SWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.YELLOW_FLOWERS, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ZAMORAKIAN_HASTA, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ZAMORAKIAN_SPEAR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ZAMORAK_GODSWORD, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ZAMORAK_GODSWORD_OR, WeaponStyle.MELEE);
-        StyleMap.put(ItemID.ZOMBIE_HEAD, WeaponStyle.MELEE);
-        StyleMap.put(-1, WeaponStyle.MELEE); //hands and feet
-
-        //Ranged
-        StyleMap.put(ItemID._3RD_AGE_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_DARTP_5633, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_DARTP_5640, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_KNIFEP_5659, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_KNIFEP_5666, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ADAMANT_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.AMETHYST_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.AMETHYST_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.AMETHYST_DARTP_25855, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.AMETHYST_DARTP_25857, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ARMADYL_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ARMADYL_CROSSBOW_23611, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_CHINCHOMPA, WeaponStyle.CHINS);
-        StyleMap.put(ItemID.BLACK_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_DARTP_5631, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_DARTP_5638, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_KNIFEP_5658, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLACK_KNIFEP_5665, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BLURITE_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_DARTP_5628, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_DARTP_5635, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_KNIFEP_5654, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_KNIFEP_5661, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BRONZE_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_INACTIVE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25869, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25884, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25886, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25888, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25890, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25892, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25894, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.BOW_OF_FAERDHINEN_C_25896, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CHINCHOMPA, WeaponStyle.CHINS);
-        StyleMap.put(ItemID.CHINCHOMPA_10033, WeaponStyle.CHINS);
-        StyleMap.put(ItemID.COMP_OGRE_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CORRUPTED_BOW_ATTUNED, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CORRUPTED_BOW_BASIC, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CORRUPTED_BOW_PERFECTED, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRAWS_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRAWS_BOW_U, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_110, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_110_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_210, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_210_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_310, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_310_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_410, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_410_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_510, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_510_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_610, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_610_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_710, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_710_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_810, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_810_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_910, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_910_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_24123, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_ATTUNED, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_BASIC, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_FULL, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_FULL_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_INACTIVE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CRYSTAL_BOW_PERFECTED, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.CURSED_GOBLIN_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DARK_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DARK_BOW_12765, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DARK_BOW_12766, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DARK_BOW_12767, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DARK_BOW_12768, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DARK_BOW_20408, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DORGESHUUN_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_DARTP_11233, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_DARTP_11234, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_HUNTER_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_KNIFEP_22808, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_KNIFEP_22810, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.DRAGON_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.HEAVY_BALLISTA, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.HEAVY_BALLISTA_23630, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.HOLY_WATER, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.HUNTERS_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_DART_P, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_DARTP_5636, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_KNIFEP_5655, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_KNIFEP_5662, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.IRON_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.KARILS_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.KARILS_CROSSBOW_0, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.KARILS_CROSSBOW_100, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.KARILS_CROSSBOW_25, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.KARILS_CROSSBOW_50, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.KARILS_CROSSBOW_75, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.LIGHT_BALLISTA, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.LONGBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAGIC_COMP_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAGIC_LONGBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAGIC_SHORTBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAGIC_SHORTBOW_20558, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAGIC_SHORTBOW_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAPLE_LONGBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MAPLE_SHORTBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_DARTP_5632, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_DARTP_5639, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_KNIFEP_5657, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_KNIFEP_5664, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MITHRIL_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MONKEY_TALISMAN, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MORRIGANS_JAVELIN, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MORRIGANS_JAVELIN_23619, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MORRIGANS_THROWING_AXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.MUD_PIE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_BOW_4213, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_BOW_16888, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_BOW_I, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.NEW_CRYSTAL_BOW_I_16889, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.OAK_LONGBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.OAK_SHORTBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.OGRE_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.PHOENIX_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RED_CHINCHOMPA, WeaponStyle.CHINS);
-        StyleMap.put(ItemID.RED_CHINCHOMPA_10034, WeaponStyle.CHINS);
-        StyleMap.put(ItemID.RUNE_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_CROSSBOW_OR, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_CROSSBOW_23601, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_DARTP_5634, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_DARTP_5641, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_KNIFEP_5660, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_KNIFEP_5667, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.RUNE_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.SEERCULL, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.SHORTBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.SIGNED_OAK_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STARTER_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_CROSSBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_DART, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_DARTP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_DARTP_5630, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_DARTP_5637, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_KNIFE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_KNIFEP, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_KNIFEP_5656, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_KNIFEP_5663, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.STEEL_THROWNAXE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.TOKTZXILUL, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.TOXIC_BLOWPIPE, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.TOXIC_BLOWPIPE_EMPTY, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.TRAINING_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.TWISTED_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.WILLOW_COMP_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.WILLOW_LONGBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.WILLOW_SHORTBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.YEW_COMP_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.YEW_LONGBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.YEW_SHORTBOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ZARYTE_BOW, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ZARYTE_BOW_26239, WeaponStyle.RANGE);
-        StyleMap.put(ItemID.ZARYTE_CROSSBOW, WeaponStyle.RANGE);
-
-        //Magic
-        StyleMap.put(ItemID._3RD_AGE_WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF_0, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF_100, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF_25, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF_50, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF_75, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AHRIMS_STAFF_23653, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.AIR_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ANCIENT_CROZIER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ANCIENT_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.APPRENTICE_WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ARMADYL_CROZIER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BANDOS_CROZIER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BEGINNER_WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BLISTERWOOD_FLAIL, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BROKEN_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BRYOPHYTAS_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.BRYOPHYTAS_STAFF_UNCHARGED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CORRUPTED_STAFF_ATTUNED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CORRUPTED_STAFF_BASIC, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CORRUPTED_STAFF_PERFECTED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CRYSTAL_STAFF_ATTUNED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CRYSTAL_STAFF_BASIC, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CRYSTAL_STAFF_PERFECTED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.CURSED_GOBLIN_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.DAWNBRINGER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.DRAMEN_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.DUST_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.EARTH_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ELDRITCH_NIGHTMARE_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.FIRE_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.GUTHIX_CROZIER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.GUTHIX_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.HARMONISED_NIGHTMARE_STAFF, WeaponStyle.MAGIC);
-        //StyleMap.put(ItemID.HOLY_SANGUINESTI_STAFF, WeaponStyle.MAGIC);
-        //StyleMap.put(ItemID.HOLY_SANGUINESTI_STAFF_UNCHARGED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.IBANS_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.IBANS_STAFF_1410, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.IBANS_STAFF_U, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.IVANDIS_FLAIL, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.KODAI_WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.KODAI_WAND_23626, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.LAVA_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.LAVA_BATTLESTAFF_21198, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.LUNAR_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MAGIC_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MASTER_WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MASTER_WAND_20560, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MIST_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MUD_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_AIR_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_DUST_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_EARTH_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_FIRE_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_LAVA_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_LAVA_STAFF_21200, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_MIST_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_MUD_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_SMOKE_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_STEAM_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_STEAM_STAFF_12796, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.MYSTIC_WATER_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.NIGHTMARE_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9045, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9046, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9047, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9048, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9049, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9050, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_9051, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_13074, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_13075, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_13077, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_13078, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_16176, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_21445, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_21446, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_26948, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.PHARAOHS_SCEPTRE_26950, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_1, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_10, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_2, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_3, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_4, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_5, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_6, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_7, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_8, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ROD_OF_IVANDIS_9, WeaponStyle.MAGIC);
-        //StyleMap.put(ItemID.SANGUINESTI_STAFF, WeaponStyle.MAGIC);
-        //StyleMap.put(ItemID.SANGUINESTI_STAFF_UNCHARGED, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SARADOMIN_CROZIER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SARADOMIN_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SKULL_SCEPTRE, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SKULL_SCEPTRE_I, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SLAYERS_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SLAYERS_STAFF_E, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.SMOKE_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_AIR, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_BALANCE, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_BOB_THE_CAT, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_EARTH, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_FIRE, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_LIGHT, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_THE_DEAD, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_THE_DEAD_23613, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STAFF_OF_WATER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STARTER_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STEAM_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.STEAM_BATTLESTAFF_12795, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.TEACHER_WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.THAMMARONS_SCEPTRE, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.THAMMARONS_SCEPTRE_U, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.TOKTZMEJTAL, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.TOXIC_STAFF_OF_THE_DEAD, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.TOXIC_STAFF_UNCHARGED, WeaponStyle.MAGIC);
-		/*StyleMap.put(ItemID.TRIDENT_OF_THE_SEAS, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.TRIDENT_OF_THE_SEAS_E, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.TRIDENT_OF_THE_SEAS_FULL, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.TRIDENT_OF_THE_SWAMP, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.TRIDENT_OF_THE_SWAMP_E, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.UNCHARGED_TOXIC_TRIDENT, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.UNCHARGED_TOXIC_TRIDENT_E, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.UNCHARGED_TRIDENT, WeaponStyle.MAGIC);
-		StyleMap.put(ItemID.UNCHARGED_TRIDENT_E, WeaponStyle.MAGIC);*/
-        StyleMap.put(ItemID.VOID_KNIGHT_MACE, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.VOID_KNIGHT_MACE_BROKEN, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.VOLATILE_NIGHTMARE_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.VOLATILE_NIGHTMARE_STAFF_25517, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.WAND, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.WATER_BATTLESTAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.WHITE_MAGIC_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ZAMORAK_CROZIER, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ZAMORAK_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ZURIELS_STAFF, WeaponStyle.MAGIC);
-        StyleMap.put(ItemID.ZURIELS_STAFF_23617, WeaponStyle.MAGIC);
-        //what the fuck...
-        StyleMap.put(ItemID.GNOMEBALL, WeaponStyle.MAGIC);
-
-        //Tridents
-        StyleMap.put(ItemID.HOLY_SANGUINESTI_STAFF, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.HOLY_SANGUINESTI_STAFF_UNCHARGED, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.SANGUINESTI_STAFF, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.SANGUINESTI_STAFF_UNCHARGED, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.TRIDENT_OF_THE_SEAS, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.TRIDENT_OF_THE_SEAS_E, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.TRIDENT_OF_THE_SEAS_FULL, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.TRIDENT_OF_THE_SWAMP, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.TRIDENT_OF_THE_SWAMP_E, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.UNCHARGED_TOXIC_TRIDENT, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.UNCHARGED_TOXIC_TRIDENT_E, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.UNCHARGED_TRIDENT, WeaponStyle.TRIDENTS);
-        StyleMap.put(ItemID.UNCHARGED_TRIDENT_E, WeaponStyle.TRIDENTS);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/WeaponStyle.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponStyle.java b/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponStyle.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponStyle.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,6 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-public enum WeaponStyle
-{
-    MAGIC, RANGE, MELEE, CHINS, TRIDENTS
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/DistanceInfo.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/DistanceInfo.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/DistanceInfo.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/DistanceInfo.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,55 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def;
-
-import java.util.Objects;
-
-public final class DistanceInfo {
-    private static final int MAX = 7;
-    private static final int MIN = 4;
-    private final int distance;
-
-    public boolean isCorner() {
-        return this.distance >= 7 || this.distance <= 4;
-    }
-
-    public boolean shouldModifyCorner(BloatPath path) {
-        boolean mod = (path == BloatPath.N_PATH || path == BloatPath.S_PATH) && (this.distance == 8 || this.distance == 3);
-        return mod || this.distance == 7 || this.distance == 4;
-    }
-
-    public byte getCornerIndex(boolean isClockwise) {
-        int cidx = this.distance >= 7 ? 0 : 1;
-        if (!isClockwise) {
-            cidx ^= 1;
-        }
-
-        return (byte)cidx;
-    }
-
-    public boolean isSideMin() {
-        return this.distance == 6;
-    }
-
-    public boolean isSideMax() {
-        return this.distance == 5;
-    }
-
-    public boolean equals(Object other) {
-        if (!(other instanceof DistanceInfo)) {
-            return false;
-        } else {
-            return this.distance == ((DistanceInfo)other).distance;
-        }
-    }
-
-    public int hashCode() {
-        return Objects.hash(this.distance);
-    }
-
-    public DistanceInfo(int distance) {
-        this.distance = distance;
-    }
-
-    public int getDistance() {
-        return this.distance;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasAliveCounterOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasAliveCounterOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasAliveCounterOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasAliveCounterOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,102 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import lombok.Getter;
-import lombok.Setter;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.LineComponent;
-import net.runelite.client.ui.overlay.components.PanelComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.time.Duration;
-import java.time.Instant;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-
-public class NylocasAliveCounterOverlay extends OverlayPanel {
-    private static final String prefix = "Nylocas alive: ";
-    private final PanelComponent panelComponent = new PanelComponent();
-    private LineComponent waveComponent;
-    private SpoonTobPlugin plugin;
-    private SpoonTobConfig config;
-
-    @Setter
-    private Instant nyloWaveStart;
-
-    @Getter
-    private int nyloAlive = 0;
-
-    @Getter
-    private int maxNyloAlive = 12;
-
-    @Getter
-    private int wave = 0;
-
-    @Setter
-    @Getter
-    private boolean hidden = false;
-
-
-    @Inject
-    private NylocasAliveCounterOverlay(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin);
-        this.plugin = plugin;
-        this.config = config;
-        setPosition(OverlayPosition.TOP_LEFT);
-        setPriority(OverlayPriority.HIGH);
-        refreshPanel();
-    }
-
-    public void setNyloAlive(int aliveCount) {
-        nyloAlive = aliveCount;
-        refreshPanel();
-    }
-
-    public void setMaxNyloAlive(int maxAliveCount) {
-        maxNyloAlive = maxAliveCount;
-        refreshPanel();
-    }
-
-    public void setWave(int wave) {
-        this.wave = wave;
-        refreshPanel();
-    }
-
-    private void refreshPanel() {
-        LineComponent lineComponent = LineComponent.builder()
-                .left("Alive: ")
-                .right(nyloAlive + "/" + maxNyloAlive)
-                .build();
-        if (nyloAlive >= maxNyloAlive) {
-            lineComponent.setRightColor(Color.ORANGE);
-        } else {
-            lineComponent.setRightColor(Color.GREEN);
-        }
-
-        waveComponent = LineComponent.builder()
-                .left("Wave: " + this.wave)
-                .build();
-        panelComponent.getChildren().clear();
-        panelComponent.getChildren().add(waveComponent);
-        panelComponent.getChildren().add(lineComponent);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (config.nyloAlivePanel() && !isHidden()) {
-            this.panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth("Alive: 24/24") + 10, 0));
-            return panelComponent.render(graphics);
-        } else {
-            return null;
-        }
-    }
-
-    public String getFormattedTime() {
-        Duration duration = Duration.between(this.nyloWaveStart, Instant.now());
-        LocalTime localTime = LocalTime.ofSecondOfDay(duration.getSeconds());
-        return localTime.format(DateTimeFormatter.ofPattern("mm:ss"));
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusCounterPanel.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusCounterPanel.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusCounterPanel.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusCounterPanel.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,50 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Xarpus;
-
-import net.runelite.api.Client;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.components.LineComponent;
-import net.runelite.client.ui.overlay.components.TitleComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class XarpusCounterPanel extends OverlayPanel {
-    private final Client client;
-    private final SpoonTobPlugin plugin;
-    private final SpoonTobConfig config;
-    private Xarpus xarpus;
-
-    @Inject
-    public XarpusCounterPanel(Client client, SpoonTobPlugin plugin, SpoonTobConfig config, Xarpus xarpus) {
-        super(plugin);
-        this.client = client;
-        this.xarpus = xarpus;
-        this.plugin = plugin;
-        this.config = config;
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (xarpus.isXarpusActive() && xarpus.isExhumedSpawned() && xarpus.getExhumedCounter() != null && Xarpus.P1_IDS.contains(xarpus.getXarpusNPC().getId())
-                && config.xarpusExhumedInfo()) {
-            if (config.fontStyle()) {
-                graphics.setFont(new Font("SansSerif", 0, 11));
-            }
-            String exhumeds = Integer.toString(xarpus.getExhumedCounter().getCount());
-            String healed = Integer.toString(xarpus.healCount);
-
-            panelComponent.getChildren().clear();
-            String overlayTitle = "Exhume Counter";
-            panelComponent.getChildren().add(TitleComponent.builder().text(overlayTitle).color(Color.GREEN).build());
-            panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(overlayTitle) + 30, 0));
-            panelComponent.getChildren().add(LineComponent.builder().left("Exhumes: ").right(exhumeds).build());
-            panelComponent.getChildren().add(LineComponent.builder().left("Healed: ").right(healed).build());
-            return super.render(graphics);
-        } else {
-            return null;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/TheatreConstant.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreConstant.java b/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreConstant.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreConstant.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,40 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-public class TheatreConstant {
-  public static final int MAIDEN_BLOOD_THROW = 1579;
-  public static final int NPC_ID_NYLOCAS_PILLAR = 8358;
-  public static final int GROUNDOBJECT_ID_BLACKMAZE = 33034;
-  public static final int GROUNDOBJECT_ID_REDMAZE = 33035;
-  public static final int GROUNDOBJECT_ID_EXHUMED = 32743;
-  public static final int ANIMATION_ID_XARPUS = 8059;
-  public static final int SOTETSEG_NORMAL = 8388;
-  public static final int SOTETSEG_MAZE = 8387;
-  public static final int SOTETSEG_BOMB = 1604;
-  public static final int SOTETSEG_RANGE = 1607;
-  public static final int SOTETSEG_MAGE = 1606;
-  public static final int GRAPHICSOBJECT_ID_YELLOW = 1595;
-  public static final int PROJECTILE_ID_P2RANGE = 1583;
-  public static final int PROJECTILE_ID_YELLOW = 1596;
-  public static final int ANIMATION_ID_P3_WEB = 8127;
-  public static final int ANIMATION_ID_P3_YELLOW = 8126;
-  public static final int ANIMATION_ID_P3_MELEE = 8123;
-  public static final int ANIMATION_ID_P3_MAGE = 8124;
-  public static final int ANIMATION_ID_P3_RANGE = 8125;
-  public static final int ANIMATION_ID_P1_ATTACK = 8109;
-  public static final int ANIMATION_ID_P2_ATTACK_RANGE = 8114;
-  public static final int ANIMATION_ID_P2_ATTACK_MELEE = 8116;
-  public static final int ANIMATION_ID_P2_SHIELD = 8117;
-  public static final int VERZIK_ID_P0 = 8369;
-  public static final int VERZIK_ID_P1 = 8370;
-  public static final int VERZIK_ID_P1_WALK = 8371;
-  public static final int VERZIK_ID_P2 = 8372;
-  public static final int VERZIK_ID_P2_TRANSFORM = 8373;
-  public static final int VERZIK_ID_P3 = 8374;
-  public static final int VERZIK_ID_P3_BAT = 8375;
-  public static final int VERZIK_P3_RANGE = 1593;
-  public static final int VERZIK_P3_MAGE = 1594;
-  public static final int NPC_ID_TORNADO = 8386;
-  public static final int PROJECTILE_ID_P3_GREEN = 1598;
-  public static final int GRAPHIC_ID_YELLOWS = 1595;
-  public static final int DOOR_VARP = 6447;
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/LavaRunecrafter/TeleportMethods.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/LavaRunecrafter/TeleportMethods.java b/src/main/java/net/runelite/client/plugins/LavaRunecrafter/TeleportMethods.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/LavaRunecrafter/TeleportMethods.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,6 +0,0 @@
-package net.runelite.client.plugins.LavaRunecrafter;
-
-public enum TeleportMethods {
-    RING_OF_ELEMENTS,
-    RING_OF_DUELING
-}
Index: src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstoneConfig.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstoneConfig.java b/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstoneConfig.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstoneConfig.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,30 +0,0 @@
-package net.runelite.client.plugins.ocsand;
-
-import net.runelite.client.config.Config;
-import net.runelite.client.config.Config;
-import net.runelite.client.config.ConfigGroup;
-import net.runelite.client.config.ConfigItem;
-
-@ConfigGroup("oneclickzmi")
-public interface OneClickSandstoneConfig extends Config {
-
-    @ConfigItem(
-            position = 0,
-            keyName = "forceMineNorth",
-            name = "North Rocks Only?",
-            description = "Will only mine the rocks at the north that people normally mine otherwise will mine the nearest rock at all times."
-    )
-    default boolean forceMineNorth() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 1,
-            keyName = "humidify",
-            name = "Cast Humidify(doesn't work atm)",
-            description = "Cast Humidify"
-    )
-    default boolean humidify() {
-        return true;
-    }
-}
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/ThresholdOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/ThresholdOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/ThresholdOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/ThresholdOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,43 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.LineComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class ThresholdOverlay extends OverlayPanel {
-
-    private final Maiden maiden;
-    private final SpoonTobConfig config;
-
-    @Inject
-    private ThresholdOverlay(Maiden maiden, SpoonTobConfig config) {
-        this.maiden = maiden;
-        this.config = config;
-        setPriority(OverlayPriority.HIGH);
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-        panelComponent.setPreferredSize(new Dimension(100, 0));
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (config.maidenProcThreshold() && maiden.getMaidenNPC() != null && maiden.getMaidenNPC().getId() != 8363) {
-            if (maiden.getRealMaidenHp() >= maiden.getThresholdHp()) {
-                String maidenThresholdStr = Integer.toString(maiden.getRealMaidenHp() - maiden.getThresholdHp());
-                this.panelComponent.getChildren().add(LineComponent.builder()
-                        .left("DMG Left:")
-                        .leftColor(Color.WHITE)
-                        .right(maidenThresholdStr)
-                        .rightColor(Color.GREEN)
-                        .build());
-            }
-
-            return super.render(graphics);
-        } else {
-            return null;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/BloatOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/BloatOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/BloatOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/BloatOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,142 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat;
-
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.BloatSafespot;
-import net.runelite.api.Perspective;
-import net.runelite.api.Point;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.SSLine;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.inject.Inject;
-import java.awt.*;
-
-public class BloatOverlay extends RoomOverlay {
-    @Inject
-    private Bloat bloat;
-
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    protected BloatOverlay(SpoonTobConfig config) {
-        super(config);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if(bloat.isBloatActive()) {
-            if (config.bloatIndicator() != SpoonTobConfig.BloatIndicatorMode.OFF) {
-                if (config.bloatIndicator() == SpoonTobConfig.BloatIndicatorMode.TILE) {
-                    renderNpcPoly(graphics, bloat.getBloatStateColor(), bloat.getBloatTilePoly(), 3, bloat.getBloatStateColor().getAlpha());
-                } else if (config.bloatIndicator() == SpoonTobConfig.BloatIndicatorMode.TRUE_LOCATION) {
-                    renderNpcTLOverlay(graphics, bloat.getBloatNPC(), bloat.getBloatStateColor(), 3, bloat.getBloatStateColor().getAlpha(), 0);
-                }
-            }
-
-            if (config.showBloatHands() != SpoonTobConfig.bloatHandsMode.OFF || config.bloatHandsTicks()) {
-                int index = 0;
-                Color color = config.bloatHandColor();
-                for (WorldPoint point : bloat.getBloathands().keySet()) {
-                    if (config.showBloatHands() == SpoonTobConfig.bloatHandsMode.RAVE) {
-                        color = plugin.raveUtils.getColor(bloat.getBloathands().hashCode(), true);
-                    } else if (config.showBloatHands() == SpoonTobConfig.bloatHandsMode.RAVEST) {
-                        color = plugin.raveUtils.getColor(index * 50, false);
-                    }
-                    drawTile(graphics, point, color, 1, config.bloatHandColor().getAlpha(), config.bloatColorFill());
-
-                    if(config.bloatHandsTicks() && bloat.handsFalling){
-                        String text = String.valueOf(bloat.handTicks);
-                        LocalPoint lp = LocalPoint.fromWorld(client, point);
-                        if(lp != null) {
-                            Point p = Perspective.getCanvasTextLocation(client, graphics, lp, text, 0);
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, text, Color.WHITE, p);
-                            } else {
-                                renderSteroidsTextLocation(graphics, text, 12, Font.BOLD, Color.WHITE, p);
-                            }
-                        }
-                    }
-                    index++;
-                }
-            }
-
-            if (bloat.bloatVar == 1) {
-                if (config.bloatUpTimer() && bloat != null) {
-                    Point canvasPoint = bloat.getBloatNPC().getCanvasTextLocation(graphics, String.valueOf(bloat.getBloatUpTimer()), 60);
-                    if (bloat.getBloatState() != 1 && bloat.getBloatState() != 4) {
-                        String str = String.valueOf(33 - bloat.getBloatDownCount());
-                        if (bloat.getBloatDownCount() >= 26) {
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, str, Color.RED, canvasPoint);
-                            } else {
-                                renderResizeTextLocation(graphics, str, 15, Font.BOLD, Color.RED, canvasPoint);
-                            }
-                        } else {
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, str, Color.WHITE, canvasPoint);
-                            } else {
-                                renderResizeTextLocation(graphics, str, 15, Font.BOLD, Color.WHITE, canvasPoint);
-                            }
-                        }
-                    } else {
-                        Color col = bloat.getBloatUpTimer() > 37 ? Color.RED : Color.WHITE;
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, String.valueOf(bloat.getBloatUpTimer()), col, canvasPoint);
-                        } else {
-                            //int secondConversion = (int)((double)bloat.getBloatUpTimer() * 0.6D);
-                            //renderTextLocation(graphics, bloat.getBloatUpTimer() + "( " + secondConversion + " )", 15, 1, col, canvasPoint);
-                            renderResizeTextLocation(graphics, String.valueOf(bloat.getBloatUpTimer()), 15, Font.BOLD, col, canvasPoint);
-                        }
-                    }
-                }
-            } else if (bloat.bloatVar == 0) {
-                if (config.bloatEntryTimer() && bloat != null) {
-                    Point canvasPoint = bloat.getBloatNPC().getCanvasTextLocation(graphics, String.valueOf(bloat.getBloatUpTimer()), 60);
-                    Color col = Color.WHITE;
-                    if (config.fontStyle()) {
-                        renderTextLocation(graphics, String.valueOf(bloat.getBloatUpTimer()), col, canvasPoint);
-                    } else {
-                        renderResizeTextLocation(graphics, String.valueOf(bloat.getBloatUpTimer()), 15, Font.BOLD, col, canvasPoint);
-                    }
-                }
-            }
-
-            if (bloat != null) {
-                if ((bloat.getBloatState() == 2 || bloat.getBloatState() == 3) && config.bloatStompMode() != SpoonTobConfig.bloatStompMode.OFF) {
-                    renderStompSafespots(graphics);
-                }
-            }
-        }
-        return null;
-    }
-
-    private void renderStompSafespots(Graphics2D graphics) {
-        if (bloat.getBloatDown() != null) {
-            BloatSafespot safespot = bloat.getBloatDown().getBloatSafespot();
-            safespot.getSafespotLines().forEach((line) -> {
-                Color color = config.bloatStompColor();
-                if (config.bloatStompMode() == SpoonTobConfig.bloatStompMode.RAVE){
-                    color = plugin.raveUtils.getColor(line.hashCode(), true);
-                }
-                drawLine(graphics, line, color, config.bloatStompWidth());
-            });
-        }
-    }
-
-    protected void drawLine(Graphics2D graphics, @Nullable SSLine safespotLine, @Nonnull Color lineColor, int lineStroke) {
-        if (safespotLine != null) {
-            Point pointA = safespotLine.getTranslatedPointA(client);
-            Point pointB = safespotLine.getTranslatedPointB(client);
-            if (pointA != null && pointB != null) {
-                graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-                graphics.setStroke(new BasicStroke((float)lineStroke));
-                graphics.setColor(lineColor);
-                graphics.drawLine(pointA.getX(), pointA.getY(), pointB.getX(), pointB.getY());
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/RoomOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/RoomOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/RoomOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/RoomOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,243 +0,0 @@
-package net.runelite.client.plugins.spoontob;
-
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.ui.FontManager;
-import net.runelite.client.ui.overlay.*;
-
-import javax.annotation.Nonnull;
-import javax.inject.Inject;
-import java.awt.*;
-
-public abstract class RoomOverlay extends Overlay {
-    protected final SpoonTobConfig config;
-    @Inject
-    protected Client client;
-
-    @Inject
-    protected RoomOverlay(SpoonTobConfig config) {
-        this.config = config;
-        this.setPosition(OverlayPosition.DYNAMIC);
-        this.setPriority(OverlayPriority.HIGH);
-        this.setLayer(OverlayLayer.ABOVE_SCENE);
-    }
-
-    protected void drawTile(Graphics2D graphics, WorldPoint point, Color color, int strokeWidth, int outlineAlpha, int fillAlpha) {
-        WorldPoint playerLocation = this.client.getLocalPlayer().getWorldLocation();
-        if (point.distanceTo(playerLocation) < 32) {
-            LocalPoint lp = LocalPoint.fromWorld(this.client, point);
-            if (lp != null) {
-                Polygon poly = Perspective.getCanvasTilePoly(this.client, lp);
-                if (poly != null) {
-                    graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineAlpha));
-                    graphics.setStroke(new BasicStroke((float)strokeWidth));
-                    graphics.draw(poly);
-                    graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillAlpha));
-                    graphics.fill(poly);
-                }
-            }
-        }
-    }
-
-    protected void drawTL(Graphics2D graphics, WorldPoint point, Color color, int strokeWidth, int outlineAlpha, int fillAlpha, NPC npc) {
-        WorldPoint playerLocation = this.client.getLocalPlayer().getWorldLocation();
-        if (point.distanceTo(playerLocation) < 32) {
-            int size = 1;
-            NPCComposition composition = npc.getTransformedComposition();
-            if (composition != null)
-                size = composition.getSize();
-            LocalPoint lp = LocalPoint.fromWorld(this.client, point);
-            if (lp != null) {
-                lp = new LocalPoint(lp.getX() + size * 128 / 2 - 64, lp.getY() + size * 128 / 2 - 64);
-                Polygon tilePoly = Perspective.getCanvasTileAreaPoly(this.client, lp, size);
-                if (tilePoly != null) {
-                    graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineAlpha));
-                    graphics.setStroke(new BasicStroke((float)strokeWidth));
-                    graphics.draw(tilePoly);
-                    graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillAlpha));
-                    graphics.fill(tilePoly);
-                }
-            }
-        }
-    }
-
-    protected void renderNpcOverlay(Graphics2D graphics, NPC actor, Color color, int outlineWidth, int outlineAlpha, int fillAlpha) {
-        int size = 1;
-        NPCComposition composition = actor.getTransformedComposition();
-        if (composition != null) {
-            size = composition.getSize();
-        }
-
-        LocalPoint lp = actor.getLocalLocation();
-        Polygon tilePoly = Perspective.getCanvasTileAreaPoly(this.client, lp, size);
-
-        if (tilePoly != null) {
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineAlpha));
-            graphics.setStroke(new BasicStroke((float)outlineWidth));
-            graphics.draw(tilePoly);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillAlpha));
-            graphics.fill(tilePoly);
-        }
-    }
-
-    protected void renderNpcTLOverlay(Graphics2D graphics, NPC actor, Color color, int outlineWidth, int outlineAlpha, int fillAlpha) {
-        int size = 1;
-        NPCComposition composition = actor.getTransformedComposition();
-        if (composition != null) {
-            size = composition.getSize();
-        }
-        LocalPoint lp = LocalPoint.fromWorld(this.client, actor.getWorldLocation());
-        if (lp != null) {
-            lp = new LocalPoint(lp.getX() + size * 128 / 2 - 64, lp.getY() + size * 128 / 2 - 64);
-            Polygon tilePoly = Perspective.getCanvasTileAreaPoly(this.client, lp, size);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineAlpha));
-            graphics.setStroke(new BasicStroke((float)outlineWidth));
-            graphics.draw(tilePoly);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillAlpha));
-            graphics.fill(tilePoly);
-        }
-    }
-
-    protected void renderTextLocation(Graphics2D graphics, String txtString, Color fontColor, Point canvasPoint) {
-        if (canvasPoint != null) {
-            Point canvasCenterPoint = new Point(canvasPoint.getX(), canvasPoint.getY());
-            Point canvasCenterPoint_shadow = new Point(canvasPoint.getX() + 1, canvasPoint.getY() + 1);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint_shadow, txtString, Color.BLACK);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint, txtString, fontColor);
-        }
-    }
-
-    protected void renderSteroidsTextLocation(Graphics2D graphics, String txtString, int fontSize, int fontStyle, Color fontColor, Point canvasPoint) {
-        graphics.setFont(new Font(FontManager.getRunescapeSmallFont().toString(), fontStyle, fontSize));
-        if (canvasPoint != null) {
-            Point canvasCenterPoint = new Point(canvasPoint.getX(), canvasPoint.getY());
-            Point canvasCenterPointShadow = new Point(canvasPoint.getX() + 1, canvasPoint.getY() + 1);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPointShadow, txtString, Color.BLACK);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint, txtString, fontColor);
-        }
-    }
-
-    protected void renderResizeTextLocation(Graphics2D graphics, String txtString, int fontSize, int fontStyle, Color fontColor, Point canvasPoint) {
-        if (config.resizeFont()) {
-            graphics.setFont(new Font(FontManager.getRunescapeSmallFont().toString(), config.fontWeight().getFont(), config.tobFontSize()));
-        } else {
-            graphics.setFont(new Font(FontManager.getRunescapeSmallFont().toString(), fontStyle, fontSize));
-        }
-        if (canvasPoint != null) {
-            Point canvasCenterPoint = new Point(canvasPoint.getX(), canvasPoint.getY());
-            Point canvasCenterPointShadow = new Point(canvasPoint.getX() + 1, canvasPoint.getY() + 1);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPointShadow, txtString, Color.BLACK);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint, txtString, fontColor);
-        }
-    }
-
-    protected void renderPoly(Graphics2D graphics, Color color, Polygon polygon) {
-        this.renderPoly(graphics, color, polygon, 2);
-    }
-
-    protected void renderPoly(Graphics2D graphics, Color color, Polygon polygon, double width) {
-        if (polygon != null) {
-            graphics.setColor(color);
-            graphics.setStroke(new BasicStroke((float)width));
-            graphics.draw(polygon);
-        }
-    }
-
-    protected void renderNpcPoly(Graphics2D graphics, Color color, Polygon polygon, double width, int alpha) {
-        if (polygon != null) {
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha));
-            graphics.setStroke(new BasicStroke((float)width));
-            graphics.draw(polygon);
-        }
-    }
-
-    /**
-     * Returns a polygon representing an area.
-     *
-     * @param client the game client
-     * @param localLocation the center location of the AoE
-     * @param size the size of the area (ie. 3x3 AoE evaluates to size 3)
-     * @return a polygon representing the tiles in the area
-     */
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size)
-    {
-        return getCanvasTileAreaPoly(client, localLocation, size,0,  true);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, int borderOffset)
-    {
-        return getCanvasTileAreaPoly(client, localLocation, size,borderOffset,  true);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, boolean centered)
-    {
-        return getCanvasTileAreaPoly(client, localLocation, size,0,  centered);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, int borderOffset, boolean centered) {
-        int plane = client.getPlane();
-        int swX;
-        int swY;
-        int neX;
-        int neY;
-        if (centered) {
-            swX = localLocation.getX() - size * (128 + borderOffset) / 2;
-            swY = localLocation.getY() - size * (128 + borderOffset) / 2;
-            neX = localLocation.getX() + size * (128 + borderOffset) / 2;
-            neY = localLocation.getY() + size * (128 + borderOffset) / 2;
-        } else {
-            swX = localLocation.getX() - (128 + borderOffset) / 2;
-            swY = localLocation.getY() - (128 + borderOffset) / 2;
-            neX = localLocation.getX() - (128 + borderOffset) / 2 + size * (128 + borderOffset);
-            neY = localLocation.getY() - (128 + borderOffset) / 2 + size * (128 + borderOffset);
-        }
-
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX >= 0 && sceneY >= 0 && sceneX < 104 && sceneY < 104) {
-            int tilePlane = plane;
-            if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 2) == 2) {
-                tilePlane = plane + 1;
-            }
-
-            int swHeight = getHeight(client, swX, swY, tilePlane);
-            int nwHeight = getHeight(client, neX, swY, tilePlane);
-            int neHeight = getHeight(client, neX, neY, tilePlane);
-            int seHeight = getHeight(client, swX, neY, tilePlane);
-            Point p1 = Perspective.localToCanvas(client, swX, swY, swHeight);
-            Point p2 = Perspective.localToCanvas(client, neX, swY, nwHeight);
-            Point p3 = Perspective.localToCanvas(client, neX, neY, neHeight);
-            Point p4 = Perspective.localToCanvas(client, swX, neY, seHeight);
-            if (p1 != null && p2 != null && p3 != null && p4 != null) {
-                Polygon poly = new Polygon();
-                poly.addPoint(p1.getX(), p1.getY());
-                poly.addPoint(p2.getX(), p2.getY());
-                poly.addPoint(p3.getX(), p3.getY());
-                poly.addPoint(p4.getX(), p4.getY());
-                return poly;
-            } else {
-                return null;
-            }
-        } else {
-            return null;
-        }
-    }
-
-    private static int getHeight(@Nonnull Client client, int localX, int localY, int plane) {
-        int sceneX = localX >> 7;
-        int sceneY = localY >> 7;
-        if (sceneX >= 0 && sceneY >= 0 && sceneX < 104 && sceneY < 104) {
-            int[][][] tileHeights = client.getTileHeights();
-            int x = localX & 127;
-            int y = localY & 127;
-            int var8 = x * tileHeights[plane][sceneX + 1][sceneY] + (128 - x) * tileHeights[plane][sceneX][sceneY] >> 7;
-            int var9 = tileHeights[plane][sceneX][sceneY + 1] * (128 - x) + x * tileHeights[plane][sceneX + 1][sceneY + 1] >> 7;
-            return (128 - y) * var8 + y * var9 >> 7;
-        } else {
-            return 0;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstonePlugin.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstonePlugin.java b/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstonePlugin.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstonePlugin.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,252 +0,0 @@
-/*
- * Copyright (c) 2019, jkybtw <https://github.com/jkybtw>
- * Copyright (c) 2019, openosrs <https://openosrs.com>
- * Copyright (c) 2019, kyle <https://github.com/Kyleeld>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package net.runelite.client.plugins.ocsand;
-
-import java.util.*;
-import javax.inject.Inject;
-
-import com.example.EthanApiPlugin.Collections.TileObjects;
-import com.example.EthanApiPlugin.EthanApiPlugin;
-import com.google.inject.Provides;
-import lombok.extern.slf4j.Slf4j;
-import net.runelite.api.*;
-import net.runelite.api.coords.WorldArea;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.ClientTick;
-import net.runelite.api.events.MenuOptionClicked;
-import net.runelite.api.widgets.Widget;
-import net.runelite.api.widgets.WidgetInfo;
-import net.runelite.client.config.ConfigManager;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.plugins.Plugin;
-import net.runelite.client.plugins.PluginDescriptor;
-
-
-@PluginDescriptor(
-        name = "One Click Sandstone",
-        enabledByDefault = false,
-        description = "Mines Sand, deposits into grinder and casts humidify if needed. Hardcoded to consume clicks with rune pickaxe or dragon pickaxe. credit TP")
-@Slf4j
-public class OneClickSandstonePlugin extends Plugin {
-
-    @Inject
-    private Client client;
-
-    @Inject
-    private OneClickSandstoneConfig config;
-
-    private MenuEntry menuEntry;
-
-
-    @Provides
-    OneClickSandstoneConfig getConfig(ConfigManager configManager)
-    {
-        return configManager.getConfig(OneClickSandstoneConfig.class);
-    }
-
-    @Subscribe
-    public void onMenuOptionClicked(MenuOptionClicked event) {
-        if (event.getMenuOption().equals("<col=00ff00>One Click Sandstone")) {
-            menuEntry = event.getMenuEntry();
-            handleClick(menuEntry);
-            EthanApiPlugin.invoke(menuEntry.getParam0(), menuEntry.getParam1(), menuEntry.getType().getId(), menuEntry.getIdentifier(), menuEntry.getItemId(), menuEntry.getOption(), menuEntry.getTarget(), 0, 0);
-            event.consume();
-        }
-
-    }
-
-    @Subscribe
-    private void onClientTick(ClientTick event) {
-        if (this.client.getLocalPlayer() == null || this.client.getGameState() != GameState.LOGGED_IN)
-            return;
-
-        String text = "<col=00ff00>One Click Sandstone";
-        MenuEntry[] list = client.getMenuEntries();
-
-        if(list.length == 1){
-            MenuEntry newest = list[0];
-            newest.setTarget(text);
-            newest.setOption(text);
-            newest.setIdentifier(MenuAction.UNKNOWN.getId());
-            list[0] = newest;
-        }
-        else {
-            MenuEntry newest = list[1];
-            newest.setTarget(text);
-            newest.setOption(text);
-            newest.setIdentifier(MenuAction.UNKNOWN.getId());
-            list[1] = newest;
-        }
-        client.setMenuEntries(list);
-
-    }
-
-    private void handleClick(MenuEntry event) {
-        if (getEmptySlots() == 0)
-        {
-            setMenuEntry(depositGrinderMenuEntry());
-            return;
-        }
-
-        if (shouldCastHumidify())
-        {
-            setMenuEntry(createHumidifyMenuEntry());
-            return;
-        }
-        setMenuEntry(mineSandStone());
-
-    }
-
-    private void setMenuEntry(MenuEntry entry)
-    {
-        entry.setOption(entry.getOption());
-        entry.setTarget(entry.getTarget());
-        entry.setIdentifier(entry.getIdentifier());
-        entry.setIdentifier(entry.getType().getId());
-        entry.setParam0(entry.getParam0());
-        entry.setParam1(entry.getParam1());
-    }
-
-    private Point getLocation(TileObject tileObject) {
-        if (tileObject instanceof GameObject)
-            return ((GameObject)tileObject).getSceneMinLocation();
-        return new Point(tileObject.getLocalLocation().getSceneX(), tileObject.getLocalLocation().getSceneY());
-    }
-
-    private TileObject checkforGameObject() {
-        WorldPoint SW = new WorldPoint(3164,2913,0);
-        WorldPoint NE = new WorldPoint(3168,2916,0);
-        WorldArea AREA = new WorldArea(SW,5,3);
-        if (config.forceMineNorth())
-        {
-
-            List<TileObject> list = TileObjects.search().withId(11386).result();
-            for (TileObject item:list)
-            {
-                if (item.getWorldLocation().isInArea(AREA))
-                {
-                    return (item);
-                }
-            }
-        }
-        return TileObjects.search().withId(11386).nearestToPlayer().get();
-    }
-
-
-    private TileObject checkForDepositGrinder() {
-        return TileObjects.search().withId(26199).nearestToPlayer().get();
-    }
-
-    private int getEmptySlots() {
-        Widget inventory = client.getWidget(WidgetInfo.INVENTORY.getId());
-        Widget bankInventory = client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getId());
-
-        if (inventory!=null && !inventory.isHidden()
-                && inventory.getDynamicChildren()!=null)
-        {
-            List<Widget> inventoryItems = Arrays.asList(client.getWidget(WidgetInfo.INVENTORY.getId()).getDynamicChildren());
-            return (int) inventoryItems.stream().filter(item -> item.getItemId() == 6512).count();
-        }
-
-        if (bankInventory!=null && !bankInventory.isHidden()
-                && bankInventory.getDynamicChildren()!=null)
-        {
-            List<Widget> inventoryItems = Arrays.asList(client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getId()).getDynamicChildren());
-            return (int) inventoryItems.stream().filter(item -> item.getItemId() == 6512).count();
-        }
-        return -1;
-    }
-
-    private MenuEntry mineSandStone() {
-        TileObject customGameObject = checkforGameObject();
-        return createMenuEntry(
-                11386,
-                MenuAction.GAME_OBJECT_FIRST_OPTION,
-                getLocation(customGameObject).getX(),
-                getLocation(customGameObject).getY(),
-                true);
-    }
-
-    private MenuEntry createHumidifyMenuEntry() {
-        return createMenuEntry(
-                1,
-                MenuAction.CC_OP,
-                -1,
-                1,//WidgetInfo.SPELL_HUMIDIFY.getId(), TODO FIX MEE
-                true);
-    }
-
-    private MenuEntry depositGrinderMenuEntry() {
-        return createMenuEntry(
-                26199,
-                MenuAction.GAME_OBJECT_FIRST_OPTION,
-                getLocation(checkForDepositGrinder()).getX(),
-                getLocation(checkForDepositGrinder()).getY(),true);
-    }
-
-    private boolean shouldCastHumidify() {
-        if (!config.humidify()) return false;
-        Set<Integer> waterskins = Set.of(ItemID.WATERSKIN4,ItemID.WATERSKIN3,ItemID.WATERSKIN2,ItemID.WATERSKIN1);
-        for (Integer waterskin : waterskins)
-        {
-            if (getInventoryItem(waterskin)!=null)
-            {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private Widget getInventoryItem(int id) {
-        Widget inventoryWidget = client.getWidget(WidgetInfo.INVENTORY);
-        Widget bankInventoryWidget = client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
-        if (inventoryWidget!=null && !inventoryWidget.isHidden())
-        {
-            return getWidgetItem(inventoryWidget,id);
-        }
-        if (bankInventoryWidget!=null && !bankInventoryWidget.isHidden())
-        {
-            return getWidgetItem(bankInventoryWidget,id);
-        }
-        return null;
-    }
-
-    private Widget getWidgetItem(Widget widget,int id) {
-        for (Widget item : widget.getDynamicChildren())
-        {
-            if (item.getItemId() == id)
-            {
-                return item;
-            }
-        }
-        return null;
-    }
-
-    public MenuEntry createMenuEntry(int identifier, MenuAction type, int param0, int param1, boolean forceLeftClick) {
-        return client.createMenuEntry(0).setOption("").setTarget("").setIdentifier(identifier).setType(type)
-                .setParam0(param0).setParam1(param1).setForceLeftClick(forceLeftClick);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,213 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Xarpus;
-
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayLayer;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.PanelComponent;
-import org.apache.commons.lang3.tuple.Pair;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.inject.Inject;
-import java.awt.*;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Objects;
-
-public class XarpusOverlay extends RoomOverlay {
-    @Inject
-    private Xarpus xarpus;
-
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    PanelComponent panelComponent = new PanelComponent();
-
-    @Inject
-    protected XarpusOverlay(SpoonTobConfig config) {
-        super(config);
-        this.setPosition(OverlayPosition.DYNAMIC);
-        this.setPriority(OverlayPriority.HIGH);
-        setLayer(OverlayLayer.ABOVE_SCENE);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (config.entryInstanceTimer() == SpoonTobConfig.instancerTimerMode.OVERHEAD && xarpus.isInstanceTimerRunning() && !xarpus.isExhumedSpawned()
-                && xarpus.isInXarpusRegion()) {
-            Player player = client.getLocalPlayer();
-            if (player != null) {
-                Point point = player.getCanvasTextLocation(graphics, "#", player.getLogicalHeight() + 60);
-                if (point != null) {
-                    renderTextLocation(graphics, String.valueOf(xarpus.getInstanceTimer()), Color.CYAN, point);
-                }
-            }
-        }
-
-        if (xarpus.isXarpusActive()) {
-            NPC boss = xarpus.getXarpusNPC();
-            boolean showp2 = config.xarpusTicks() && Xarpus.P2_IDS.contains(boss.getId());
-            boolean p3exception = xarpus.isHM() && xarpus.isXarpusStare() && xarpus.isP3Active();
-            boolean showp3 = config.xarpusTicks() && Xarpus.P3_IDS.contains(boss.getId()) && !p3exception;
-            if (showp2 || showp3) {
-                int tick = xarpus.getXarpusTicksUntilAttack();
-                String ticksLeftStr = String.valueOf(tick);
-                Point canvasPoint = boss.getCanvasTextLocation(graphics, ticksLeftStr, 130);
-                if (config.fontStyle()) {
-                    renderTextLocation(graphics, ticksLeftStr, Color.WHITE, canvasPoint);
-                } else {
-                    renderResizeTextLocation(graphics, ticksLeftStr, 14, Font.BOLD, Color.WHITE, canvasPoint);
-                }
-            }
-
-            if (Xarpus.P1_IDS.contains(boss.getId())) {
-                if (!xarpus.getXarpusExhumeds().isEmpty()) {
-                    Collection<Pair<GroundObject, Integer>> exhumeds = xarpus.getXarpusExhumeds().values();
-                    exhumeds.forEach((p) -> {
-                        GroundObject o = p.getLeft();
-                        int ticks = p.getRight();
-                        String text = String.valueOf(ticks);
-                        int maxSafeTicks = 8;
-                        int minSafeTicks = 1;
-                        if (xarpus.isHM()) {
-                            maxSafeTicks = 6;
-                        }
-
-                        if (config.xarpusExhumed() == SpoonTobConfig.exhumedMode.TILE || config.xarpusExhumed() == SpoonTobConfig.exhumedMode.BOTH) {
-                            Polygon poly = o.getCanvasTilePoly();
-                            if (poly != null) {
-                                Color color = new Color(0, 255, 0, 130);
-                                if (config.exhumedStepOffWarning() == SpoonTobConfig.stepOffMode.TILE || config.exhumedStepOffWarning() == SpoonTobConfig.stepOffMode.BOTH) {
-                                    if (ticks <= minSafeTicks || ticks >= maxSafeTicks) {
-                                        color = new Color(0, 255, 0, 130);
-                                    } else {
-                                        color = new Color(255, 0, 0, 130);
-                                    }
-                                }
-                                graphics.setColor(color);
-                                graphics.setStroke(new BasicStroke(1));
-                                graphics.draw(poly);
-                            }
-                        }
-
-                        if (config.xarpusExhumed() == SpoonTobConfig.exhumedMode.BOTH || config.xarpusExhumed() == SpoonTobConfig.exhumedMode.TICKS) {
-
-                            Point textLocation = o.getCanvasTextLocation(graphics, text, 0);
-                            if (textLocation != null) {
-                                Color color = Color.WHITE;
-
-                                if (config.exhumedStepOffWarning() == SpoonTobConfig.stepOffMode.TICKS || config.exhumedStepOffWarning() == SpoonTobConfig.stepOffMode.BOTH) {
-                                    color = Color.RED;
-                                    if (ticks <= minSafeTicks || ticks >= maxSafeTicks) {
-                                        color = Color.GREEN;
-                                    }
-                                }
-
-                                if (config.fontStyle()) {
-                                    renderTextLocation(graphics, text, color, textLocation);
-                                } else {
-                                    renderResizeTextLocation(graphics, text, 12, Font.BOLD, color, textLocation);
-                                }
-                            }
-                        }
-                    });
-                }
-            }
-
-
-            if (config.xarpusLos() != SpoonTobConfig.losMode.OFF) {
-                renderLineOfSightPolygon(graphics);
-            }
-
-            if (config.exhumedOnXarpus() && xarpus.isExhumedSpawned() && Xarpus.P1_IDS.contains(xarpus.getXarpusNPC().getId()) && xarpus.getExhumedCounter() != null) {
-                String xarpusText = (xarpus.getExhumedCounter().getCount() == 0) ? "NOW!" : (String.valueOf(xarpus.getExhumedCounter().getCount()));
-                if (xarpusText.length() >= 1) {
-                    Point canvasPoint = xarpus.getXarpusNPC().getCanvasTextLocation(graphics, xarpusText, 320);
-
-                    if (canvasPoint != null && !xarpus.getXarpusNPC().isDead()) {
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, xarpusText, Color.ORANGE, canvasPoint);
-                        } else {
-                            renderResizeTextLocation(graphics, xarpusText, 14, Font.BOLD, Color.ORANGE, canvasPoint);
-                        }
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    public void renderLineOfSightPolygon(Graphics2D graphics) {
-        NPC xarpusNpc = xarpus.getXarpusNPC();
-        if (!xarpusNpc.isDead() && Xarpus.P2_IDS.contains(xarpusNpc.getId()) && xarpus.xarpusStare) {
-            Direction dir = Direction.getPreciseDirection(xarpusNpc.getOrientation());
-            if (dir != null) {
-                WorldPoint wp = WorldPoint.fromLocal(client, xarpusNpc.getLocalLocation());
-                boolean mt = config.xarpusLos() == SpoonTobConfig.losMode.MELEE;
-                Point[] points;
-                switch(dir) {
-                    case NORTHEAST:
-                        points = mt ? LineOfSight.NE_MELEE.getFunc().apply(wp) : LineOfSight.NE_BOX.getFunc().apply(wp);
-                        break;
-                    case NORTHWEST:
-                        points = mt ? LineOfSight.NW_MELEE.getFunc().apply(wp) : LineOfSight.NW_BOX.getFunc().apply(wp);
-                        break;
-                    case SOUTHEAST:
-                        points = mt ? LineOfSight.SE_MELEE.getFunc().apply(wp) : LineOfSight.SE_BOX.getFunc().apply(wp);
-                        break;
-                    case SOUTHWEST:
-                        points = mt ? LineOfSight.SW_MELEE.getFunc().apply(wp) : LineOfSight.SW_BOX.getFunc().apply(wp);
-                        break;
-                    default:
-                        return;
-                }
-
-                Polygon poly = new Polygon();
-                Arrays.stream(points, 0, points.length).map((worldPoint) -> {
-                    LocalPoint lp = LocalPoint.fromWorld(client, worldPoint.getX(), worldPoint.getY());
-                    int x = lp.getX();
-                    int y = lp.getY();
-                    switch(dir) {
-                        case NORTHEAST:
-                            return Perspective.localToCanvas(client, new LocalPoint(x - 64, y - 64), client.getPlane());
-                        case NORTHWEST:
-                            return Perspective.localToCanvas(client, new LocalPoint(x + 64, y - 64), client.getPlane());
-                        case SOUTHEAST:
-                            return Perspective.localToCanvas(client, new LocalPoint(x - 64, y + 64), client.getPlane());
-                        case SOUTHWEST:
-                            return Perspective.localToCanvas(client, new LocalPoint(x + 64, y + 64), client.getPlane());
-                        default:
-                            return null;
-                    }
-                }).filter(Objects::nonNull).forEach((localToCanvas) -> {
-                    poly.addPoint(localToCanvas.getX(), localToCanvas.getY());
-                });
-
-                Color color;
-                if(config.raveLos()) {
-                    color = plugin.raveUtils.getColor(poly.hashCode(), true);
-                    renderXarpusPolygon(graphics, poly, color);
-                } else {
-                    renderXarpusPolygon(graphics, poly, config.xarpusLosColor());
-                }
-            }
-        }
-    }
-
-    protected void renderXarpusPolygon(Graphics2D graphics, @Nullable Shape polygon, @Nonnull Color color) {
-        if (polygon != null) {
-            graphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), config.xarpusLosColor().getAlpha()));
-            graphics.setStroke(new BasicStroke(2));
-            graphics.draw(polygon);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), config.xarpusLosFill()));
-            graphics.fill(polygon);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/LineOfSight.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/LineOfSight.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/LineOfSight.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/LineOfSight.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,27 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Xarpus;
-
-import net.runelite.api.Point;
-import net.runelite.api.coords.WorldPoint;
-
-import java.util.function.Function;
-
-public enum LineOfSight {
-    NE_BOX((xarpus) -> new Point[]{new Point(xarpus.getX(), xarpus.getY()), new Point(xarpus.getX(), xarpus.getY() + 8), new Point(xarpus.getX() + 8, xarpus.getY() + 8), new Point(xarpus.getX() + 8, xarpus.getY())}),
-    NW_BOX((xarpus) -> new Point[]{new Point(xarpus.getX() - 8, xarpus.getY()), new Point(xarpus.getX() - 8, xarpus.getY() + 8), new Point(xarpus.getX(), xarpus.getY() + 8), new Point(xarpus.getX(), xarpus.getY())}),
-    SE_BOX((xarpus) -> new Point[]{new Point(xarpus.getX(), xarpus.getY() - 8), new Point(xarpus.getX(), xarpus.getY()), new Point(xarpus.getX() + 8, xarpus.getY()), new Point(xarpus.getX() + 8, xarpus.getY() - 8)}),
-    SW_BOX((xarpus) -> new Point[]{new Point(xarpus.getX() - 8, xarpus.getY() - 8), new Point(xarpus.getX() - 8, xarpus.getY()), new Point(xarpus.getX(), xarpus.getY()), new Point(xarpus.getX(), xarpus.getY() - 8)}),
-    NE_MELEE((xarpus) -> new Point[]{new Point(xarpus.getX() + 4, xarpus.getY() + 4), new Point(xarpus.getX(), xarpus.getY() + 4), new Point(xarpus.getX(), xarpus.getY() + 3), new Point(xarpus.getX() + 3, xarpus.getY() + 3), new Point(xarpus.getX() + 3, xarpus.getY()), new Point(xarpus.getX() + 4, xarpus.getY())}),
-    NW_MELEE((xarpus) -> new Point[]{new Point(xarpus.getX() - 4, xarpus.getY() + 4), new Point(xarpus.getX() - 4, xarpus.getY()), new Point(xarpus.getX() - 3, xarpus.getY()), new Point(xarpus.getX() - 3, xarpus.getY() + 3), new Point(xarpus.getX(), xarpus.getY() + 3), new Point(xarpus.getX(), xarpus.getY() + 4)}),
-    SE_MELEE((xarpus) -> new Point[]{new Point(xarpus.getX() + 4, xarpus.getY() - 4), new Point(xarpus.getX() + 4, xarpus.getY()), new Point(xarpus.getX() + 3, xarpus.getY()), new Point(xarpus.getX() + 3, xarpus.getY() - 3), new Point(xarpus.getX(), xarpus.getY() - 3), new Point(xarpus.getX(), xarpus.getY() - 4)}),
-    SW_MELEE((xarpus) -> new Point[]{new Point(xarpus.getX() - 4, xarpus.getY() - 4), new Point(xarpus.getX(), xarpus.getY() - 4), new Point(xarpus.getX(), xarpus.getY() - 3), new Point(xarpus.getX() - 3, xarpus.getY() - 3), new Point(xarpus.getX() - 3, xarpus.getY()), new Point(xarpus.getX() - 4, xarpus.getY())});
-
-    private final Function<WorldPoint, Point[]> func;
-
-    LineOfSight(Function<WorldPoint, Point[]> func) {
-        this.func = func;
-    }
-
-    public Function<WorldPoint, Point[]> getFunc() {
-        return this.func;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPlugin.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPlugin.java b/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPlugin.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPlugin.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,474 +0,0 @@
-package net.runelite.client.plugins.LavaRunecrafter;
-
-import com.example.EthanApiPlugin.Collections.TileObjects;
-import com.example.EthanApiPlugin.Collections.Widgets;
-import com.example.EthanApiPlugin.EthanApiPlugin;
-import com.example.PacketUtils.PacketUtilsPlugin;
-import com.example.PacketUtils.WidgetInfoExtended;
-import com.example.Packets.MousePackets;
-import com.example.Packets.ObjectPackets;
-import com.example.Packets.WidgetPackets;
-import com.google.inject.Inject;
-import com.google.inject.Provides;
-import lombok.SneakyThrows;
-
-import net.runelite.api.*;
-import net.runelite.api.events.*;
-import net.runelite.api.widgets.Widget;
-import net.runelite.api.widgets.WidgetInfo;
-import net.runelite.client.config.ConfigManager;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.plugins.Plugin;
-import net.runelite.client.plugins.PluginDependency;
-import net.runelite.client.plugins.PluginDescriptor;
-import net.runelite.client.plugins.PluginManager;
-
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-
-@PluginDescriptor(
-        name = "<html><font color=#86C43F>[RB]</font> Lava Runecrafter</html>",
-        description = "",
-        enabledByDefault = false,
-        tags = {"ethan"}
-)
-public class LavaRunecrafterPlugin extends Plugin {
-    public int timeout = 0;
-    public int bindingCharges = -1;
-    @Inject
-    Client client;
-    @Inject
-    PluginManager pluginManager;
-    Boolean hadbook = null;
-    HashMap<Widget, int[]> pouches = new HashMap<>();
-    @Inject
-    LavaRunecrafterPluginConfig config;
-
-
-    @Provides
-    public LavaRunecrafterPluginConfig getConfig(ConfigManager configManager) {
-        return configManager.getConfig(LavaRunecrafterPluginConfig.class);
-    }
-
-    @Override
-    @SneakyThrows
-    public void startUp() {
-        timeout = 0;
-        pouches = new HashMap<>();
-    }
-
-    @Override
-    public void shutDown() {
-        timeout = 0;
-        pouches = new HashMap<>();
-    }
-
-
-    @Subscribe
-    protected void onStatChanged(StatChanged event) {
-        if (event.getSkill() == Skill.RUNECRAFT) {
-            if (bindingCharges == -1 || bindingCharges == 0) {
-                return;
-            }
-            bindingCharges--;
-        }
-    }
-
-    @Subscribe
-    @SneakyThrows
-    public void onGameTick(GameTick event) {
-        if (hadbook != null) {
-            if (!Widgets.search().withTextContains("What do you want?").hiddenState(false).empty() || !Widgets.search().withTextContains("Can you repair").hiddenState(false).empty()) {
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueResumePause(15138821, -1);
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueResumePause(14352385, hadbook ? 1 : 2);
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueResumePause(14221317, -1);
-                MousePackets.queueClickPacket();
-                EthanApiPlugin.invoke(-1, -1, 26, -1, -1, "", "", -1, -1);
-                timeout = 0;
-                return;
-            }
-        }
-        if (timeout > 0) {
-            timeout--;
-            return;
-        }
-        if (client.getGameState() != GameState.LOGGED_IN) {
-            return;
-        }
-        if (pouchesDegraded() && EthanApiPlugin.isMoving()) {
-            //System.out.println("contacting old fuck");
-            MousePackets.queueClickPacket();
-            WidgetPackets.queueWidgetActionPacket(2, WidgetInfoExtended.SPELL_NPC_CONTACT.getPackedId(),
-                    -1, -1);
-            timeout = 15;
-            return;
-        }
-        TileObject bankChest = TileObjects.search().nameContains("Bank").first().get();
-        Item binding = null;
-        if (bankChest != null) {
-            if (client.getWidget(WidgetInfo.BANK_CONTAINER) == null) {
-                try {
-                    binding = client.getItemContainer(InventoryID.EQUIPMENT).getItem(EquipmentInventorySlot.AMULET.getSlotIdx());
-                } catch (NullPointerException ex) {
-                    //todo
-                }
-                if (binding != null && binding.getId() == ItemID.BINDING_NECKLACE) {
-                    if (bindingCharges == -1) {
-                        //System.out.println("checking binding");
-                        MousePackets.queueClickPacket();
-                        WidgetPackets.queueWidgetActionPacket(2, 25362449, -1, -1);
-                        return;
-                    }
-                    if (bindingCharges == 1) {
-                        //System.out.println("breaking binding");
-                        MousePackets.queueClickPacket();
-                        WidgetPackets.queueWidgetActionPacket(1, 25362449, -1, -1);
-                        int space = EthanApiPlugin.getFirstFreeSlot(WidgetInfo.INVENTORY);
-                        MousePackets.queueClickPacket();
-                        WidgetPackets.queueWidgetActionPacket(7, 9764864, ItemID.BINDING_NECKLACE, space);
-                        MousePackets.queueClickPacket();
-                        WidgetPackets.queueResumePause(38273024, 1);
-                        bindingCharges = 16;
-                        return;
-                    }
-                }
-                if (EthanApiPlugin.isMoving()) {
-                    return;
-                }
-                //System.out.println("using bank chest");
-                MousePackets.queueClickPacket();
-                ObjectPackets.queueObjectAction(bankChest, false, "Use");
-                timeout = 1;
-                return;
-            }
-            //System.out.println("doing item operations");
-            try {
-                binding = client.getItemContainer(InventoryID.EQUIPMENT).getItem(EquipmentInventorySlot.AMULET.getSlotIdx());
-            } catch (NullPointerException ex) {
-                //todo
-            }
-            if (binding == null) {
-                //System.out.println("new binding");
-                int freeSlot = EthanApiPlugin.getFirstFreeSlot(WidgetInfo.INVENTORY);
-                Widget bindingNeck = EthanApiPlugin.getItem(ItemID.BINDING_NECKLACE, WidgetInfo.BANK_ITEM_CONTAINER);
-                if (bindingNeck == null) {
-                    EthanApiPlugin.stopPlugin(this);
-                    client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Out of binding necklaces",
-                            "LavaRunecrafterPlugin");
-                }
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueWidgetAction(bindingNeck, "Withdraw-1");
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueWidgetActionPacket(9, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getPackedId(), ItemID.BINDING_NECKLACE, freeSlot);
-                bindingCharges = bindingCharges == -1 ? bindingCharges : 16;
-            }
-            if (EthanApiPlugin.getItem(ItemID.EARTH_RUNE, WidgetInfo.INVENTORY) == null) {
-                EthanApiPlugin.stopPlugin(this);
-                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Out of earth runes", "LavaRunecrafterPlugin");
-            }
-            handleStamina();
-            handleDueling();
-            handlePouches();
-            if (!pluginManager.isPluginEnabled(this)) {
-                return;
-            }
-            //System.out.println("teleporting");
-            switch (config.TeleMethod()) {
-                case RING_OF_ELEMENTS:
-                    Widget ring = EthanApiPlugin.getItem(ItemID.RING_OF_THE_ELEMENTS_26818, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
-                    if (ring == null) {
-                        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "ring of the elements tele enabled but" +
-                                        " ring not found",
-                                "LavaRunecrafterPlugin");
-                        EthanApiPlugin.stopPlugin(this);
-                        return;
-                    }
-                    //System.out.println("ring teleport");
-                    MousePackets.queueClickPacket();
-                    WidgetPackets.queueWidgetActionPacket(6, 9764864, ItemID.RING_OF_THE_ELEMENTS_26818, ring.getIndex());
-                    break;
-                case RING_OF_DUELING:
-                    MousePackets.queueClickPacket();
-                    WidgetPackets.queueWidgetActionPacket(2, 25362456, -1, -1);
-            }
-            timeout = 5;
-            return;
-        }
-        TileObject ruins = EthanApiPlugin.findObject(34817);
-        if (ruins != null) {
-            if (EthanApiPlugin.isMoving()) {
-                return;
-            }
-            //System.out.println("entering ruins");
-            timeout = 1;
-            MousePackets.queueClickPacket();
-            ObjectPackets.queueObjectAction(1, 34817, 3312, 3254, false);
-            return;
-        }
-        TileObject altar = EthanApiPlugin.findObject("Altar");
-        Widget earthRunes = EthanApiPlugin.getItem(ItemID.EARTH_RUNE, WidgetInfo.INVENTORY);
-        if (altar != null && earthRunes != null) {
-            if (EthanApiPlugin.isMoving() && client.getLocalPlayer().getAnimation() != 791) {
-                return;
-            }
-            //System.out.println(client.getVarbitValue(Varbits.MAGIC_IMBUE));
-            if (getEssenceSlots(WidgetInfo.INVENTORY) > 0 && client.getVarbitValue(Varbits.MAGIC_IMBUE) == 0) {
-                //System.out.println("using spell");
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueWidgetActionPacket(1, 14286973, -1, -1);
-                //System.out.println("initial craft");
-                MousePackets.queueClickPacket();
-                ObjectPackets.queueWidgetOnTileObject(earthRunes, altar);
-                //objectPackets.queueObjectAction(altar, false, "Craft-rune");
-                return;
-            }
-            int essenceInPouches = essenceInPouches();
-            if (essenceInPouches > 0) {
-                if (EthanApiPlugin.getFirstFreeSlot(WidgetInfo.INVENTORY) != -1) {
-                    //System.out.println(client.getTickCount() + ": withdrawing essence");
-                    handleWithdraw();
-                    MousePackets.queueClickPacket();
-                    ObjectPackets.queueWidgetOnTileObject(earthRunes, altar);
-                    //objectPackets.queueObjectAction(altar, false, "Craft-rune");
-                    return;
-                } else {
-                    //System.out.println("weird shit");
-                }
-            }
-            MousePackets.queueClickPacket();
-            WidgetPackets.queueWidgetActionPacket(3, 25362456, -1, -1);
-            timeout = 3;
-            //System.out.println("Teleporting to bank");
-        }
-    }
-
-    public boolean pouchesDegraded() {
-        return EthanApiPlugin.getItemFromList(new int[]{ItemID.MEDIUM_POUCH_5511, ItemID.LARGE_POUCH_5513, ItemID.GIANT_POUCH_5515,
-                ItemID.COLOSSAL_POUCH_26786}, WidgetInfo.INVENTORY) != null;
-    }
-
-    public void handleDueling() {
-        Widget dueling = EthanApiPlugin.getItemFromList(new int[]{ItemID.RING_OF_DUELING1, ItemID.RING_OF_DUELING2,
-                ItemID.RING_OF_DUELING3, ItemID.RING_OF_DUELING4, ItemID.RING_OF_DUELING5, ItemID.RING_OF_DUELING6, ItemID.RING_OF_DUELING7, ItemID.RING_OF_DUELING8}, WidgetInfo.BANK_ITEM_CONTAINER);
-        int equippedDueling = EthanApiPlugin.checkIfWearing(new int[]{ItemID.RING_OF_DUELING1, ItemID.RING_OF_DUELING2,
-                ItemID.RING_OF_DUELING3, ItemID.RING_OF_DUELING4, ItemID.RING_OF_DUELING5, ItemID.RING_OF_DUELING6,
-                ItemID.RING_OF_DUELING7, ItemID.RING_OF_DUELING8});
-        if (config.TeleMethod() == TeleportMethods.RING_OF_DUELING) {
-            dueling = EthanApiPlugin.getItemFromList(new int[]{ItemID.RING_OF_DUELING2, ItemID.RING_OF_DUELING4,
-                    ItemID.RING_OF_DUELING6, ItemID.RING_OF_DUELING8}, WidgetInfo.BANK_ITEM_CONTAINER);
-            if (equippedDueling != -1) {
-                if (List.of(ItemID.RING_OF_DUELING2, ItemID.RING_OF_DUELING4,
-                        ItemID.RING_OF_DUELING6, ItemID.RING_OF_DUELING8).contains(equippedDueling)) {
-                    return;
-                }
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueWidgetActionPacket(2, 786517, -1, -1);
-                equippedDueling = -1;
-            }
-        }
-        if (equippedDueling != -1) {
-            return;
-        }
-        int freeSlot = EthanApiPlugin.getFirstFreeSlot(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
-        if (dueling == null) {
-            EthanApiPlugin.stopPlugin(this);
-            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Out of dueling rings", "LavaRunecrafterPlugin");
-        }
-        MousePackets.queueClickPacket();
-        WidgetPackets.queueWidgetAction(dueling, "Withdraw-1");
-        MousePackets.queueClickPacket();
-        WidgetPackets.queueWidgetActionPacket(9, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getPackedId(), dueling.getItemId(), freeSlot);
-    }
-
-    public void handleWithdraw() {
-        int freeSlots = EthanApiPlugin.getEmptySlots(WidgetInfo.INVENTORY);
-        for (Widget pouch : pouches.keySet()) {
-            if (pouches.get(pouch)[0] > 0) {
-                int taken = Math.min(pouches.get(pouch)[0], freeSlots);
-                pouches.put(pouch, new int[]{pouches.get(pouch)[0] - taken, pouches.get(pouch)[1]});
-                freeSlots -= taken;
-                //System.out.println("withdrawing: " + taken);
-                Widget realPouch = EthanApiPlugin.getItem(pouch.getItemId(), WidgetInfo.INVENTORY);
-                if (realPouch == null) {
-                    pouches.put(pouch, new int[]{0, pouches.get(pouch)[1]});
-                    continue;
-                }
-                MousePackets.queueClickPacket();
-                WidgetPackets.queueWidgetAction(realPouch, "Empty");
-            }
-            if (freeSlots == 0) {
-                break;
-            }
-        }
-    }
-
-    public int essenceInPouches() {
-        int sum = 0;
-        for (Widget pouch : pouches.keySet()) {
-            ////System.out.println("pouch: " + pouch.EthanApiPlugin.getItemId() + "      needs: " + (pouches.get(pouch)[1] - pouches
-            // .get(pouch)[0]));
-            sum += pouches.get(pouch)[0];
-        }
-        return sum;
-    }
-
-
-    @Subscribe
-    public void onGameObjectSpawned(GameObjectSpawned e) {
-        if (e.getGameObject().getId() == 34817) {
-            //System.out.println("setting timeout 0");
-            timeout = 0;
-        }
-    }
-
-    public void handleStamina() {
-        int freeSlot = EthanApiPlugin.getFirstFreeSlot(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
-        Widget stamina = EthanApiPlugin.getItem(ItemID.STAMINA_POTION1, WidgetInfo.BANK_ITEM_CONTAINER);
-        if (client.getEnergy() > 8000 || client.getVarbitValue(Varbits.RUN_SLOWED_DEPLETION_ACTIVE) == 1) {
-            //System.out.println("didnt need stamina");
-            return;
-        }
-        if (stamina == null || freeSlot == -1) {
-            EthanApiPlugin.stopPlugin(this);
-            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Out of stamina potions", "LavaRunecrafterPlugin");
-        }
-        //System.out.println("drinking stam");
-        MousePackets.queueClickPacket();
-        WidgetPackets.queueWidgetAction(stamina, "Withdraw-1");
-        MousePackets.queueClickPacket();
-        WidgetPackets.queueWidgetActionPacket(9, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getPackedId(), ItemID.STAMINA_POTION1, freeSlot);
-        if (config.VialSmasher()) {
-            return;
-        }
-        MousePackets.queueClickPacket();
-        WidgetPackets.queueWidgetActionPacket(2, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getPackedId(),
-                ItemID.VIAL, freeSlot);
-    }
-
-    public void handlePouches() {
-        pouches = getPouches();
-        Widget essence = EthanApiPlugin.getItem(ItemID.PURE_ESSENCE, WidgetInfo.BANK_ITEM_CONTAINER);
-        essence = essence == null ? EthanApiPlugin.getItem(ItemID.RUNE_ESSENCE, WidgetInfo.BANK_ITEM_CONTAINER) : essence;
-        if (essence == null) {
-            EthanApiPlugin.stopPlugin(this);
-            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Out of essence", "LavaRunecrafterPlugin");
-        }
-        int essenceSlots =
-                EthanApiPlugin.getEmptySlots(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER) + getEssenceSlots(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
-        while (essenceNeeded() > 0) {
-            ////System.out.println("withdrawing all");
-            MousePackets.queueClickPacket();
-            WidgetPackets.queueWidgetAction(essence, "Withdraw-All");
-            int essenceLeft = essenceSlots;
-            for (Widget pouch : pouches.keySet()) {
-                int[] values = pouches.get(pouch);
-                if (values[0] >= values[1]) {
-                    continue;
-                }
-                int transfered = Math.min(values[1] - values[0], essenceLeft);
-                essenceLeft -= transfered;
-                values[0] += transfered;
-                ////System.out.println("filling pouch: " + pouch.EthanApiPlugin.getItemId() + "      with: " + transfered + "      " +"essence left: " + essenceLeft);
-                if (EthanApiPlugin.getItem(getAlternative(pouch), WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER) != null) {
-                    MousePackets.queueClickPacket();
-                    WidgetPackets.queueWidgetAction(EthanApiPlugin.getItem(getAlternative(pouch), WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER), "Fill");
-                } else {
-                    MousePackets.queueClickPacket();
-                    WidgetPackets.queueWidgetAction(pouch, "Fill");
-                }
-                pouches.put(pouch, values);
-                if (essenceLeft == 0) {
-                    break;
-                }
-            }
-        }
-        Widget lavaRunes = EthanApiPlugin.getItem(ItemID.LAVA_RUNE, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
-        if (lavaRunes != null) {
-            //System.out.println("depositing lava runes");
-            MousePackets.queueClickPacket();
-            WidgetPackets.queueWidgetAction(lavaRunes, "Deposit-All");
-        }
-        MousePackets.queueClickPacket();
-        WidgetPackets.queueWidgetAction(essence, "Withdraw-All");
-    }
-
-    public int getAlternative(Widget pouch) {
-        int alternative = -1;
-        switch (pouch.getItemId()) {
-            case ItemID.MEDIUM_POUCH:
-                alternative = ItemID.MEDIUM_POUCH_5511;
-                break;
-            case ItemID.LARGE_POUCH:
-                alternative = ItemID.LARGE_POUCH_5513;
-                break;
-            case ItemID.GIANT_POUCH:
-                alternative = ItemID.GIANT_POUCH_5515;
-                break;
-            case ItemID.COLOSSAL_POUCH:
-                alternative = ItemID.COLOSSAL_POUCH_26786;
-                break;
-        }
-        return alternative;
-    }
-
-    public int essenceNeeded() {
-        int essenceNeeded = 0;
-        for (Widget pouch : pouches.keySet()) {
-            ////System.out.println("pouch: " + pouch.EthanApiPlugin.getItemId() + "      needs: " + (pouches.get(pouch)[1] - pouches
-            // .get(pouch)[0]));
-            int[] values = pouches.get(pouch);
-            essenceNeeded += values[1] - values[0];
-        }
-        return essenceNeeded;
-    }
-
-    public HashMap<Widget, int[]> getPouches() {
-        pouches.clear();
-        pouches.put(EthanApiPlugin.getItem(ItemID.SMALL_POUCH, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER), new int[]{0, 3});
-        pouches.put(EthanApiPlugin.getItem(ItemID.MEDIUM_POUCH, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER), new int[]{0, 6});
-        pouches.put(EthanApiPlugin.getItem(ItemID.LARGE_POUCH, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER), new int[]{0, 9});
-        pouches.put(EthanApiPlugin.getItem(ItemID.GIANT_POUCH, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER), new int[]{0, 12});
-        pouches.put(EthanApiPlugin.getItem(ItemID.COLOSSAL_POUCH, WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER), new int[]{0, 40});
-        pouches.remove(null);
-        return pouches;
-    }
-
-    public int getEssenceSlots(WidgetInfo widgetInfo) {
-        List<Widget> inventoryItems = Arrays.asList(client.getWidget(widgetInfo.getId()).getDynamicChildren());
-        return (int) inventoryItems.stream().filter(item -> item.getItemId() == ItemID.PURE_ESSENCE || item.getItemId()
-                == ItemID.RUNE_ESSENCE).count();
-    }
-
-
-    @Subscribe
-    public void onChatMessage(ChatMessage e) {
-        if (e == null || e.getMessage() == null || e.getType() != ChatMessageType.GAMEMESSAGE) {
-            return;
-        }
-        if (e.getMessage().contains("disintegrated")) {
-            bindingCharges = 16;
-        }
-        if (e.getMessage().equals("one charge left before your Binding necklace disintegrates.")) {
-            bindingCharges = 1;
-            return;
-        }
-        if (e.getMessage().contains("left before your Binding necklace disintegrates.")) {
-            bindingCharges = Integer.parseInt(e.getMessage().split("You have ")[1].replace(" charges left before your" +
-                    " Binding necklace" +
-                    " disintegrates.", ""));
-        }
-    }
-
-    @Subscribe
-    public void onItemContainerChanged(ItemContainerChanged e) {
-        if (e.getContainerId() == InventoryID.BANK.getId()) {
-            if (e.getItemContainer() != null) {
-                hadbook = e.getItemContainer().contains(ItemID.ABYSSAL_BOOK);
-            }
-        }
-    }
-}
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/GreenBallPanel.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/GreenBallPanel.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/GreenBallPanel.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/GreenBallPanel.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,83 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.Client;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.LineComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class GreenBallPanel extends OverlayPanel {
-    private SpoonTobPlugin plugin;
-
-    private SpoonTobConfig config;
-
-    private Client client;
-
-    private Verzik verzik;
-
-    @Inject
-    public GreenBallPanel(SpoonTobPlugin plugin, SpoonTobConfig config, Client client, Verzik verzik) {
-        super(plugin);
-        this.plugin = plugin;
-        this.config = config;
-        this.client = client;
-        this.verzik = verzik;
-        setPriority(OverlayPriority.HIGH);
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        this.panelComponent.getChildren().clear();
-        if(config.greenBouncePanel() != SpoonTobConfig.greenBouncePanelMode.OFF && this.verzik.isVerzikActive() && this.verzik.getVerzikPhase() == Verzik.Phase.PHASE3 && this.verzik.greenBallOut && verzik.getVerzikNPC() != null) {
-            String leftText = "";
-            String rightText = "";
-            Color rightColor = Color.WHITE;
-            if(config.greenBouncePanel() == SpoonTobConfig.greenBouncePanelMode.BOUNCES){
-                leftText = "Bounces:";
-                rightText = Integer.toString(verzik.greenBallBounces);
-                this.panelComponent.setPreferredSize(new Dimension(95, 24));
-            }else if(config.greenBouncePanel() == SpoonTobConfig.greenBouncePanelMode.DAMAGE){
-                leftText = "Damage:";
-                if(verzik.getVerzikNPC().getId() == 10852){
-                    rightText = Double.toString(99 - ((verzik.greenBallBounces * .25) * 99));
-                }else{
-                    if(verzik.greenBallBounces == 0){
-                        rightText = Integer.toString(74);
-                    }else {
-                        rightText = Double.toString(74 - ((verzik.greenBallBounces * .25) * 74));
-                    }
-                }
-                this.panelComponent.setPreferredSize(new Dimension(90, 24));
-            }else {
-                leftText = "Bounces(Dmg):";
-                if(verzik.getVerzikNPC().getId() == 10852){
-                    rightText = verzik.greenBallBounces + "(" + Math.floor(99 - ((verzik.greenBallBounces * .25) * 99)) + ")";
-                }else{
-                    if(verzik.greenBallBounces == 0){
-                        rightText = verzik.greenBallBounces + "(74)";
-                    }else {
-                        rightText = verzik.greenBallBounces + "(" + Math.floor(74 - ((verzik.greenBallBounces * .25) * 74)) + ")";
-                    }
-                }
-                this.panelComponent.setPreferredSize(new Dimension(130, 24));
-            }
-
-            if(verzik.greenBallBounces == 0 && verzik.getVerzikNPC().getId() == 10852) {
-                rightColor = Color.RED;
-                rightText = "Death";
-            }
-
-            this.panelComponent.getChildren().add(LineComponent.builder()
-                    .left(leftText)
-                    .rightColor(rightColor)
-                    .right(rightText)
-                    .build());
-        }
-        return super.render(graphics);
-    }
-}
Index: src/main/java/net/runelite/client/plugins/ocarial/OneClickAerialFishingPlugin.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/ocarial/OneClickAerialFishingPlugin.java b/src/main/java/net/runelite/client/plugins/ocarial/OneClickAerialFishingPlugin.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/ocarial/OneClickAerialFishingPlugin.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,215 +0,0 @@
-package net.runelite.client.plugins.ocarial;
-
-import com.example.EthanApiPlugin.Collections.NPCs;
-import com.example.EthanApiPlugin.EthanApiPlugin;
-import com.example.Packets.MousePackets;
-import com.google.inject.Inject;
-import net.runelite.api.*;
-import net.runelite.api.events.ClientTick;
-import net.runelite.api.events.MenuOptionClicked;
-
-import net.runelite.api.widgets.Widget;
-import net.runelite.api.widgets.WidgetInfo;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.plugins.Plugin;
-import net.runelite.client.plugins.PluginDescriptor;
-
-import java.util.Arrays;
-import java.util.List;
-
-@PluginDescriptor(
-        name = "One Click Aerial Fishing",
-        description = "Ensure some form of bait is in invent, either worms or fish chunks and a knife. If there's no knife it will just drop the fish.",
-        tags = {"one", "click", "tench", "fishing","aerial","arial"},
-        enabledByDefault = false
-)
-public class OneClickAerialFishingPlugin extends Plugin {
-
-    private static final int TENCH_FISHING_SPOT_NPC_ID = 8523;
-    private static final List<Integer> LIST_OF_FISH_IDS= Arrays.asList(22826, 22829, 22832,22835);
-    private static boolean shouldCut = false;
-
-    @Inject
-    private Client client;
-
-    private MenuEntry menuEntry;
-
-    @Subscribe
-    public void onMenuOptionClicked(MenuOptionClicked event)
-    {
-        if(event.getMenuOption().equals("<col=00ff00>One Click Aerial Fishing"))
-        {
-            menuEntry = event.getMenuEntry();
-            handleClick(menuEntry);
-            if(!menuEntry.getOption().equals("Handled")) {
-                EthanApiPlugin.invoke(menuEntry.getParam0(), menuEntry.getParam1(), menuEntry.getType().getId(), menuEntry.getIdentifier(), menuEntry.getItemId(), menuEntry.getOption(), menuEntry.getTarget(), 0, 0);
-            }
-            event.consume();
-        }
-    }
-
-    @Subscribe
-    private void onClientTick(ClientTick event) {
-        if (this.client.getLocalPlayer() == null || this.client.getGameState() != GameState.LOGGED_IN)
-        {
-            return;
-        }
-        String text = "<col=00ff00>One Click Aerial Fishing";
-        MenuEntry[] list = client.getMenuEntries();
-        if(list.length == 1){
-            MenuEntry newest = list[0];
-            newest.setTarget(text);
-            newest.setOption(text);
-            newest.setIdentifier(MenuAction.UNKNOWN.getId());
-            list[0] = newest;
-        }
-        else {
-            MenuEntry newest = list[1];
-            newest.setTarget(text);
-            newest.setOption(text);
-            newest.setIdentifier(MenuAction.UNKNOWN.getId());
-            list[1] = newest;
-        }
-        client.setMenuEntries(list);
-    }
-
-    private void handleClick(MenuEntry event)
-    {
-        if (getEmptySlots()>0
-                && ((getLastInventoryItem(ItemID.KING_WORM)!=null)||(getLastInventoryItem(ItemID.FISH_CHUNKS)!=null)) //if bait exists
-                && !shouldCut)
-        {
-            setMenuEntry(catchFishMenuEntry());
-            return;
-        }
-        else
-        {
-            shouldCut = true;
-        }
-        //if space in inventory then fish, else cut // add check for bait!
-
-        for (int fish:LIST_OF_FISH_IDS)
-        {
-            if (getLastInventoryItem(fish)!=null)
-            {
-                if (getLastInventoryItem(ItemID.KNIFE)==null)
-                {
-                    MenuEntry next = createMenuEntry(0,MenuAction.WIDGET_TYPE_1,0,0,false);
-                    next.setOption("Handled");
-                    setMenuEntry(next);
-                    //MousePackets.queueClickPacket();
-                    Widget dropitem = getLastInventoryItem(fish);
-                    EthanApiPlugin.invoke(dropitem.getIndex(),9764864,1007,7,dropitem.getItemId(),"Drop",dropitem.getName(),0,0);
-                    return;
-                }
-
-                MenuEntry next = createMenuEntry(0,MenuAction.WIDGET_TYPE_1,0,0,false);
-                next.setOption("Handled");
-                setMenuEntry(next);
-
-                Widget knife = getLastInventoryItem(ItemID.KNIFE);
-                //MousePackets.queueClickPacket();//Should change this to uh shadowclicks probs cba
-                //easier to invoke then send selected + looks a teensy bit more realistic imo
-                EthanApiPlugin.invoke(knife.getIndex(), 9764864,MenuAction.WIDGET_TARGET.getId(),1,knife.getItemId(),"Use", knife.getName(),0,0);
-                MousePackets.queueClickPacket();
-                Widget fishWidgete = getLastInventoryItem(fish);
-                EthanApiPlugin.invoke(fishWidgete.getIndex(),9764864,MenuAction.WIDGET_TARGET_ON_WIDGET.getId(),1,fishWidgete.getItemId(),"","",0,0);
-                return;
-            }
-        }
-        shouldCut=false;
-    }
-
-    private void setMenuEntry(MenuEntry entry)
-    {
-        entry.setOption(entry.getOption());
-        entry.setTarget(entry.getTarget());
-        entry.setIdentifier(entry.getIdentifier());
-        entry.setIdentifier(entry.getType().getId());
-        entry.setParam0(entry.getParam0());
-        entry.setParam1(entry.getParam1());
-    }
-
-    private Widget getLastInventoryItem(int id) {
-        Widget inventoryWidget = client.getWidget(WidgetInfo.INVENTORY);
-        if (inventoryWidget!=null && !inventoryWidget.isHidden())
-        {
-            return getLastWidgetItem(inventoryWidget,id);
-        }
-        return null;
-    }
-
-    private Widget getLastWidgetItem(Widget widget,int id) {
-        return Arrays.stream(widget.getDynamicChildren())
-                .filter(item -> item.getItemId()==id)
-                .reduce((first, second) -> second)
-                .orElse(null);
-    }
-
-    private int getEmptySlots() {
-        Widget inventory = client.getWidget(WidgetInfo.INVENTORY.getId());
-        Widget bankInventory = client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getId());
-
-        if (inventory!=null && !inventory.isHidden()
-                && inventory.getDynamicChildren()!=null)
-        {
-            List<Widget> inventoryItems = Arrays.asList(client.getWidget(WidgetInfo.INVENTORY.getId()).getDynamicChildren());
-            return (int) inventoryItems.stream().filter(item -> item.getItemId() == 6512).count();
-        }
-
-        if (bankInventory!=null && !bankInventory.isHidden()
-                && bankInventory.getDynamicChildren()!=null)
-        {
-            List<Widget> inventoryItems = Arrays.asList(client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getId()).getDynamicChildren());
-            return (int) inventoryItems.stream().filter(item -> item.getItemId() == 6512).count();
-        }
-        return -1;
-    }
-
-    private MenuEntry useKnifeOnFishMenuEntry(Widget Fish){
-        return createMenuEntry(
-                0,
-                MenuAction.WIDGET_TARGET_ON_WIDGET,
-                Fish.getIndex(),
-                9764864,
-                false);
-    }
-
-    private MenuEntry dropFishMenuEntry(Widget Fish){
-        return createMenuEntry(
-                7,
-                MenuAction.CC_OP_LOW_PRIORITY,
-                Fish.getIndex(),
-                9764864,
-                false);
-    }
-
-    private MenuEntry catchFishMenuEntry(){
-        NPC FishingSpot = getFishingSpot();
-        return createMenuEntry(
-                FishingSpot.getIndex(),
-                MenuAction.NPC_FIRST_OPTION,
-                getNPCLocation(FishingSpot).getX(),
-                getNPCLocation(FishingSpot).getY(),
-                true);
-    }
-
-    private NPC getFishingSpot()
-    {
-        return NPCs.search().withId(TENCH_FISHING_SPOT_NPC_ID).nearestToPlayer().get();
-    }
-
-    private Point getNPCLocation(NPC npc)
-    {
-        return new Point(npc.getLocalLocation().getSceneX(),npc.getLocalLocation().getSceneY());
-    }
-
-    public MenuEntry createMenuEntry(int identifier, MenuAction type, int param0, int param1, boolean forceLeftClick) {
-        return client.createMenuEntry(0).setOption("").setTarget("").setIdentifier(identifier).setType(type)
-                .setParam0(param0).setParam1(param1).setForceLeftClick(forceLeftClick);
-    }
-
-    private void printLineNumber() {
-        System.out.println("LINE - " + Thread.currentThread().getStackTrace()[2].getLineNumber());
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatSafespot.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatSafespot.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatSafespot.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatSafespot.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,58 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp;
-
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.BloatPath;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.BloatRotation;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.DistanceInfo;
-import org.apache.commons.lang3.ArrayUtils;
-import org.apache.commons.lang3.tuple.Pair;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.function.Supplier;
-
-public final class BloatSafespot {
-    public BloatSafespot(Pair<BloatPath, BloatRotation> pair, Supplier<Integer> distance) {
-        this.bloatPath = pair.getLeft();
-        this.clockRotation = pair.getRight();
-        this.distanceInfo = new DistanceInfo(distance.get());
-    }
-
-    public List<SSLine> getSafespotLines() {
-        return this.distanceInfo.isCorner() ? getCornerSafespots() : getSideSafespots();
-    }
-
-    public List<SSLine> getCornerSafespots() {
-        if (this.bloatPath == BloatPath.UNKNOWN)
-            return Collections.emptyList();
-        Pair<SSLine[], int[]> lop = this.bloatPath.getCornerSafespots(grid).get(this.distanceInfo.getCornerIndex(this.clockRotation.isClockwise()));
-        SSLine[] safespotLines = lop.getLeft();
-        if (!this.distanceInfo.shouldModifyCorner(this.bloatPath))
-            return Arrays.asList(safespotLines);
-        byte bit = (byte)((this.bloatPath == BloatPath.N_PATH || this.bloatPath == BloatPath.S_PATH) ? 1 : 0);
-        boolean isCol = (bit == 0);
-        int[] offsets = lop.getRight();
-        return Arrays.asList(safespotLines[bit]
-                .offset(c -> c.dx(isCol ? offsets[0] : offsets[2]).dy(isCol ? offsets[1] : offsets[3])), safespotLines[(3 + bit) % 2]);
-    }
-
-    public List<SSLine> getSideSafespots() {
-        if (this.bloatPath == BloatPath.UNKNOWN)
-            return Collections.emptyList();
-        SSLine[] safespotLines = this.bloatPath.getSideSafespotLines(grid);
-        if (!this.clockRotation.isClockwise())
-            ArrayUtils.reverse(safespotLines);
-        List<Integer> offsets = this.bloatPath.getSideOffsets(this.distanceInfo.isSideMin());
-        return Arrays.asList(safespotLines[0]
-                .offset(c -> c.dx(this.bloatPath.shouldOffsetX() ? offsets.get(0) : 0).dy(this.bloatPath.shouldOffsetY() ? offsets.get(0) : 0)), safespotLines[1]
-                .offset(c -> c.dx(this.bloatPath.shouldOffsetX() ? offsets.get(1) : 0).dy(this.bloatPath.shouldOffsetY() ? offsets.get(1) : 0)));
-    }
-
-    public static final SSLine[][][] grid = new SSLine[][][] { { { new SSLine(new Coordinates(29, 39), new Coordinates(29, 34), -1, 1), new SSLine(new Coordinates(29, 29), new Coordinates(29, 24), -1, -1) }, { new SSLine(new Coordinates(34, 39), new Coordinates(34, 34), 1, 1), new SSLine(new Coordinates(34, 29), new Coordinates(34, 24), 1, -1) } }, { { new SSLine(new Coordinates(24, 34), new Coordinates(29, 34), -1, 1), new SSLine(new Coordinates(34, 34), new Coordinates(39, 34), 1, 1) }, { new SSLine(new Coordinates(28, 29), new Coordinates(23, 29), 1, -1), new SSLine(new Coordinates(34, 29), new Coordinates(39, 29), 1, -1) } } };
-
-    public final BloatPath bloatPath;
-
-    public final BloatRotation clockRotation;
-
-    public final DistanceInfo distanceInfo;
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/TheatrePerspective.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatrePerspective.java b/src/main/java/net/runelite/client/plugins/spoontob/util/TheatrePerspective.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatrePerspective.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,579 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import java.awt.FontMetrics;
-import java.awt.Graphics2D;
-import java.awt.Polygon;
-import java.awt.geom.Rectangle2D;
-import java.awt.image.BufferedImage;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import net.runelite.api.Client;
-import net.runelite.api.Model;
-import net.runelite.api.Point;
-import net.runelite.api.SpritePixels;
-import net.runelite.api.Varbits;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.geometry.SimplePolygon;
-import net.runelite.api.model.Jarvis;
-import net.runelite.api.widgets.Widget;
-import net.runelite.api.widgets.WidgetInfo;
-
-public class TheatrePerspective {
-    public static final double UNIT = 0.0030679615757712823D;
-
-    public static final int LOCAL_COORD_BITS = 7;
-
-    public static final int LOCAL_TILE_SIZE = 128;
-
-    public static final int LOCAL_HALF_TILE_SIZE = 64;
-
-    public static final int SCENE_SIZE = 104;
-
-    public static final int[] SINE = new int[2048];
-
-    public static final int[] COSINE = new int[2048];
-
-    static {
-        for (int i = 0; i < 2048; i++) {
-            SINE[i] = (int)(65536.0D * Math.sin(i * 0.0030679615757712823D));
-            COSINE[i] = (int)(65536.0D * Math.cos(i * 0.0030679615757712823D));
-        }
-    }
-
-    @Nullable
-    public static Point localToCanvas(@Nonnull Client client, @Nonnull LocalPoint point, int plane) {
-        return localToCanvas(client, point, plane, 0);
-    }
-
-    @Nullable
-    public static Point localToCanvas(@Nonnull Client client, @Nonnull LocalPoint point, int plane, int zOffset) {
-        int tileHeight = getTileHeight(client, point, plane);
-        return localToCanvas(client, point.getX(), point.getY(), tileHeight - zOffset);
-    }
-
-    public static Point localToCanvas(@Nonnull Client client, int x, int y, int z) {
-        if (x >= 128 && y >= 128 && x <= 13056 && y <= 13056) {
-            x -= client.getCameraX();
-            y -= client.getCameraY();
-            z -= client.getCameraZ();
-            int cameraPitch = client.getCameraPitch();
-            int cameraYaw = client.getCameraYaw();
-            int pitchSin = SINE[cameraPitch];
-            int pitchCos = COSINE[cameraPitch];
-            int yawSin = SINE[cameraYaw];
-            int yawCos = COSINE[cameraYaw];
-            int var8 = yawCos * x + y * yawSin >> 16;
-            y = yawCos * y - yawSin * x >> 16;
-            x = var8;
-            var8 = pitchCos * z - y * pitchSin >> 16;
-            y = z * pitchSin + y * pitchCos >> 16;
-            if (y >= 50) {
-                int pointX = client.getViewportWidth() / 2 + x * client.getScale() / y;
-                int pointY = client.getViewportHeight() / 2 + var8 * client.getScale() / y;
-                return new Point(pointX + client
-                        .getViewportXOffset(), pointY + client
-                        .getViewportYOffset());
-            }
-        }
-        return null;
-    }
-
-    public static void modelToCanvas(Client client, int end, int x3dCenter, int y3dCenter, int z3dCenter, int rotate, int[] x3d, int[] y3d, int[] z3d, int[] x2d, int[] y2d) {
-        int cameraPitch = client.getCameraPitch();
-        int cameraYaw = client.getCameraYaw();
-        int pitchSin = SINE[cameraPitch];
-        int pitchCos = COSINE[cameraPitch];
-        int yawSin = SINE[cameraYaw];
-        int yawCos = COSINE[cameraYaw];
-        int rotateSin = SINE[rotate];
-        int rotateCos = COSINE[rotate];
-        int cx = x3dCenter - client.getCameraX();
-        int cy = y3dCenter - client.getCameraY();
-        int cz = z3dCenter - client.getCameraZ();
-        int viewportXMiddle = client.getViewportWidth() / 2;
-        int viewportYMiddle = client.getViewportHeight() / 2;
-        int viewportXOffset = client.getViewportXOffset();
-        int viewportYOffset = client.getViewportYOffset();
-        int zoom3d = client.getScale();
-        for (int i = 0; i < end; i++) {
-            int viewX, viewY, x = x3d[i];
-            int y = y3d[i];
-            int z = z3d[i];
-            if (rotate != 0) {
-                int x0 = x;
-                x = x0 * rotateCos + y * rotateSin >> 16;
-                y = y * rotateCos - x0 * rotateSin >> 16;
-            }
-            x += cx;
-            y += cy;
-            z += cz;
-            int x1 = x * yawCos + y * yawSin >> 16;
-            int y1 = y * yawCos - x * yawSin >> 16;
-            int y2 = z * pitchCos - y1 * pitchSin >> 16;
-            int z1 = y1 * pitchCos + z * pitchSin >> 16;
-            if (z1 < 50) {
-                viewX = Integer.MIN_VALUE;
-                viewY = Integer.MIN_VALUE;
-            } else {
-                viewX = viewportXMiddle + x1 * zoom3d / z1 + viewportXOffset;
-                viewY = viewportYMiddle + y2 * zoom3d / z1 + viewportYOffset;
-            }
-            x2d[i] = viewX;
-            y2d[i] = viewY;
-        }
-    }
-
-    @Nullable
-    public static Point localToMinimap(@Nonnull Client client, @Nonnull LocalPoint point) {
-        return localToMinimap(client, point, 6400);
-    }
-
-    @Nullable
-    public static Point localToMinimap(@Nonnull Client client, @Nonnull LocalPoint point, int distance) {
-        LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
-        int x = point.getX() / 32 - localLocation.getX() / 32;
-        int y = point.getY() / 32 - localLocation.getY() / 32;
-        int dist = x * x + y * y;
-        if (dist < distance) {
-            Widget minimapDrawWidget;
-            if (client.isResized()) {
-                if (client.getVarbitValue(Varbits.SIDE_PANELS) == 1) {
-                    minimapDrawWidget = client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_DRAW_AREA);
-                } else {
-                    minimapDrawWidget = client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_STONES_DRAW_AREA);
-                }
-            } else {
-                minimapDrawWidget = client.getWidget(WidgetInfo.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
-            }
-            if (minimapDrawWidget == null || minimapDrawWidget.isHidden())
-                return null;
-            int angle = client.getMapAngle() & 0x7FF;
-            int sin = SINE[angle];
-            int cos = COSINE[angle];
-            int xx = y * sin + cos * x >> 16;
-            int yy = sin * x - y * cos >> 16;
-            Point loc = minimapDrawWidget.getCanvasLocation();
-            int miniMapX = loc.getX() + xx + minimapDrawWidget.getWidth() / 2;
-            int miniMapY = minimapDrawWidget.getHeight() / 2 + loc.getY() + yy;
-            return new Point(miniMapX, miniMapY);
-        }
-        return null;
-    }
-
-    public static int getTileHeight(@Nonnull Client client, @Nonnull LocalPoint point, int plane) {
-        int sceneX = point.getSceneX();
-        int sceneY = point.getSceneY();
-        if (sceneX >= 0 && sceneY >= 0 && sceneX < 104 && sceneY < 104) {
-            byte[][][] tileSettings = client.getTileSettings();
-            int[][][] tileHeights = client.getTileHeights();
-            int z1 = plane;
-            if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-                z1 = plane + 1;
-            int x = point.getX() & 0x7F;
-            int y = point.getY() & 0x7F;
-            int var8 = x * tileHeights[z1][sceneX + 1][sceneY] + (128 - x) * tileHeights[z1][sceneX][sceneY] >> 7;
-            int var9 = tileHeights[z1][sceneX][sceneY + 1] * (128 - x) + x * tileHeights[z1][sceneX + 1][sceneY + 1] >> 7;
-            return (128 - y) * var8 + y * var9 >> 7;
-        }
-        return 0;
-    }
-
-    private static int getHeight(@Nonnull Client client, int localX, int localY, int plane) {
-        int sceneX = localX >> 7;
-        int sceneY = localY >> 7;
-        if (sceneX >= 0 && sceneY >= 0 && sceneX < 104 && sceneY < 104) {
-            int[][][] tileHeights = client.getTileHeights();
-            int x = localX & 0x7F;
-            int y = localY & 0x7F;
-            int var8 = x * tileHeights[plane][sceneX + 1][sceneY] + (128 - x) * tileHeights[plane][sceneX][sceneY] >> 7;
-            int var9 = tileHeights[plane][sceneX][sceneY + 1] * (128 - x) + x * tileHeights[plane][sceneX + 1][sceneY + 1] >> 7;
-            return (128 - y) * var8 + y * var9 >> 7;
-        }
-        return 0;
-    }
-
-    public static Polygon getLine(@Nonnull Client client, @Nonnull LocalPoint localLocation, String orientation) {
-        Polygon poly = new Polygon();
-        int plane = client.getPlane();
-        int swX = localLocation.getX() - 64;
-        int swY = localLocation.getY() - 64;
-        int neX = localLocation.getX() + 64;
-        int neY = localLocation.getY() + 64;
-        int seX = swX;
-        int seY = neY;
-        int nwX = neX;
-        int nwY = swY;
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX < 0 || sceneY < 0 || sceneX >= 104 || sceneY >= 104)
-            return null;
-        int tilePlane = plane;
-        if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-            tilePlane = plane + 1;
-        int swHeight = getHeight(client, swX, swY, tilePlane);
-        int nwHeight = getHeight(client, nwX, nwY, tilePlane);
-        int neHeight = getHeight(client, neX, neY, tilePlane);
-        int seHeight = getHeight(client, seX, seY, tilePlane);
-        Point p1 = localToCanvas(client, swX, swY, swHeight);
-        Point p2 = localToCanvas(client, nwX, nwY, nwHeight);
-        Point p3 = localToCanvas(client, neX, neY, neHeight);
-        Point p4 = localToCanvas(client, seX, seY, seHeight);
-        Point p5 = localToCanvas(client, localLocation.getX(), localLocation.getY() - 64, swHeight);
-        Point p6 = localToCanvas(client, localLocation.getX(), localLocation.getY(), swHeight);
-        Point p7 = localToCanvas(client, localLocation.getX(), localLocation.getY() + 64, swHeight);
-        Point p8 = localToCanvas(client, localLocation.getX() + 64, localLocation.getY(), swHeight);
-        Point p9 = localToCanvas(client, localLocation.getX() - 64, localLocation.getY(), swHeight);
-        Point p10 = localToCanvas(client, localLocation.getX() - 44, localLocation.getY() + 32, swHeight);
-        Point p11 = localToCanvas(client, localLocation.getX() - 20, localLocation.getY() + 32, swHeight);
-        Point p12 = localToCanvas(client, localLocation.getX(), localLocation.getY(), swHeight);
-        Point p13 = localToCanvas(client, localLocation.getX(), localLocation.getY() - 64, swHeight);
-        Point p14 = localToCanvas(client, localLocation.getX() + 44, localLocation.getY() + 32, swHeight);
-        Point p15 = localToCanvas(client, localLocation.getX() + 20, localLocation.getY() + 32, swHeight);
-        Point p16 = localToCanvas(client, localLocation.getX(), localLocation.getY(), swHeight);
-        Point p17 = localToCanvas(client, localLocation.getX(), localLocation.getY() - 64, swHeight);
-        if (p1 == null || p2 == null || p3 == null || p4 == null)
-            return null;
-        if (orientation == "swnw") {
-            poly.addPoint(p1.getX(), p1.getY());
-            poly.addPoint(p4.getX(), p4.getY());
-        } else if (orientation == "sene") {
-            poly.addPoint(p2.getX(), p2.getY());
-            poly.addPoint(p3.getX(), p3.getY());
-        } else if (orientation == "swse") {
-            poly.addPoint(p1.getX(), p1.getY());
-            poly.addPoint(p2.getX(), p2.getY());
-        } else if (orientation == "nwne") {
-            poly.addPoint(p4.getX(), p4.getY());
-            poly.addPoint(p3.getX(), p3.getY());
-        } else if (orientation == "westMiddle") {
-            poly.addPoint(p5.getX(), p5.getY());
-            poly.addPoint(p6.getX(), p6.getY());
-        } else if (orientation == "kUp") {
-            poly.addPoint(p5.getX(), p5.getY());
-            poly.addPoint(p4.getX(), p4.getY());
-        } else if (orientation == "kDown") {
-            poly.addPoint(p5.getX(), p5.getY());
-            poly.addPoint(p3.getX(), p3.getY());
-        } else if (orientation == "E") {
-            poly.addPoint(p5.getX(), p5.getY());
-            poly.addPoint(p7.getX(), p7.getY());
-        } else if (orientation == "I") {
-            poly.addPoint(p8.getX(), p8.getY());
-            poly.addPoint(p9.getX(), p9.getY());
-        } else if (orientation == "B1") {
-            poly.addPoint(p1.getX(), p1.getY());
-            poly.addPoint(p9.getX(), p9.getY());
-        } else if (orientation == "B2") {
-            poly.addPoint(p9.getX(), p9.getY());
-            poly.addPoint(p10.getX(), p10.getY());
-        } else if (orientation == "B3") {
-            poly.addPoint(p10.getX(), p10.getY());
-            poly.addPoint(p11.getX(), p11.getY());
-        } else if (orientation == "B4") {
-            poly.addPoint(p11.getX(), p11.getY());
-            poly.addPoint(p12.getX(), p12.getY());
-        } else if (orientation == "B5") {
-            poly.addPoint(p12.getX(), p12.getY());
-            poly.addPoint(p13.getX(), p13.getY());
-        } else if (orientation == "B6") {
-            poly.addPoint(p2.getX(), p2.getY());
-            poly.addPoint(p8.getX(), p8.getY());
-        } else if (orientation == "B7") {
-            poly.addPoint(p8.getX(), p8.getY());
-            poly.addPoint(p14.getX(), p14.getY());
-        } else if (orientation == "B8") {
-            poly.addPoint(p14.getX(), p14.getY());
-            poly.addPoint(p15.getX(), p15.getY());
-        } else if (orientation == "B9") {
-            poly.addPoint(p15.getX(), p15.getY());
-            poly.addPoint(p16.getX(), p16.getY());
-        } else if (orientation == "B10") {
-            poly.addPoint(p16.getX(), p16.getY());
-            poly.addPoint(p17.getX(), p17.getY());
-        }
-        return poly;
-    }
-
-    public static Polygon getCanvasTilePoly(@Nonnull Client client, @Nonnull LocalPoint localLocation) {
-        return getCanvasTileAreaPoly(client, localLocation, 1);
-    }
-
-    public static Polygon getCanvasTilePoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int zOffset) {
-        return getCanvasTileAreaPoly(client, localLocation, 1, 1, client.getPlane(), zOffset);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size) {
-        return getCanvasTileAreaPoly(client, localLocation, size, 0, true);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, int borderOffset) {
-        return getCanvasTileAreaPoly(client, localLocation, size, borderOffset, true);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, boolean centered) {
-        return getCanvasTileAreaPoly(client, localLocation, size, 0, centered);
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, int borderOffset, boolean centered) {
-        int swX, swY, neX, neY, plane = client.getPlane();
-        if (centered) {
-            swX = localLocation.getX() - size * (128 + borderOffset) / 2;
-            swY = localLocation.getY() - size * (128 + borderOffset) / 2;
-            neX = localLocation.getX() + size * (128 + borderOffset) / 2;
-            neY = localLocation.getY() + size * (128 + borderOffset) / 2;
-        } else {
-            swX = localLocation.getX() - (128 + borderOffset) / 2;
-            swY = localLocation.getY() - (128 + borderOffset) / 2;
-            neX = localLocation.getX() - (128 + borderOffset) / 2 + size * (128 + borderOffset);
-            neY = localLocation.getY() - (128 + borderOffset) / 2 + size * (128 + borderOffset);
-        }
-        int seX = swX;
-        int seY = neY;
-        int nwX = neX;
-        int nwY = swY;
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX < 0 || sceneY < 0 || sceneX >= 104 || sceneY >= 104)
-            return null;
-        int tilePlane = plane;
-        if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-            tilePlane = plane + 1;
-        int swHeight = getHeight(client, swX, swY, tilePlane);
-        int nwHeight = getHeight(client, nwX, nwY, tilePlane);
-        int neHeight = getHeight(client, neX, neY, tilePlane);
-        int seHeight = getHeight(client, seX, seY, tilePlane);
-        Point p1 = localToCanvas(client, swX, swY, swHeight);
-        Point p2 = localToCanvas(client, nwX, nwY, nwHeight);
-        Point p3 = localToCanvas(client, neX, neY, neHeight);
-        Point p4 = localToCanvas(client, seX, seY, seHeight);
-        if (p1 == null || p2 == null || p3 == null || p4 == null)
-            return null;
-        Polygon poly = new Polygon();
-        poly.addPoint(p1.getX(), p1.getY());
-        poly.addPoint(p2.getX(), p2.getY());
-        poly.addPoint(p3.getX(), p3.getY());
-        poly.addPoint(p4.getX(), p4.getY());
-        return poly;
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int sizeX, int sizeY, int zOffset) {
-        int plane = client.getPlane();
-        int swX = localLocation.getX() - sizeX * 128 / 2;
-        int swY = localLocation.getY() - sizeY * 128 / 2;
-        int neX = localLocation.getX() + sizeX * 128 / 2;
-        int neY = localLocation.getY() + sizeY * 128 / 2;
-        int seX = swX;
-        int seY = neY;
-        int nwX = neX;
-        int nwY = swY;
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX < 0 || sceneY < 0 || sceneX >= 104 || sceneY >= 104)
-            return null;
-        int tilePlane = plane;
-        if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-            tilePlane = plane + 1;
-        int swHeight = getHeight(client, swX, swY, tilePlane) - zOffset;
-        int nwHeight = getHeight(client, nwX, nwY, tilePlane) - zOffset;
-        int neHeight = getHeight(client, neX, neY, tilePlane) - zOffset;
-        int seHeight = getHeight(client, seX, seY, tilePlane) - zOffset;
-        Point p1 = localToCanvas(client, swX, swY, swHeight);
-        Point p2 = localToCanvas(client, nwX, nwY, nwHeight);
-        Point p3 = localToCanvas(client, neX, neY, neHeight);
-        Point p4 = localToCanvas(client, seX, seY, seHeight);
-        if (p1 == null || p2 == null || p3 == null || p4 == null)
-            return null;
-        Polygon poly = new Polygon();
-        poly.addPoint(p1.getX(), p1.getY());
-        poly.addPoint(p2.getX(), p2.getY());
-        poly.addPoint(p3.getX(), p3.getY());
-        poly.addPoint(p4.getX(), p4.getY());
-        return poly;
-    }
-
-    public static Polygon getCanvasTileAreaPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int sizeX, int sizeY, int plane, int zOffset) {
-        int swX = localLocation.getX() - sizeX * 128 / 2;
-        int swY = localLocation.getY() - sizeY * 128 / 2;
-        int neX = localLocation.getX() + sizeX * 128 / 2;
-        int neY = localLocation.getY() + sizeY * 128 / 2;
-        int seX = swX;
-        int seY = neY;
-        int nwX = neX;
-        int nwY = swY;
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX < 0 || sceneY < 0 || sceneX >= 104 || sceneY >= 104)
-            return null;
-        int tilePlane = plane;
-        if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-            tilePlane = plane + 1;
-        int swHeight = getHeight(client, swX, swY, tilePlane) - zOffset;
-        int nwHeight = getHeight(client, nwX, nwY, tilePlane) - zOffset;
-        int neHeight = getHeight(client, neX, neY, tilePlane) - zOffset;
-        int seHeight = getHeight(client, seX, seY, tilePlane) - zOffset;
-        Point p1 = localToCanvas(client, swX, swY, swHeight);
-        Point p2 = localToCanvas(client, nwX, nwY, nwHeight);
-        Point p3 = localToCanvas(client, neX, neY, neHeight);
-        Point p4 = localToCanvas(client, seX, seY, seHeight);
-        if (p1 == null || p2 == null || p3 == null || p4 == null)
-            return null;
-        Polygon poly = new Polygon();
-        poly.addPoint(p1.getX(), p1.getY());
-        poly.addPoint(p2.getX(), p2.getY());
-        poly.addPoint(p3.getX(), p3.getY());
-        poly.addPoint(p4.getX(), p4.getY());
-        return poly;
-    }
-
-    public static Polygon getCanvasTileAreaPolyDiag(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size) {
-        int plane = client.getPlane();
-        int swX = localLocation.getX() - size * 128 / 2;
-        int swY = localLocation.getY() - size * 128 / 2;
-        int neX = localLocation.getX() + size * 128 / 2;
-        int neY = localLocation.getY() + size * 128 / 2;
-        int seX = swX;
-        int seY = neY;
-        int nwX = neX;
-        int nwY = swY;
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX < 0 || sceneY < 0 || sceneX >= 104 || sceneY >= 104)
-            return null;
-        int tilePlane = plane;
-        if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-            tilePlane = plane + 1;
-        int swHeight = getHeight(client, swX, swY, tilePlane);
-        int nwHeight = getHeight(client, nwX, nwY, tilePlane);
-        int neHeight = getHeight(client, neX, neY, tilePlane);
-        int seHeight = getHeight(client, seX, seY, tilePlane);
-        Point p1 = localToCanvas(client, swX, swY, swHeight);
-        Point p2 = localToCanvas(client, nwX, nwY, nwHeight);
-        Point p3 = localToCanvas(client, neX, neY, neHeight);
-        Point p4 = localToCanvas(client, seX, seY, seHeight);
-        if (p1 == null || p2 == null || p3 == null || p4 == null)
-            return null;
-        Polygon poly = new Polygon();
-        poly.addPoint(p1.getX(), p1.getY());
-        poly.addPoint(p3.getX(), p3.getY());
-        return poly;
-    }
-
-    public static Polygon getCanvasTileAreaPolyDiag2(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size) {
-        int plane = client.getPlane();
-        int swX = localLocation.getX() - size * 128 / 2;
-        int swY = localLocation.getY() - size * 128 / 2;
-        int neX = localLocation.getX() + size * 128 / 2;
-        int neY = localLocation.getY() + size * 128 / 2;
-        int seX = swX;
-        int seY = neY;
-        int nwX = neX;
-        int nwY = swY;
-        byte[][][] tileSettings = client.getTileSettings();
-        int sceneX = localLocation.getSceneX();
-        int sceneY = localLocation.getSceneY();
-        if (sceneX < 0 || sceneY < 0 || sceneX >= 104 || sceneY >= 104)
-            return null;
-        int tilePlane = plane;
-        if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 0x2) == 2)
-            tilePlane = plane + 1;
-        int swHeight = getHeight(client, swX, swY, tilePlane);
-        int nwHeight = getHeight(client, nwX, nwY, tilePlane);
-        int neHeight = getHeight(client, neX, neY, tilePlane);
-        int seHeight = getHeight(client, seX, seY, tilePlane);
-        Point p1 = localToCanvas(client, swX, swY, swHeight);
-        Point p2 = localToCanvas(client, nwX, nwY, nwHeight);
-        Point p3 = localToCanvas(client, neX, neY, neHeight);
-        Point p4 = localToCanvas(client, seX, seY, seHeight);
-        if (p1 == null || p2 == null || p3 == null || p4 == null)
-            return null;
-        Polygon poly = new Polygon();
-        poly.addPoint(p2.getX(), p2.getY());
-        poly.addPoint(p4.getX(), p4.getY());
-        return poly;
-    }
-
-    public static Point getCanvasTextLocation(@Nonnull Client client, @Nonnull Graphics2D graphics, @Nonnull LocalPoint localLocation, @Nullable String text, int zOffset) {
-        if (text == null)
-            return null;
-        int plane = client.getPlane();
-        Point p = localToCanvas(client, localLocation, plane, zOffset);
-        if (p == null)
-            return null;
-        FontMetrics fm = graphics.getFontMetrics();
-        Rectangle2D bounds = fm.getStringBounds(text, graphics);
-        int xOffset = p.getX() - (int)(bounds.getWidth() / 2.0D);
-        return new Point(xOffset, p.getY());
-    }
-
-    public static Point getCanvasImageLocation(@Nonnull Client client, @Nonnull LocalPoint localLocation, @Nonnull BufferedImage image, int zOffset) {
-        int plane = client.getPlane();
-        Point p = localToCanvas(client, localLocation, plane, zOffset);
-        if (p == null)
-            return null;
-        int xOffset = p.getX() - image.getWidth() / 2;
-        int yOffset = p.getY() - image.getHeight() / 2;
-        return new Point(xOffset, yOffset);
-    }
-
-    public static Point getMiniMapImageLocation(@Nonnull Client client, @Nonnull LocalPoint localLocation, @Nonnull BufferedImage image) {
-        Point p = localToMinimap(client, localLocation);
-        if (p == null)
-            return null;
-        int xOffset = p.getX() - image.getWidth() / 2;
-        int yOffset = p.getY() - image.getHeight() / 2;
-        return new Point(xOffset, yOffset);
-    }
-
-    public static Point getCanvasSpriteLocation(@Nonnull Client client, @Nonnull LocalPoint localLocation, @Nonnull SpritePixels sprite, int zOffset) {
-        int plane = client.getPlane();
-        Point p = localToCanvas(client, localLocation, plane, zOffset);
-        if (p == null)
-            return null;
-        int xOffset = p.getX() - sprite.getWidth() / 2;
-        int yOffset = p.getY() - sprite.getHeight() / 2;
-        return new Point(xOffset, yOffset);
-    }
-
-    private static SimplePolygon calculateAABB(Client client, Model m, int jauOrient, int x, int y, int z) {
-        int ex = m.getAABB(0).getExtremeX();
-        if (ex == -1) {
-            m.calculateBoundsCylinder();
-            m.calculateExtreme(0);
-            ex = m.getAABB(0).getExtremeX();
-        }
-        int x1 = m.getAABB(0).getCenterX();
-        int y1 = m.getAABB(0).getCenterZ();
-        int z1 = m.getAABB(0).getCenterY();
-        int ey = m.getAABB(0).getExtremeZ();
-        int ez = m.getAABB(0).getExtremeY();
-        int x2 = x1 + ex;
-        int y2 = y1 + ey;
-        int z2 = z1 + ez;
-        x1 -= ex;
-        y1 -= ey;
-        z1 -= ez;
-        int[] xa = { x1, x2, x1, x2, x1, x2, x1, x2 };
-        int[] ya = { y1, y1, y2, y2, y1, y1, y2, y2 };
-        int[] za = { z1, z1, z1, z1, z2, z2, z2, z2 };
-        int[] x2d = new int[8];
-        int[] y2d = new int[8];
-        modelToCanvas(client, 8, x, y, z, jauOrient, xa, ya, za, x2d, y2d);
-        return Jarvis.convexHull(x2d, y2d);
-    }
-
-    public static Point getCanvasTextMiniMapLocation(@Nonnull Client client, @Nonnull Graphics2D graphics, @Nonnull LocalPoint localLocation, @Nonnull String text) {
-        Point p = localToMinimap(client, localLocation);
-        if (p == null)
-            return null;
-        FontMetrics fm = graphics.getFontMetrics();
-        Rectangle2D bounds = fm.getStringBounds(text, graphics);
-        int xOffset = p.getX() - (int)(bounds.getWidth() / 2.0D);
-        int yOffset = p.getY() - (int)(bounds.getHeight() / 2.0D) + fm.getAscent();
-        return new Point(xOffset, yOffset);
-    }
-}
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PlayerShell.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PlayerShell.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PlayerShell.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PlayerShell.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,12 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.coords.WorldPoint;
-
-public class PlayerShell {
-    public PlayerShell(WorldPoint location, String name) {
-        this.name = name;
-        this.location = location;
-    }
-    public WorldPoint location;
-    public String name;
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/IPath.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/IPath.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/IPath.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/IPath.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,72 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def;
-
-import java.util.Arrays;
-import java.util.List;
-
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.SSLine;
-import org.apache.commons.lang3.tuple.Pair;
-
-public interface IPath {
-    int[] NW_OFFSETS = new int[]{-1, 0, 0, 1};
-    int[] NE_OFFSETS = new int[]{1, 0, 0, 1};
-    int[] SW_OFFSETS = new int[]{-1, 0, 0, -1};
-    int[] SE_OFFSETS = new int[]{1, 0, 0, -1};
-    int SIDE_MAX_OFFSET = 4;
-    int SIDE_MIN_OFFSET = 2;
-
-    default List<Pair<SSLine[], int[]>> getCornerSafespots(SSLine[][][] bloatGrid) {
-        return null;
-    }
-
-    default SSLine[] getSideSafespotLines(SSLine[][][] bloatGrid) {
-        return null;
-    }
-
-    default boolean areOffsetsNegative() {
-        return false;
-    }
-
-    default boolean shouldOffsetX() {
-        return false;
-    }
-
-    default boolean shouldOffsetY() {
-        return false;
-    }
-
-    default List<Integer> getSideOffsets(boolean sideMin) {
-        return Arrays.asList(sideMin ? (this.areOffsetsNegative() ? -4 : 4) : (this.areOffsetsNegative() ? -2 : 2), sideMin ? (this.areOffsetsNegative() ? -2 : 2) : (this.areOffsetsNegative() ? -4 : 4));
-    }
-
-    static SSLine[] getNWCornerLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[0][1][0], bloatGrid[1][1][0]};
-    }
-
-    static SSLine[] getNECornerLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[0][0][0], bloatGrid[1][1][1]};
-    }
-
-    static SSLine[] getSWCornerLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[0][1][1], bloatGrid[1][0][0]};
-    }
-
-    static SSLine[] getSECornerLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[0][0][1], bloatGrid[1][0][1]};
-    }
-
-    static SSLine[] getNorthLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[1][0][0], bloatGrid[1][0][1]};
-    }
-
-    static SSLine[] getEastLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[0][1][0], bloatGrid[0][1][1]};
-    }
-
-    static SSLine[] getSouthLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[1][1][1], bloatGrid[1][1][0]};
-    }
-
-    static SSLine[] getWestLines(SSLine[][][] bloatGrid) {
-        return new SSLine[]{bloatGrid[0][0][1], bloatGrid[0][0][0]};
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloInfo.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloInfo.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloInfo.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloInfo.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,14 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import net.runelite.api.NPC;
-
-public class NyloInfo {
-    public NyloInfo(NPC nylo) {
-        this.nylo = nylo;
-        this.ticks = 52;
-        this.alive = true;
-    }
-    public NPC nylo;
-    public int ticks;
-    public boolean alive;
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/Room.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/Room.java b/src/main/java/net/runelite/client/plugins/spoontob/Room.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/Room.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,29 +0,0 @@
-package net.runelite.client.plugins.spoontob;
-
-import net.runelite.client.ui.overlay.OverlayManager;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
-@Singleton
-public abstract class Room {
-    protected final SpoonTobPlugin plugin;
-    protected final SpoonTobConfig config;
-    @Inject
-    protected OverlayManager overlayManager;
-
-    @Inject
-    protected Room(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        this.plugin = plugin;
-        this.config = config;
-    }
-
-    public void init() {
-    }
-
-    public void load() {
-    }
-
-    public void unload() {
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/Maiden.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/Maiden.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/Maiden.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/Maiden.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,655 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import com.google.common.collect.ImmutableSet;
-import org.apache.commons.lang3.tuple.Pair;
-import lombok.Getter;
-import net.runelite.api.*;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.*;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.plugins.spoontob.Room;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.util.ColorUtil;
-import net.runelite.client.util.Text;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.text.DecimalFormat;
-import java.util.List;
-import java.util.*;
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-
-import static net.runelite.api.NpcID.*;
-
-public class Maiden extends Room {
-    @Inject
-    private Client client;
-
-    @Inject
-    private MaidenOverlay maidenOverlay;
-
-    @Inject
-    private ThresholdOverlay thresholdOverlay;
-
-    @Inject
-    private MaidenMaxHitOverlay maidenMaxHitOverlay;
-
-    @Inject
-    private MaidenRedsOverlay redsOverlay;
-
-    private static final int BLOOD_SPLAT_GRAPHIC = 1579;
-    private static final int BLOOD_SPLAT_PROJECTILE = 1578;
-
-    @Getter
-    private boolean maidenActive;
-
-    @Getter
-    private NPC maidenNPC;
-
-    @Getter
-    private List<NPC> maidenSpawns = new ArrayList<>();
-
-    @Getter
-    private Map<NPC, Pair<Integer, Integer>> maidenReds = new HashMap<>();
-
-    @Getter
-    private List<WorldPoint> maidenBloodSplatters = new ArrayList<>();
-
-    @Getter
-    private ArrayList<MaidenBloodSplatInfo> maidenBloodSplatterProj = new ArrayList<>();
-
-    @Getter
-    public ArrayList<Color> maidenBloodSplattersColors = new ArrayList<>();
-
-    @Getter
-    private List<WorldPoint> maidenBloodSpawnLocations = new ArrayList<>();
-
-    @Getter
-    private List<WorldPoint> maidenBloodSpawnTrailingLocations = new ArrayList<>();
-
-    @Getter
-    private int newMaidenHp = -1;
-    @Getter
-    private int newMaidenThresholdHp = -1;
-    @Getter
-    private short realMaidenHp = -1;
-    @Getter
-    private short thresholdHp = -1;
-    @Getter
-    private double maxHit;
-    private short timesMaidenHealed = 0;
-    private short amountMaidenHealed = 0;
-    public final DecimalFormat df1 = new DecimalFormat("#0.0");
-    private final Consumer<Double> setThreshold = (percent) -> {
-        thresholdHp = (short)((int)Math.floor((double)getMaidenBaseHpIndex() * percent));
-    };
-
-    public int ticksUntilAttack = 0;
-    public int maidenAttSpd = 10;
-    public int lastAnimationID = -1;
-
-    private static final Set<MenuAction> NPC_MENU_ACTIONS = ImmutableSet.of(MenuAction.NPC_FIRST_OPTION, MenuAction.NPC_SECOND_OPTION, MenuAction.NPC_THIRD_OPTION, MenuAction.NPC_FOURTH_OPTION, MenuAction.NPC_FIFTH_OPTION, MenuAction.WIDGET_TARGET_ON_NPC, MenuAction.ITEM_USE_ON_NPC);;
-    public Color c;
-
-    public int nyloSpawnDelay = 2;
-    public int maidenPhase = 70;
-    public ArrayList<MaidenCrabInfo> maidenCrabInfoList = new ArrayList<MaidenCrabInfo>();
-    public Map<NPC, Integer> frozenBloodSpawns = new HashMap<>();
-    public int crabTicksSinceSpawn = 0;
-
-    @Inject
-    protected Maiden(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin, config);
-        maxHit = 36.5D;
-    }
-
-    public void load() {
-        overlayManager.add(maidenOverlay);
-        overlayManager.add(thresholdOverlay);
-        overlayManager.add(maidenMaxHitOverlay);
-        overlayManager.add(redsOverlay);
-    }
-
-    public void unload() {
-        overlayManager.remove(maidenOverlay);
-        overlayManager.remove(thresholdOverlay);
-        overlayManager.remove(maidenMaxHitOverlay);
-        overlayManager.remove(redsOverlay);
-
-        maidenActive = false;
-        maidenBloodSplatters.clear();
-        maidenBloodSplattersColors.clear();
-        maidenSpawns.clear();
-        maidenBloodSpawnLocations.clear();
-        maidenBloodSpawnTrailingLocations.clear();
-
-        newMaidenHp = -1;
-        newMaidenThresholdHp = -1;
-        timesMaidenHealed = 0;
-        amountMaidenHealed = 0;
-        realMaidenHp = -1;
-        thresholdHp = -1;
-        maxHit = 36.5D;
-    }
-
-    void updateMaidenMaxHit()
-    {
-        maxHit += 3.5D;
-    }
-
-    @Subscribe
-    public void onNpcSpawned(NpcSpawned npcSpawned) {
-        NPC npc = npcSpawned.getNpc();
-        String name = npc.getName();
-        switch (npc.getId()) {
-            case THE_MAIDEN_OF_SUGADINTI: //normal mode
-            case THE_MAIDEN_OF_SUGADINTI_8361:
-            case THE_MAIDEN_OF_SUGADINTI_8362:
-            case THE_MAIDEN_OF_SUGADINTI_8363:
-            case THE_MAIDEN_OF_SUGADINTI_8364:
-            case THE_MAIDEN_OF_SUGADINTI_8365:
-            case THE_MAIDEN_OF_SUGADINTI_10814: //story mode
-            case THE_MAIDEN_OF_SUGADINTI_10815:
-            case THE_MAIDEN_OF_SUGADINTI_10816:
-            case THE_MAIDEN_OF_SUGADINTI_10817:
-            case THE_MAIDEN_OF_SUGADINTI_10818:
-            case THE_MAIDEN_OF_SUGADINTI_10819:
-            case THE_MAIDEN_OF_SUGADINTI_10822: //hard mode
-            case THE_MAIDEN_OF_SUGADINTI_10823:
-            case THE_MAIDEN_OF_SUGADINTI_10824:
-            case THE_MAIDEN_OF_SUGADINTI_10825:
-            case THE_MAIDEN_OF_SUGADINTI_10826:
-            case THE_MAIDEN_OF_SUGADINTI_10827:
-                maidenActive = true;
-                maidenNPC = npc;
-                if((maidenNPC.getHealthRatio() == -1 && maidenNPC.getHealthScale() == -1 && (maidenNPC.getId() != 10822 && maidenNPC.getId() != 8360 && maidenNPC.getId() != 10814))
-                        || (maidenNPC.getHealthRatio() != maidenNPC.getHealthScale())){
-                    ticksUntilAttack = -1;
-                }else {
-                    ticksUntilAttack = 10;
-                }
-                maidenAttSpd = 10;
-                maidenCrabInfoList.clear();
-                if (realMaidenHp < 0) {
-                    realMaidenHp = getMaidenBaseHpIndex();
-                }
-
-                setThreshold.accept(0.7D);
-                break;
-            case BLOOD_SPAWN: //normal mode
-            case BLOOD_SPAWN_10821: //story mode
-            case BLOOD_SPAWN_10829: //hard mode
-                maidenSpawns.add(npc);
-        }
-
-        if (name != null && name.equalsIgnoreCase("Nylocas Matomenos") && maidenActive && maidenNPC != null) {
-            crabTicksSinceSpawn = 8;
-            nyloSpawnDelay = 2;
-            String position = "??";
-            boolean scuffed = false;
-            int x = npc.getWorldLocation().getRegionX();
-            int y = npc.getWorldLocation().getRegionY();
-
-            if (x == 21 && y == 40) {
-                position = "N1";
-            }else if (x == 22 && y == 41) {
-                position = "N1";
-                scuffed = true;
-            }else if (x == 25 && y == 40) {
-                position = "N2";
-            }else if (x == 26 && y == 41) {
-                position = "N2";
-                scuffed = true;
-            }else if (x == 29 && y == 40) {
-                position = "N3";
-            }else if (x == 30 && y == 41) {
-                position = "N3";
-                scuffed = true;
-            }else if (x == 33 && y == 40) {
-                position = "N4";
-            }else if (x == 34 && y == 41) {
-                position = "N4";
-                scuffed = true;
-            }else if (x == 33 && y == 38) {
-                position = "N4";
-            }else if (x == 34 && y == 39) {
-                position = "N4";
-                scuffed = true;
-            }else if (x == 21 && y == 20) {
-                position = "S1";
-            }else if (x == 22 && y == 19) {
-                position = "S1";
-                scuffed = true;
-            }else if (x == 25 && y == 20) {
-                position = "S2";
-            }else if (x == 26 && y == 19) {
-                position = "S2";
-                scuffed = true;
-            }else if (x == 29 && y == 20) {
-                position = "S3";
-            }else if (x == 30 && y == 19) {
-                position = "S3";
-                scuffed = true;
-            }else if (x == 33 && y == 20) {
-                position = "S4";
-            }else if (x == 34 && y == 19) {
-                position = "S4";
-                scuffed = true;
-            }else if (x == 33 && y == 22) {
-                position = "S4";
-            }else if (x == 34 && y == 20) {
-                position = "S4";
-                scuffed = true;
-            }
-
-            for(NPC n : client.getNpcs()) {
-                if (n.getId() == 8361 || n.getId() == 10814 || n.getId() == 10823) {
-                    maidenPhase = 70;
-                    break;
-                } else if (n.getId() == 8362 || n.getId() == 10815 || n.getId() == 10824) {
-                    maidenPhase = 50;
-                    break;
-                } else if (n.getId() == 8363 || n.getId() == 10816 || n.getId() == 10825) {
-                    maidenPhase = 30;
-                    break;
-                }
-            }
-            maidenCrabInfoList.add(new MaidenCrabInfo(npc, maidenPhase, position, -1, -1, -1, scuffed));
-        }
-    }
-
-    @Subscribe
-    public void onNpcDespawned(NpcDespawned npcDespawned) {
-        NPC npc = npcDespawned.getNpc();
-        switch(npc.getId()) {
-            case THE_MAIDEN_OF_SUGADINTI: //normal mode
-            case THE_MAIDEN_OF_SUGADINTI_8361:
-            case THE_MAIDEN_OF_SUGADINTI_8362:
-            case THE_MAIDEN_OF_SUGADINTI_8363:
-            case THE_MAIDEN_OF_SUGADINTI_8364:
-            case THE_MAIDEN_OF_SUGADINTI_8365:
-            case THE_MAIDEN_OF_SUGADINTI_10814: //story mode
-            case THE_MAIDEN_OF_SUGADINTI_10815:
-            case THE_MAIDEN_OF_SUGADINTI_10816:
-            case THE_MAIDEN_OF_SUGADINTI_10817:
-            case THE_MAIDEN_OF_SUGADINTI_10818:
-            case THE_MAIDEN_OF_SUGADINTI_10819:
-            case THE_MAIDEN_OF_SUGADINTI_10822: //hard mode
-            case THE_MAIDEN_OF_SUGADINTI_10823:
-            case THE_MAIDEN_OF_SUGADINTI_10824:
-            case THE_MAIDEN_OF_SUGADINTI_10825:
-            case THE_MAIDEN_OF_SUGADINTI_10826:
-            case THE_MAIDEN_OF_SUGADINTI_10827:
-                ticksUntilAttack = 0;
-                maidenAttSpd = 10;
-                maidenActive = false;
-                maidenSpawns.clear();
-                maidenNPC = null;
-                maidenPhase = 70;
-                newMaidenHp = -1;
-                newMaidenThresholdHp = -1;
-                timesMaidenHealed = 0;
-                amountMaidenHealed = 0;
-                realMaidenHp = -1;
-                thresholdHp = -1;
-                maxHit = 36.5D;
-                break;
-            case BLOOD_SPAWN:  //normal mode
-            case BLOOD_SPAWN_10821: //story mode
-            case BLOOD_SPAWN_10829: //hard mode
-                maidenSpawns.remove(npc);
-        }
-    }
-
-    @Subscribe
-    public void onNpcChanged(NpcChanged event) {
-        if(maidenActive && maidenNPC != null) {
-            NPC npc = event.getNpc();
-            int id = npc.getId();
-            switch (id) {
-                case THE_MAIDEN_OF_SUGADINTI: //normal mode
-                case THE_MAIDEN_OF_SUGADINTI_8361:
-                case THE_MAIDEN_OF_SUGADINTI_8362:
-                case THE_MAIDEN_OF_SUGADINTI_8363:
-                case THE_MAIDEN_OF_SUGADINTI_8364:
-                case THE_MAIDEN_OF_SUGADINTI_8365:
-                case THE_MAIDEN_OF_SUGADINTI_10814: //story mode
-                case THE_MAIDEN_OF_SUGADINTI_10815:
-                case THE_MAIDEN_OF_SUGADINTI_10816:
-                case THE_MAIDEN_OF_SUGADINTI_10817:
-                case THE_MAIDEN_OF_SUGADINTI_10818:
-                case THE_MAIDEN_OF_SUGADINTI_10819:
-                case THE_MAIDEN_OF_SUGADINTI_10822: //hard mode
-                case THE_MAIDEN_OF_SUGADINTI_10823:
-                case THE_MAIDEN_OF_SUGADINTI_10824:
-                case THE_MAIDEN_OF_SUGADINTI_10825:
-                case THE_MAIDEN_OF_SUGADINTI_10826:
-                case THE_MAIDEN_OF_SUGADINTI_10827:
-                    if (id == THE_MAIDEN_OF_SUGADINTI_8361 || id == THE_MAIDEN_OF_SUGADINTI_10815 || id == THE_MAIDEN_OF_SUGADINTI_10823) {
-                        maidenPhase = 70;
-                    } else if (id == THE_MAIDEN_OF_SUGADINTI_8362 || id == THE_MAIDEN_OF_SUGADINTI_10816 || id == THE_MAIDEN_OF_SUGADINTI_10824) {
-                        maidenPhase = 50;
-                    } else if (id == THE_MAIDEN_OF_SUGADINTI_8363 || id == THE_MAIDEN_OF_SUGADINTI_10817 || id == THE_MAIDEN_OF_SUGADINTI_10825) {
-                        maidenPhase = 30;
-                    }
-            }
-
-            if (npc.getId() == THE_MAIDEN_OF_SUGADINTI_8361) {
-                setThreshold.accept(0.5D);
-            }
-            if (npc.getId() == THE_MAIDEN_OF_SUGADINTI_8362) {
-                setThreshold.accept(0.3D);
-            }
-        }
-    }
-
-    @Subscribe
-    public void onMenuEntryAdded(MenuEntryAdded event) {
-        if(maidenActive && maidenNPC != null) {
-            MenuEntry mbEntry = event.getMenuEntry();
-            int type = event.getType();
-            if (type >= 2000) {
-                type -= 2000;
-            }
-
-            MenuAction menuAction = MenuAction.of(type);
-            if (NPC_MENU_ACTIONS.contains(menuAction) && event.getTarget().contains("Matomenos") && maidenCrabInfoList.size() > 0) {
-                NPC npc = client.getCachedNPCs()[event.getIdentifier()];
-                for (MaidenCrabInfo mci : maidenCrabInfoList){
-                    if (mci.crab == npc){
-                        double crabHealthPcent = ((double) mci.hpRatio / (double) mci.hpScale) * 100.0D;
-                        if (config.maidenRecolourNylos()) {
-                            Color color;
-                            MenuEntry[] menuEntries = client.getMenuEntries();
-                            MenuEntry menuEntry = menuEntries[menuEntries.length - 1];
-                            if (config.oldHpThreshold()) {
-                                color = plugin.oldHitpointsColor(crabHealthPcent);
-                            } else {
-                                color = plugin.calculateHitpointsColor(crabHealthPcent);
-                            }
-                            String crabHp = Double.toString(crabHealthPcent);
-                            if (crabHp.contains(".")) {
-                                crabHp = crabHp.substring(0, crabHp.indexOf(".") + 2);
-                            }
-                            String target = ColorUtil.prependColorTag(Text.removeTags(event.getTarget() + " - " + crabHp + "%"), color);
-                            menuEntry.setTarget(target);
-                            client.setMenuEntries(menuEntries);
-                        }
-                        break;
-                    }
-                }
-            }
-
-            if (event.getTarget().contains("Blood spawn") && event.getType() == MenuAction.NPC_SECOND_OPTION.getId()
-                    && (config.removeMaidenBloods() == SpoonTobConfig.maidenBloodsMode.ATTACK || config.removeMaidenBloods() == SpoonTobConfig.maidenBloodsMode.BOTH)) {
-                NPC npc = client.getCachedNPCs()[event.getIdentifier()];
-                if (npc != null) {
-                    mbEntry.setDeprioritized(true);
-                }
-            } else if (event.getTarget().contains("Blood spawn") && event.getTarget().contains("Ice B") && event.getType() == MenuAction.WIDGET_TARGET_ON_NPC.getId()
-                    && (config.removeMaidenBloods() == SpoonTobConfig.maidenBloodsMode.CAST || config.removeMaidenBloods() == SpoonTobConfig.maidenBloodsMode.BOTH)) {
-                NPC npc = client.getCachedNPCs()[event.getIdentifier()];
-                if (npc != null) {
-                    mbEntry.setDeprioritized(true);
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        Random rand = new Random();
-        float r = rand.nextFloat() / 2.0F;
-        float g = rand.nextFloat();
-        float b = rand.nextFloat();
-        c = new Color(r, g, b);
-        if (maidenActive) {
-            if (maidenNPC != null) {
-                --ticksUntilAttack;
-            }
-
-            if(crabTicksSinceSpawn > 0) {
-                crabTicksSinceSpawn--;
-            }
-
-            Iterator<NPC> it = frozenBloodSpawns.keySet().iterator();
-            while(it.hasNext()) {
-                NPC npc = it.next();
-                frozenBloodSpawns.replace(npc, frozenBloodSpawns.get(npc) - 1);
-                if (frozenBloodSpawns.get(npc) < -5) {
-                    it.remove();
-                }
-            }
-            maidenBloodSplatters.clear();
-            maidenBloodSplattersColors.clear();
-            for(GraphicsObject obj : client.getGraphicsObjects()){
-                if(obj.getId() == BLOOD_SPLAT_GRAPHIC) {
-                    maidenBloodSplatters.add(WorldPoint.fromLocal(client, obj.getLocation()));
-                    maidenBloodSplattersColors.add(Color.getHSBColor(new Random().nextFloat(), 1.0F, 1.0F));
-                }
-            }
-            maidenBloodSpawnTrailingLocations.clear();
-            maidenBloodSpawnTrailingLocations.addAll(maidenBloodSpawnLocations);
-            maidenBloodSpawnLocations.clear();
-            maidenSpawns.forEach((s) -> maidenBloodSpawnLocations.add(s.getWorldLocation()));
-
-            if (maidenCrabInfoList.size() > 0) {
-                if (nyloSpawnDelay == 0) {
-                    for (MaidenCrabInfo mci : maidenCrabInfoList) {
-                        if (mci.frozenTicks != -1) {
-                            mci.frozenTicks--;
-                        }
-                    }
-                } else {
-                    nyloSpawnDelay--;
-                }
-            }
-
-            if(maidenBloodSplatterProj.size() > 0){
-                for(int i=maidenBloodSplatterProj.size()-1; i>=0; i--){
-                    if(maidenBloodSplatterProj.get(i).projectile.getRemainingCycles() / 30 <= 0){
-                        maidenBloodSplatterProj.remove(i);
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onClientTick (ClientTick event)
-    {
-
-        if (maidenNPC != null && maidenActive)
-        {
-            int highestHP = 0;
-            int npcIndex = 0;
-            MenuEntry highestHpEntry = null;
-
-            //update HP's
-            maidenCrabInfoList.forEach(mci ->
-            {
-                if (maidenCrabInfoList.size() > 0 && nyloSpawnDelay == 0 && mci.crab.getHealthRatio() >= 0)
-                {
-                    mci.hpRatio = mci.crab.getHealthRatio();
-                    mci.hpScale = mci.crab.getHealthScale();
-                }
-            });
-
-            //gather the attack and cast entries for the red crabs you are currently hovering
-            MenuEntry[] npcEntries = Arrays.stream(client.getMenuEntries())
-                    .filter(menuEntry ->
-                            menuEntry.getTarget().contains("Nylocas Matomenos") && (menuEntry.getOption().contains("Attack") || menuEntry.getOption().contains("Cast")))
-                    .toArray(MenuEntry[]::new);
-
-            if (npcEntries.length > 1 && config.maidenCrabHpPriority())
-            {
-
-                //compile a list of crabs which your cursor is hovering over.
-                List<MaidenCrabInfo> clickableCrabs = maidenCrabInfoList.stream()
-                        .filter(mci -> Arrays.stream(npcEntries)
-                                .anyMatch(menuEntry -> menuEntry.getIdentifier() == mci.crab.getIndex()))
-                        .collect(Collectors.toList());
-
-                //calc the highest HP
-                for (MaidenCrabInfo mci : clickableCrabs)
-                {
-                    if (mci.hpRatio > highestHP || mci.hpRatio == -1)
-                    {
-                        highestHP = mci.hpRatio;
-                        npcIndex = mci.crab.getIndex();
-                    }
-                }
-
-                //sort for highest hpEntry
-                for (MenuEntry menuEntry : npcEntries)
-                {
-                    if (menuEntry.getIdentifier() == npcIndex)
-                    {
-                        highestHpEntry = menuEntry;
-                    }
-                }
-
-                //rebuild and set all other entries prioritised
-                if (highestHpEntry != null)
-                {
-                    MenuEntry[] newEntries = client.getMenuEntries();
-                    int index = Arrays.asList(client.getMenuEntries()).indexOf(highestHpEntry);
-                    for (int i = 0; i < newEntries.length; i++)
-                    {
-                        if (i != index)
-                        {
-                            newEntries[i] = newEntries[i].setDeprioritized(true);
-                        }
-                    }
-                    //set the new entries
-                    client.setMenuEntries(newEntries);
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onAnimationChanged(AnimationChanged event) {
-        Actor actor = event.getActor();
-        if(actor.getName() != null && maidenNPC != null && maidenActive){
-            if (actor.getName().equals("Nylocas Matomenos") && actor.getAnimation() == 8097) {
-                NPC npc = (NPC) actor;
-                for(int i=maidenCrabInfoList.size()-1; i>=0; i--){
-                    MaidenCrabInfo mci = maidenCrabInfoList.get(i);
-                    if(npc == mci.crab){
-                        NPCComposition nComp = maidenNPC.getComposition();
-                        int distance = npc.getWorldLocation().getX() - (maidenNPC.getWorldLocation().getX() + nComp.getSize());
-                        if((distance == -1 || distance == 0)  && (npc.getHealthRatio() > 0 || npc.getHealthRatio() == -1)){
-                            double crabHealthPcent = ((double) mci.hpRatio / (double) mci.hpScale) * 100.0D;
-                            String crabHp = String.valueOf(crabHealthPcent);
-                            crabHp = crabHp.substring(0, crabHp.indexOf(".") + 2) + "%";
-
-                            if(config.leakedMessage()) {
-                                String msg = "[<col=ff0000>" + mci.phase + "s</col>] The <col=ff0000>" + mci.position + "</col> crab leaked with <col=ff0000>" + crabHp;
-                                client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", msg, "");
-                            }
-                            if (distance == 0) {
-                                updateMaidenMaxHit();
-                            }
-                        }
-                        maidenCrabInfoList.remove(i);
-                        break;
-                    }
-                }
-            }else if(actor.getName().equals("The Maiden of Sugadinti")) {
-                if(actor.getAnimation() == 8091 || actor.getAnimation() == 8092) {
-                    if(ticksUntilAttack > 1 && maidenNPC.getId() >= 10822){
-                        maidenAttSpd -= (ticksUntilAttack - 1);
-                        if(maidenAttSpd < 3){
-                            maidenAttSpd = 3;
-                        }
-                    }
-                    ticksUntilAttack = maidenAttSpd + 1;
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGraphicChanged(GraphicChanged event) {
-        if (maidenActive && maidenNPC != null && event.getActor() instanceof NPC) {
-            NPC npc = (NPC) event.getActor();
-            int ticks = 0;
-            if (npc.getGraphic() == GraphicID.ICE_BARRAGE) {
-                ticks = 33;
-            } else if (npc.getGraphic() == GraphicID.ICE_BLITZ) {
-                ticks = 25;
-            } else if (npc.getGraphic() == GraphicID.ICE_BURST) {
-                ticks = 16;
-            } else if (npc.getGraphic() == GraphicID.ICE_RUSH) {
-                ticks = 8;
-            } else if (npc.getGraphic() == GraphicID.ENTANGLE) {
-                ticks = 24;
-            } else if (npc.getGraphic() == GraphicID.SNARE) {
-                ticks = 16;
-            } else if (npc.getGraphic() == GraphicID.BIND) {
-                ticks = 8;
-            }
-
-            if (npc.getName() != null && ticks > 0) {
-                if (config.bloodSpawnFreezeTimer() && npc.getName().equalsIgnoreCase("blood spawn")) {
-                    if (!frozenBloodSpawns.containsKey(npc)) {
-                        frozenBloodSpawns.put(npc, ticks);
-                    }
-                } else if (npc.getName().equalsIgnoreCase("nylocas matomenos")) {
-                    for (MaidenCrabInfo mci : maidenCrabInfoList) {
-                        if (mci.crab == npc && mci.frozenTicks == -1) {
-                            mci.frozenTicks = ticks;
-                            break;
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-
-
-    @Subscribe
-    public void onActorDeath(ActorDeath event) {
-        if(event.getActor() instanceof NPC && frozenBloodSpawns.containsKey((NPC)event.getActor())){
-            frozenBloodSpawns.remove((NPC)event.getActor());
-        }
-    }
-
-    @Subscribe
-    public void onProjectileMoved(ProjectileMoved event) {
-        if(event.getProjectile().getId() == BLOOD_SPLAT_PROJECTILE){
-            maidenBloodSplatterProj.add(new MaidenBloodSplatInfo(event.getProjectile(), event.getPosition()));
-        }
-    }
-
-    Color maidenSpecialWarningColor() {
-        Color col = Color.GREEN;
-        if (maidenNPC == null || maidenNPC.getInteracting() == null ||
-                maidenNPC.getInteracting().getName() == null || client.getLocalPlayer() == null) {
-            return col;
-        }
-
-        if (maidenNPC.getInteracting().getName().equals(client.getLocalPlayer().getName())) {
-            return Color.ORANGE;
-        }
-
-        return col;
-    }
-
-    private short getMaidenBaseHpIndex()
-    {
-        switch(SpoonTobPlugin.partySize)
-        {
-            case 4:
-                return 3062;
-            case 5:
-                return 3500;
-            default:
-                return 2625;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/PoisonWeaponMap.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonWeaponMap.java b/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonWeaponMap.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonWeaponMap.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,886 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import net.runelite.api.ItemID;
-
-import java.util.HashMap;
-
-public class PoisonWeaponMap
-{
-    public static HashMap<Integer, PoisonStyle> PoisonType = new HashMap<>();
-
-    static
-    {
-        //Melee
-        PoisonType.put(ItemID._3RD_AGE_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID._3RD_AGE_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID._3RD_AGE_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ABYSSAL_BLUDGEON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ABYSSAL_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ABYSSAL_DAGGER_P, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ABYSSAL_DAGGER_P_13269, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ABYSSAL_DAGGER_P_13271, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ABYSSAL_TENTACLE, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ABYSSAL_WHIP, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ABYSSAL_WHIP_20405, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_CANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_DAGGERP_5676, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_DAGGERP_5694, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_SPEARP_5712, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_SPEARP_5726, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ALE_OF_THE_GODS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANCIENT_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANGER_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANGER_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANGER_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANGER_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AMYS_SAW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARCEUUS_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARCLIGHT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARMADYL_GODSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARMADYL_GODSWORD_20593, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARMADYL_GODSWORD_22665, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARMADYL_GODSWORD_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ASSORTED_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BANDOS_GODSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BANDOS_GODSWORD_20782, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BANDOS_GODSWORD_21060, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BANDOS_GODSWORD_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BARBTAIL_HARPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BARRELCHEST_ANCHOR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BEACH_BOXING_GLOVES, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BEACH_BOXING_GLOVES_11706, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BIRTHDAY_BALLOONS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BIRTHDAY_CAKE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_CANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_DAGGERP_5682, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_DAGGERP_5700, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_SALAMANDER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_SPEARP_5734, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_SPEARP_5736, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25870, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25872, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25874, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25876, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25878, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25880, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLADE_OF_SAELDOR_C_25882, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLESSED_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLISTERWOOD_SICKLE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLUE_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLUE_FLOWERS_8936, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLURITE_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BONE_CLUB, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BONE_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BONE_DAGGER_P, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BONE_DAGGER_P_8876, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BONE_DAGGER_P_8878, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BONE_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOXING_GLOVES, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOXING_GLOVES_7673, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRINE_SABRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_DAGGERP_5670, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_DAGGERP_5688, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_SPEARP_5704, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_SPEARP_5718, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRUMA_TORCH, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BUTTERFLY_NET, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CANDY_CANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CATTLEPROD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CHAOTIC_HANDEGG, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CLEAVER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_HALBERD_ATTUNED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_HALBERD_BASIC, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_HALBERD_PERFECTED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_HARPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_SCEPTRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRIER_BELL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_AXE_23862, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_AXE_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_110, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_110_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_210, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_210_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_24125, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_310, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_310_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_410, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_410_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_510, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_510_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_610, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_610_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_710, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_710_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_810, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_810_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_910, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_910_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_ATTUNED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_BASIC, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_FULL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_FULL_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HALBERD_PERFECTED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HARPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HARPOON_23864, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_HARPOON_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_PICKAXE_23863, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_PICKAXE_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_SCEPTRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CURSED_GOBLIN_HAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARKLIGHT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DECORATIVE_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DECORATIVE_SWORD_4503, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DECORATIVE_SWORD_4508, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE_0, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE_100, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE_25, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE_25516, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE_50, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DHAROKS_GREATAXE_75, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DINHS_BULWARK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_2H_SWORD_20559, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_AXE_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_CANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_CLAWS_20784, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_DAGGER_20407, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_DAGGERP_5680, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_DAGGERP_5698, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_HARPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_HARPOON_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_HASTAKP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_HASTAP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_HASTAP_22737, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_HASTAP_22740, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_HUNTER_LANCE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_PICKAXE_12797, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_PICKAXE_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_PICKAXE_OR_25376, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_SCIMITAR_20406, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_SCIMITAR_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_SPEARP_5716, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_SPEARP_5730, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_WARHAMMER_20785, PoisonStyle.NOT);
-        PoisonType.put(ItemID.EASTER_BASKET, PoisonStyle.NOT);
-        PoisonType.put(ItemID.EGG_WHISK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ELDER_MAUL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ELDER_MAUL_21205, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ENCHANTED_LYRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ENCHANTED_LYRE1, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ENCHANTED_LYRE2, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ENCHANTED_LYRE3, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ENCHANTED_LYRE4, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ENCHANTED_LYRE5, PoisonStyle.NOT);
-        //PoisonType.put(ItemID.EVENT_RPG, PoisonStyle.NOT);
-        PoisonType.put(ItemID.EXCALIBUR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.EXCALIBUR_8280, PoisonStyle.NOT);
-        PoisonType.put(ItemID.FLAMTAER_HAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.FREMENNIK_BLADE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.FROZEN_ABYSSAL_WHIP, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GADDERHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GHRAZI_RAPIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GHRAZI_RAPIER_23628, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GILDED_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GILDED_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GILDED_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GILDED_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GLOWING_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GOLDEN_TENCH, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_HAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_MAUL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_MAUL_12848, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_MAUL_20557, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_MAUL_24225, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GRANITE_MAUL_24227, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GREEN_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHANS_WARSPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHANS_WARSPEAR_0, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHANS_WARSPEAR_100, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHANS_WARSPEAR_25, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHANS_WARSPEAR_50, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHANS_WARSPEAR_75, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HARRYS_CUTLASS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HAM_JOINT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HAND_FAN, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HILL_GIANT_CLUB, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_HANDEGG, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_GHRAZI_RAPIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_SCYTHE_OF_VITUR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_SCYTHE_OF_VITUR_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOSIDIUS_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_AXE_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_AXE_UNCHARGED_25371, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_HARPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_HARPOON_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_HARPOON_UNCHARGED_25367, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_PICKAXE_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INFERNAL_PICKAXE_UNCHARGED_25369, PoisonStyle.NOT);
-        PoisonType.put(ItemID.INQUISITORS_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_DAGGERP_5668, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_DAGGERP_5686, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_SPEARP_5706, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_SPEARP_5720, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.JADE_MACHETE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KATANA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KITCHEN_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KERIS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LARGE_SPADE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LEAFBLADED_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LEAFBLADED_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LEAFBLADED_SPEAR_4159, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LEAFBLADED_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LOVAKENGJ_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LUCKY_CUTLASS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LYRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MACHETE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_BUTTERFLY_NET, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_SECATEURS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_SECATEURS_NZ, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAPLE_BLACKJACK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAPLE_BLACKJACKD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAPLE_BLACKJACKO, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MEAT_TENDERISER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MERFOLK_TRIDENT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_DAGGERP_5674, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_DAGGERP_5692, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_SPEARP_5710, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_SPEARP_5724, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MIXED_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MOUSE_TOY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_HALBERD_FULL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_HALBERD_FULL_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_HALBERD_FULL_16893, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_HALBERD_FULL_I_16892, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NOOSE_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NUNCHAKU, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OAK_BLACKJACK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OAK_BLACKJACKD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OAK_BLACKJACKO, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OILY_FISHING_ROD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OILY_PEARL_FISHING_ROD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OPAL_MACHETE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ORANGE_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ORANGE_SALAMANDER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PEACEFUL_HANDEGG, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PET_ROCK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PISCARILIUS_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PROP_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PURPLE_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAPIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE_6774, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE_6775, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE_6776, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE_6777, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE_6778, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RAT_POLE_6779, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RED_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RED_FLOWERS_8938, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RED_SALAMANDER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RED_TOPAZ_MACHETE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROCK_HAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROYAL_SCEPTRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUBBER_CHICKEN, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUBBER_CHICKEN_22666, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_BATTLEAXE_20552, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_CANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_DAGGERP_5678, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_DAGGERP_5696, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SCIMITAR_20402, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SCIMITAR_23330, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SCIMITAR_23332, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SCIMITAR_23334, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_SPEARP_5714, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_SPEARP_5728, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SANGUINE_SCYTHE_OF_VITUR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SANGUINE_SCYTHE_OF_VITUR_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMINS_BLESSED_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMIN_GODSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMIN_GODSWORD_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMIN_MJOLNIR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMIN_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARAS_BLESSED_SWORD_FULL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SCYTHE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SCYTHE_OF_VITUR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SCYTHE_OF_VITUR_22664, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SCYTHE_OF_VITUR_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SEVERED_LEG_24792, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SHADOW_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SHAYZIEN_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SILVERLIGHT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SILVERLIGHT_6745, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SILVERLIGHT_8279, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SILVER_SICKLE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SILVER_SICKLE_B, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SNOWBALL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STALE_BAGUETTE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STATIUSS_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STATIUSS_WARHAMMER_23620, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_DAGGERP_5672, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_DAGGERP_5690, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_SPEARP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_SPEARP_5708, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_SPEARP_5722, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STONE_BOWL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SWAMP_LIZARD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SWIFT_BLADE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOKTZXILAK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOKTZXILAK_20554, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOKTZXILEK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TORAGS_HAMMERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TORAGS_HAMMERS_0, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TORAGS_HAMMERS_100, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TORAGS_HAMMERS_25, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TORAGS_HAMMERS_50, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TORAGS_HAMMERS_75, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAINING_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_ADAMANT_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_BRONZE_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_CANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_DRAGON_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_HARPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_IRON_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_MITHRIL_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_PICKAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_RUNE_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAILBLAZER_STEEL_TROPHY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TROLLWEISS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TWISTED_BANNER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TZHAARKETEM, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TZHAARKETOM, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TZHAARKETOM_T, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VERACS_FLAIL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VERACS_FLAIL_0, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VERACS_FLAIL_100, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VERACS_FLAIL_25, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VERACS_FLAIL_50, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VERACS_FLAIL_75, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VESTAS_BLIGHTED_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VESTAS_LONGSWORD_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VESTAS_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VESTAS_LONGSWORD_23615, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VESTAS_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VIGGORAS_CHAINMACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VIGGORAS_CHAINMACE_U, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VOLCANIC_ABYSSAL_WHIP, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WESTERN_BANNER_1, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WESTERN_BANNER_2, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WESTERN_BANNER_3, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WESTERN_BANNER_4, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_2H_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_BATTLEAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_CLAWS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_DAGGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_DAGGERP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.WHITE_DAGGERP_6595, PoisonStyle.POISON);
-        PoisonType.put(ItemID.WHITE_DAGGERP_6597, PoisonStyle.POISON);
-        PoisonType.put(ItemID.WHITE_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_HALBERD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_LONGSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_SCIMITAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_WARHAMMER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILDERNESS_SWORD_1, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILDERNESS_SWORD_2, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILDERNESS_SWORD_3, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILDERNESS_SWORD_4, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILLOW_BLACKJACK, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILLOW_BLACKJACKD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILLOW_BLACKJACKO, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WOLFBANE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WOODEN_SPOON, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WOODEN_SWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.YELLOW_FLOWERS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZAMORAKIAN_HASTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZAMORAKIAN_SPEAR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZAMORAK_GODSWORD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZAMORAK_GODSWORD_OR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZOMBIE_HEAD, PoisonStyle.NOT);
-        PoisonType.put(-1, PoisonStyle.NOT); //hands and feet
-
-        //Ranged
-        PoisonType.put(ItemID._3RD_AGE_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_DARTP_5633, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_DARTP_5640, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ADAMANT_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_KNIFEP_5659, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_KNIFEP_5666, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ADAMANT_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AMETHYST_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AMETHYST_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.AMETHYST_DARTP_25855, PoisonStyle.POISON);
-        PoisonType.put(ItemID.AMETHYST_DARTP_25857, PoisonStyle.POISON);
-        PoisonType.put(ItemID.ARMADYL_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARMADYL_CROSSBOW_23611, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_CHINCHOMPA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_DARTP_5631, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_DARTP_5638, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLACK_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_KNIFEP_5658, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLACK_KNIFEP_5665, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BLURITE_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_DARTP_5628, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_DARTP_5635, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRONZE_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_KNIFEP_5654, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_KNIFEP_5661, PoisonStyle.POISON);
-        PoisonType.put(ItemID.BRONZE_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25869, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25884, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25886, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25888, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25890, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25892, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25894, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BOW_OF_FAERDHINEN_C_25896, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CHINCHOMPA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CHINCHOMPA_10033, PoisonStyle.NOT);
-        PoisonType.put(ItemID.COMP_OGRE_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_BOW_ATTUNED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_BOW_BASIC, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_BOW_PERFECTED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRAWS_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRAWS_BOW_U, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_110, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_110_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_210, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_210_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_310, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_310_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_410, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_410_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_510, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_510_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_610, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_610_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_710, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_710_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_810, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_810_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_910, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_910_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_24123, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_ATTUNED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_BASIC, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_FULL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_FULL_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_INACTIVE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_BOW_PERFECTED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CURSED_GOBLIN_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_BOW_12765, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_BOW_12766, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_BOW_12767, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_BOW_12768, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DARK_BOW_20408, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DORGESHUUN_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_DARTP_11233, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_DARTP_11234, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_HUNTER_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAGON_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_KNIFEP_22808, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_KNIFEP_22810, PoisonStyle.POISON);
-        PoisonType.put(ItemID.DRAGON_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HEAVY_BALLISTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HEAVY_BALLISTA_23630, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_WATER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HUNTERS_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_DART_P, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_DARTP_5636, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_KNIFEP, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IRON_KNIFEP_5655, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_KNIFEP_5662, PoisonStyle.POISON);
-        PoisonType.put(ItemID.IRON_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KARILS_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KARILS_CROSSBOW_0, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KARILS_CROSSBOW_100, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KARILS_CROSSBOW_25, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KARILS_CROSSBOW_50, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KARILS_CROSSBOW_75, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LIGHT_BALLISTA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LONGBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_COMP_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_LONGBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_SHORTBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_SHORTBOW_20558, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_SHORTBOW_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAPLE_LONGBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAPLE_SHORTBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_DARTP_5632, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_DARTP_5639, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_KNIFEP_5657, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_KNIFEP_5664, PoisonStyle.POISON);
-        PoisonType.put(ItemID.MITHRIL_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MITHRIL_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MONKEY_TALISMAN, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MORRIGANS_JAVELIN, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MORRIGANS_JAVELIN_23619, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MORRIGANS_THROWING_AXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MUD_PIE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_BOW_4213, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_BOW_16888, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_BOW_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NEW_CRYSTAL_BOW_I_16889, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OAK_LONGBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OAK_SHORTBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.OGRE_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHOENIX_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RED_CHINCHOMPA, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RED_CHINCHOMPA_10034, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_CROSSBOW_23601, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_DARTP_5634, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_DARTP_5641, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.RUNE_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_KNIFEP_5660, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_KNIFEP_5667, PoisonStyle.POISON);
-        PoisonType.put(ItemID.RUNE_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SEERCULL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SHORTBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SIGNED_OAK_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STARTER_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_CROSSBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_DART, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_DARTP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_DARTP_5630, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_DARTP_5637, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_KNIFE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEEL_KNIFEP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_KNIFEP_5656, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_KNIFEP_5663, PoisonStyle.POISON);
-        PoisonType.put(ItemID.STEEL_THROWNAXE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOKTZXILUL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOXIC_BLOWPIPE, PoisonStyle.POISON);
-        PoisonType.put(ItemID.TOXIC_BLOWPIPE_EMPTY, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRAINING_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TWISTED_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILLOW_COMP_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILLOW_LONGBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WILLOW_SHORTBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.YEW_COMP_BOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.YEW_LONGBOW, PoisonStyle.NOT);
-        PoisonType.put(ItemID.YEW_SHORTBOW, PoisonStyle.NOT);
-
-        //Magic
-        PoisonType.put(ItemID._3RD_AGE_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF_0, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF_100, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF_25, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF_50, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF_75, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AHRIMS_STAFF_23653, PoisonStyle.NOT);
-        PoisonType.put(ItemID.AIR_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANCIENT_CROZIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ANCIENT_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.APPRENTICE_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ARMADYL_CROZIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BANDOS_CROZIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BEGINNER_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BLISTERWOOD_FLAIL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BROKEN_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRYOPHYTAS_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.BRYOPHYTAS_STAFF_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_STAFF_ATTUNED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_STAFF_BASIC, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CORRUPTED_STAFF_PERFECTED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_STAFF_ATTUNED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_STAFF_BASIC, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CRYSTAL_STAFF_PERFECTED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.CURSED_GOBLIN_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DAWNBRINGER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DRAMEN_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.DUST_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.EARTH_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ELDRITCH_NIGHTMARE_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.FIRE_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHIX_CROZIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.GUTHIX_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HARMONISED_NIGHTMARE_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_SANGUINESTI_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.HOLY_SANGUINESTI_STAFF_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IBANS_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IBANS_STAFF_1410, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IBANS_STAFF_U, PoisonStyle.NOT);
-        PoisonType.put(ItemID.IVANDIS_FLAIL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KODAI_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.KODAI_WAND_23626, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LAVA_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LAVA_BATTLESTAFF_21198, PoisonStyle.NOT);
-        PoisonType.put(ItemID.LUNAR_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MAGIC_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MASTER_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MASTER_WAND_20560, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MIST_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MUD_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_AIR_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_DUST_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_EARTH_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_FIRE_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_LAVA_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_LAVA_STAFF_21200, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_MIST_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_MUD_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_SMOKE_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_STEAM_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_STEAM_STAFF_12796, PoisonStyle.NOT);
-        PoisonType.put(ItemID.MYSTIC_WATER_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.NIGHTMARE_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9045, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9046, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9047, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9048, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9049, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9050, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_9051, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_13074, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_13075, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_13077, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_13078, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_16176, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_21445, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_21446, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_26948, PoisonStyle.NOT);
-        PoisonType.put(ItemID.PHARAOHS_SCEPTRE_26950, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_1, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_10, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_2, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_3, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_4, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_5, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_6, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_7, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_8, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ROD_OF_IVANDIS_9, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SANGUINESTI_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SANGUINESTI_STAFF_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMIN_CROZIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SARADOMIN_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SKULL_SCEPTRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SKULL_SCEPTRE_I, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SLAYERS_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SLAYERS_STAFF_E, PoisonStyle.NOT);
-        PoisonType.put(ItemID.SMOKE_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_AIR, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_BALANCE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_BOB_THE_CAT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_EARTH, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_FIRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_LIGHT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_THE_DEAD, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_THE_DEAD_23613, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STAFF_OF_WATER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STARTER_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEAM_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.STEAM_BATTLESTAFF_12795, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TEACHER_WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.THAMMARONS_SCEPTRE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.THAMMARONS_SCEPTRE_U, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOKTZMEJTAL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TOXIC_STAFF_OF_THE_DEAD, PoisonStyle.POISON);
-        PoisonType.put(ItemID.TOXIC_STAFF_UNCHARGED, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRIDENT_OF_THE_SEAS, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRIDENT_OF_THE_SEAS_E, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRIDENT_OF_THE_SEAS_FULL, PoisonStyle.NOT);
-        PoisonType.put(ItemID.TRIDENT_OF_THE_SWAMP, PoisonStyle.POISON);
-        PoisonType.put(ItemID.TRIDENT_OF_THE_SWAMP_E, PoisonStyle.POISON);
-        PoisonType.put(ItemID.UNCHARGED_TOXIC_TRIDENT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.UNCHARGED_TOXIC_TRIDENT_E, PoisonStyle.NOT);
-        PoisonType.put(ItemID.UNCHARGED_TRIDENT, PoisonStyle.NOT);
-        PoisonType.put(ItemID.UNCHARGED_TRIDENT_E, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VOID_KNIGHT_MACE, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VOID_KNIGHT_MACE_BROKEN, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VOLATILE_NIGHTMARE_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.VOLATILE_NIGHTMARE_STAFF_25517, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WAND, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WATER_BATTLESTAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.WHITE_MAGIC_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZAMORAK_CROZIER, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZAMORAK_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZURIELS_STAFF, PoisonStyle.NOT);
-        PoisonType.put(ItemID.ZURIELS_STAFF_23617, PoisonStyle.NOT);
-        //what the fuck...
-        PoisonType.put(ItemID.GNOMEBALL, PoisonStyle.NOT);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusTimer.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusTimer.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusTimer.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusTimer.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,44 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Xarpus;
-
-import net.runelite.api.Client;
-import net.runelite.api.MenuAction;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayMenuEntry;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.components.LineComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class XarpusTimer extends OverlayPanel {
-    private final Client client;
-    private final SpoonTobPlugin plugin;
-    private final SpoonTobConfig config;
-    private Xarpus xarpus;
-
-    @Inject
-    public XarpusTimer(Client client, SpoonTobPlugin plugin, SpoonTobConfig config, Xarpus xarpus) {
-        super(plugin);
-        this.client = client;
-        this.xarpus = xarpus;
-        this.plugin = plugin;
-        this.config = config;
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, "Configure", "Theatre xarpus overlay"));
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        panelComponent.getChildren().clear();
-        if (config.entryInstanceTimer() == SpoonTobConfig.instancerTimerMode.OVERLAY && xarpus.isInstanceTimerRunning() && !xarpus.isExhumedSpawned()
-                && xarpus.isInXarpusRegion()) {
-            panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth("Tick:   ") + 10, 0));
-            panelComponent.getChildren().add(LineComponent.builder()
-                    .left("Tick: ")
-                    .right(String.valueOf(xarpus.getInstanceTimer()))
-                    .build());
-        }
-        return super.render(graphics);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasSpawnPoint.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasSpawnPoint.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasSpawnPoint.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasSpawnPoint.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,39 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import lombok.Getter;
-import net.runelite.api.Point;
-
-import java.util.HashMap;
-
-enum NylocasSpawnPoint {
-    WEST_NORTH(new Point(17, 25)),
-    WEST_SOUTH(new Point(17, 24)),
-    SOUTH_WEST(new Point(31, 9)),
-    SOUTH_EAST(new Point(32, 9)),
-    EAST_SOUTH(new Point(46, 24)),
-    EAST_NORTH(new Point(46, 25)),
-    EAST_BIG(new Point(47, 25)),
-    WEST_BIG(new Point(18, 25)),
-    SOUTH_BIG(new Point(32, 10));
-
-    @Getter
-    private Point point;
-
-    @Getter
-    private static final HashMap<Point, NylocasSpawnPoint> lookupMap;
-
-    static
-    {
-        lookupMap = new HashMap<>();
-
-        for (NylocasSpawnPoint v : NylocasSpawnPoint.values())
-        {
-            lookupMap.put(v.getPoint(), v);
-        }
-    }
-
-    NylocasSpawnPoint(Point point)
-    {
-        this.point = point;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionBox.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionBox.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionBox.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionBox.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,51 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import lombok.Getter;
-import lombok.Setter;
-import net.runelite.client.ui.overlay.Overlay;
-import net.runelite.client.ui.overlay.components.InfoBoxComponent;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Graphics2D;
-
-import java.awt.*;
-
-public class NyloSelectionBox extends Overlay {
-    private final InfoBoxComponent component;
-
-    @Getter
-    @Setter
-    private boolean isSelected = false;
-
-    @Getter
-    @Setter
-    private boolean isHovered = false;
-
-    public NyloSelectionBox(InfoBoxComponent component)
-    {
-        this.component = component;
-    }
-
-    @Override
-    public Dimension render(Graphics2D graphics) {
-        if (isSelected) {
-            component.setColor(Color.GREEN);
-            component.setText("On");
-        } else {
-            component.setColor(Color.RED);
-            component.setText("Off");
-        }
-
-        Dimension result = component.render(graphics);
-
-        if (isHovered) {
-            Color color = graphics.getColor();
-            graphics.setColor(new Color(200, 200, 200));
-            graphics.drawRect(component.getBounds().x, component.getBounds().y, component.getBounds().width, component.getBounds().height);
-            graphics.setColor(color);
-        }
-
-        return result;
-    }
-
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/Sotetseg.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/Sotetseg.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/Sotetseg.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/Sotetseg.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,368 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Sotetseg;
-
-import lombok.Getter;
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.*;
-import net.runelite.client.plugins.zulrahoverlay.ZulrahPlugin;
-import net.runelite.client.util.Text;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.events.ConfigChanged;
-import net.runelite.client.game.SkillIconManager;
-import net.runelite.client.plugins.spoontob.Room;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
-import net.runelite.client.util.ImageUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import javax.sound.sampled.*;
-import javax.sound.sampled.DataLine.Info;
-import javax.sound.sampled.FloatControl.Type;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.io.BufferedInputStream;
-import java.util.*;
-
-import static net.runelite.api.NpcID.*;
-
-public class Sotetseg extends Room {
-    private static final Logger log = LoggerFactory.getLogger(Sotetseg.class);
-    @Inject
-    private Client client;
-    @Inject
-    private InfoBoxManager infoBoxManager;
-    @Inject
-    private SotetsegOverlay sotetsegOverlay;
-    @Inject
-    private DeathBallPanel deathBallPanel;
-    @Inject
-    private SkillIconManager iconManager;
-
-    static final int SOTETSEG_MAGE_ORB = 1606;
-    static final int SOTETSEG_RANGE_ORB = 1607;
-    static final int SOTETSEG_BIG_AOE_ORB = 1604;
-
-    private static final int GROUNDOBJECT_ID_REDMAZE = 33035;
-    private static final int GROUNDOBJECT_ID_BLACKMAZE = 33034;
-    private static final int GROUNDOBJECT_ID_GREYMAZE = 33033;
-
-    private static final int OVERWORLD_REGION_ID = 13123;
-    private static final int UNDERWORLD_REGION_ID = 13379;
-    @Getter
-    private static final Point swMazeSquareOverWorld = new Point(9, 22);
-    @Getter
-    private static final Point swMazeSquareUnderWorld = new Point(42, 31);
-
-    private boolean bigOrbPresent = false;
-    private static Clip clip;
-    static BufferedImage TACTICAL_NUKE_OVERHEAD;
-    private static BufferedImage TACTICAL_NUKE_SHEET;
-    private static BufferedImage TACTICAL_NUKE_SHEET_BLANK;
-    private String currentTopic = null;
-
-    @Getter
-    private boolean sotetsegActive;
-    public NPC sotetsegNPC;
-
-    private int overWorldRegionID = -1;
-    @Getter
-    private boolean wasInUnderWorld = false;
-    @Getter
-    private LinkedHashSet<Point> redTiles = new LinkedHashSet();
-    @Getter
-    private HashSet<Point> greenTiles = new HashSet();
-
-    @Getter
-    public byte sotetsegTicks = -1;
-    public boolean ballOutNigga = false;
-    public int turboHatWidth = 0;
-    public int turboHatHeight = 0;
-
-    public int sotetsegAttacksLeft = 10;
-
-    private boolean offTick = false;
-
-    public int mageHatNum = 0;
-    public int rangeHatNum = 0;
-    public BufferedImage mageIcon;
-    public BufferedImage rangeIcon;
-
-    @Inject
-    protected Sotetseg(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin, config);
-    }
-
-    public void init() {
-        TACTICAL_NUKE_SHEET = ImageUtil.loadImageResource(SpoonTobPlugin.class, "nuke_spritesheet.png");
-        TACTICAL_NUKE_OVERHEAD = ImageUtil.loadImageResource(SpoonTobPlugin.class, "Tactical_Nuke_Care_Package_Icon_MW2.png");
-        TACTICAL_NUKE_SHEET_BLANK = new BufferedImage(TACTICAL_NUKE_SHEET.getWidth(), TACTICAL_NUKE_SHEET.getHeight(), TACTICAL_NUKE_SHEET.getType());
-        Graphics2D graphics = TACTICAL_NUKE_SHEET_BLANK.createGraphics();
-        graphics.setColor(new Color(0, 0, 0, 0));
-        graphics.fillRect(0, 0, TACTICAL_NUKE_SHEET.getWidth(), TACTICAL_NUKE_SHEET.getHeight());
-        graphics.dispose();
-
-        try {
-            AudioInputStream stream = AudioSystem.getAudioInputStream(new BufferedInputStream(SpoonTobPlugin.class.getResourceAsStream("mw2_tactical_nuke.wav")));
-            AudioFormat format = stream.getFormat();
-            Info info = new Info(Clip.class, format);
-            clip = (Clip)AudioSystem.getLine(info);
-            clip.open(stream);
-            FloatControl control = (FloatControl)clip.getControl(Type.MASTER_GAIN);
-            if (control != null) {
-                control.setValue(20.0F * (float)Math.log10((float)config.sotetsegAttacksSoundVolume() / 100.0F));
-            }
-        } catch (Exception var6) {
-            clip = null;
-        }
-
-    }
-
-    public void load() {
-        overlayManager.add(sotetsegOverlay);
-        overlayManager.add(deathBallPanel);
-        loadImages(config.soteHatSize());
-    }
-
-    public void unload() {
-        overlayManager.remove(sotetsegOverlay);
-        overlayManager.remove(deathBallPanel);
-    }
-
-    private void loadImages(int imageSize) {
-        mageIcon = ImageUtil.resizeImage(iconManager.getSkillImage(Skill.MAGIC, true), imageSize, imageSize);
-        rangeIcon = ImageUtil.resizeImage(iconManager.getSkillImage(Skill.RANGED, true), imageSize, imageSize);
-    }
-
-    @Subscribe
-    public void onConfigChanged(ConfigChanged change) {
-        if (change.getGroup().equals("spoontob")) {
-            FloatControl control;
-            if (change.getKey().equals("SotetsegAttacksSoundsVolume") && clip != null && (control = (FloatControl) clip.getControl(Type.MASTER_GAIN)) != null) {
-                control.setValue(20.0F * (float) Math.log10((double) ((float) config.sotetsegAttacksSoundVolume() / 100.0F)));
-            } else if (change.getKey().equals("soteHatSize")) {
-                loadImages(config.soteHatSize());
-            }
-        }
-    }
-
-    @Subscribe
-    public void onNpcSpawned(NpcSpawned npcSpawned) {
-        NPC npc = npcSpawned.getNpc();
-        switch(npc.getId()) {
-            case SOTETSEG:
-            case SOTETSEG_8388:
-            case SOTETSEG_10864: //Story mode
-            case SOTETSEG_10865:
-            case SOTETSEG_10867: //Hard Mode
-            case SOTETSEG_10868:
-                sotetsegNPC = npc;
-                if(!sotetsegActive) {
-                    sotetsegActive = true;
-                    sotetsegAttacksLeft = 10;
-                }
-                break;
-        }
-    }
-
-    @Subscribe
-    public void onNpcDespawned(NpcDespawned npcDespawned) {
-        NPC npc = npcDespawned.getNpc();
-        switch(npc.getId()) {
-            case SOTETSEG:
-            case SOTETSEG_8388:
-            case SOTETSEG_10864: //Story mode
-            case SOTETSEG_10865:
-            case SOTETSEG_10867: //Hard Mode
-            case SOTETSEG_10868:
-                if (client.getPlane() != 3) {
-                    sotetsegActive = false;
-                    sotetsegNPC = null;
-                    sotetsegTicks = -1;
-                }
-                if (npc.isDead()){
-                    sotetsegAttacksLeft = 10;
-                }
-                break;
-        }
-    }
-
-    @Subscribe
-    public void onProjectileMoved(ProjectileMoved e)
-    {
-        if (sotetsegActive) {
-            Projectile p = e.getProjectile();
-            if (client.getGameCycle() < p.getStartCycle()) {
-                switch (p.getId())
-                {
-                    case SOTETSEG_BIG_AOE_ORB:
-                        sotetsegTicks = 11;
-                        sotetsegAttacksLeft = 10;
-                        break;
-                    case SOTETSEG_MAGE_ORB:
-                        WorldPoint soteWp = WorldPoint.fromLocal(client, sotetsegNPC.getLocalLocation());
-                        WorldPoint projWp = WorldPoint.fromLocal(client, p.getX1(), p.getY1(), client.getPlane());
-                        if (sotetsegNPC.getAnimation() == 8139 && projWp.equals(soteWp)) {
-                            sotetsegAttacksLeft--;
-                        }
-                }
-            }
-        }
-    }
-
-
-    @Subscribe
-    public void onAnimationChanged(AnimationChanged event) {
-        Actor actor = event.getActor();
-        if (actor instanceof NPC) {
-            if (actor == sotetsegNPC) {
-                int animation = event.getActor().getAnimation();
-                if (animation == 8138 || animation == 8139) {
-                    sotetsegTicks = 6;
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        if (sotetsegActive) {
-            int rng = new Random().nextInt(8) + 1;
-            if(mageHatNum == rng){
-                if(mageHatNum == 8){
-                    mageHatNum = 7;
-                }else {
-                    mageHatNum++;
-                }
-            }else{
-                mageHatNum = rng;
-            }
-
-            if(rangeHatNum == rng){
-                if(rangeHatNum == 8){
-                    rangeHatNum = 7;
-                }else {
-                    rangeHatNum++;
-                }
-            }else{
-                rangeHatNum = rng;
-            }
-            turboHatWidth = new Random().nextInt(35) + 10;
-            turboHatHeight = new Random().nextInt(25) + 10;
-
-            if (sotetsegTicks >= 0) {
-                --sotetsegTicks;
-            }
-
-            if (sotetsegNPC != null && (sotetsegNPC.getId() == 8388 || sotetsegNPC.getId() == 10865 || sotetsegNPC.getId() == 10868)) {
-                if (!redTiles.isEmpty())
-                {
-                    redTiles.clear();
-                    offTick = false;
-                }
-
-                if (!greenTiles.isEmpty())
-                {
-                    greenTiles.clear();
-                }
-
-                if (isInOverWorld())
-                {
-                    wasInUnderWorld = false;
-                    if (client.getLocalPlayer() != null && client.getLocalPlayer().getWorldLocation() != null)
-                    {
-                        overWorldRegionID = client.getLocalPlayer().getWorldLocation().getRegionID();
-                    }
-                }
-            }
-
-            if (config.sotetsegShowNuke() != SpoonTobConfig.soteDeathballOverlayMode.OFF)
-            {
-                boolean foundBigOrb = false;
-                for (Projectile p : client.getProjectiles())
-                {
-                    if (p.getId() == SOTETSEG_BIG_AOE_ORB)
-                    {
-                        foundBigOrb = true;
-                        if (!bigOrbPresent && clip != null && config.sotetsegAttacksSound()) {
-                            clip.setFramePosition(0);
-                            clip.start();
-                        }
-                        break;
-                    }
-                }
-                bigOrbPresent = foundBigOrb;
-            }
-
-            if (!bigOrbPresent)
-            {
-                ballOutNigga = false;
-            }
-
-            if (bigOrbPresent && !ballOutNigga)
-            {
-                sotetsegTicks = 10;
-                ballOutNigga = true;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGroundObjectSpawned(GroundObjectSpawned event) {
-        if (sotetsegActive) {
-            GroundObject o = event.getGroundObject();
-
-            if (o.getId() == GROUNDOBJECT_ID_REDMAZE) {
-                Tile t = event.getTile();
-                WorldPoint p = WorldPoint.fromLocal(client, t.getLocalLocation());
-                Point point = new Point(p.getRegionX(), p.getRegionY());
-                if (isInOverWorld()) {
-                    redTiles.add(new Point(point.getX() - swMazeSquareOverWorld.getX(), point.getY() - swMazeSquareOverWorld.getY()));
-                }
-                if (isInUnderWorld()) {
-                    redTiles.add(new Point(point.getX() - swMazeSquareUnderWorld.getX(), point.getY() - swMazeSquareUnderWorld.getY()));
-                    wasInUnderWorld = true;
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onMenuEntryAdded(MenuEntryAdded event) {
-        if (!isInOverWorld())
-            return;
-        if (client.getItemContainer(InventoryID.INVENTORY) == null)
-            return;
-        String target = Text.removeTags(event.getTarget()).toLowerCase();
-        MenuEntry[] entries = client.getMenuEntries();
-        if (((config.stamReq() == SpoonTobConfig.stamReqMode.XARPUS || config.stamReq() == SpoonTobConfig.stamReqMode.BOTH) && config.stamReq() != SpoonTobConfig.stamReqMode.OFF)
-                && target.contains("formidable passage") && !client.getItemContainer(InventoryID.INVENTORY).contains(12625))
-            client.setMenuEntries(Arrays.copyOf(entries, entries.length - 1));
-    }
-
-    WorldPoint worldPointFromMazePoint(Point mazePoint)
-    {
-        if (overWorldRegionID == -1 && client.getLocalPlayer() != null)
-        {
-            return WorldPoint.fromRegion(
-                    client.getLocalPlayer().getWorldLocation().getRegionID(), mazePoint.getX() + Sotetseg.getSwMazeSquareOverWorld().getX(),
-                    mazePoint.getY() + Sotetseg.getSwMazeSquareOverWorld().getY(), 0);
-        }
-        return WorldPoint.fromRegion(
-                overWorldRegionID, mazePoint.getX() + Sotetseg.getSwMazeSquareOverWorld().getX(),
-                mazePoint.getY() + Sotetseg.getSwMazeSquareOverWorld().getY(), 0);
-    }
-
-
-    private boolean isInOverWorld() {
-        return client.getMapRegions().length > 0 && client.getMapRegions()[0] == OVERWORLD_REGION_ID;
-    }
-
-    private boolean isInUnderWorld() {
-        return client.getMapRegions().length > 0 && client.getMapRegions()[0] == UNDERWORLD_REGION_ID;
-    }
-}
-    
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/ColorsUtil.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/ColorsUtil.java b/src/main/java/net/runelite/client/plugins/spoontob/util/ColorsUtil.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/ColorsUtil.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,27 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import java.awt.*;
-
-public class ColorsUtil {
-    public static int RGBtoRS2HSB(int r, int g, int b) {
-        float[] HSB = Color.RGBtoHSB(r, g, b, (float[])null);
-        float hue = HSB[0];
-        float saturation = HSB[1];
-        HSB[2] -= Math.min(hue, HSB[2] / 2.0F);
-        float brightness = HSB[2];
-        int encode_hue = (int)(hue * 63.0F);
-        int encode_saturation = (int)(saturation * 7.0F);
-        int encode_brightness = (int)(brightness * 127.0F);
-        return (encode_hue << 10) + (encode_saturation << 7) + encode_brightness;
-    }
-
-    public static int RS2HSBtoRGB(int rs2HSB) {
-        int decode_hue = rs2HSB >> 10 & 63;
-        int decode_saturation = rs2HSB >> 7 & 7;
-        int decode_brightness = rs2HSB & 127;
-        float hue = (float)decode_hue / 63.0F;
-        float saturation = (float)decode_saturation / 7.0F;
-        float brightness = (float)decode_brightness / 127.0F;
-        return Color.HSBtoRGB(hue, saturation, brightness);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/TornadoTracker.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/TornadoTracker.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/TornadoTracker.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/TornadoTracker.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,29 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import lombok.AccessLevel;
-import lombok.Getter;
-import lombok.Setter;
-import net.runelite.api.NPC;
-import net.runelite.api.coords.WorldPoint;
-
-@Getter(AccessLevel.PACKAGE)
-public class TornadoTracker {
-    @Getter(AccessLevel.PACKAGE)
-    private NPC npc;
-
-    @Getter(AccessLevel.PACKAGE)
-    @Setter(AccessLevel.PACKAGE)
-    private WorldPoint prevLoc;
-
-    TornadoTracker(final NPC npc){
-        this.npc = npc;
-        prevLoc = null;
-    }
-
-    public int checkMovement(WorldPoint playerWp, WorldPoint nadoWp){
-        if (prevLoc == null || nadoWp == null || prevLoc.distanceTo(nadoWp) == 0){
-            return -1;
-        }
-        return playerWp.distanceTo(nadoWp) - playerWp.distanceTo(prevLoc);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatDown.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatDown.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatDown.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatDown.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,93 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp;
-
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.BloatChunk;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.BloatPath;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.BloatRotation;
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.Table;
-import net.runelite.api.Client;
-import net.runelite.api.coords.Direction;
-import net.runelite.api.coords.WorldArea;
-import net.runelite.api.coords.WorldPoint;
-import org.apache.commons.lang3.tuple.ImmutablePair;
-import org.apache.commons.lang3.tuple.Pair;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.annotation.Nonnull;
-import java.util.function.Supplier;
-
-public final class BloatDown {
-    private static final Logger log = LoggerFactory.getLogger(BloatDown.class);
-    private final WorldPoint destination;
-    private final BloatSafespot bloatSafespot;
-    private static final Table<BloatChunk, Direction, Pair<BloatPath, BloatRotation>> chunkTable = HashBasedTable.create();
-
-    public BloatDown(@Nonnull Client client, @Nonnull WorldPoint sw, @Nonnull Direction dir, @Nonnull BloatChunk chunk) {
-        this.destination = getFinalDestination(client, sw, () -> {
-            int[] offsets = new int[2];
-            switch(dir) {
-                case NORTH:
-                    offsets[1] = 1;
-                    break;
-                case EAST:
-                    offsets[0] = 1;
-                    break;
-                case SOUTH:
-                    offsets[1] = -1;
-                    break;
-                case WEST:
-                    offsets[0] = -1;
-            }
-
-            return offsets;
-        });
-        this.bloatSafespot = new BloatSafespot(chunkTable.get(chunk, dir), () -> {
-            int off = dir != Direction.NORTH && dir != Direction.EAST ? 0 : 4;
-            return Math.max(sw.distanceTo2D(this.destination) - off, 0);
-        });
-    }
-
-    private static WorldPoint getFinalDestination(Client client, WorldPoint start, Supplier<int[]> offsetsSupplier) {
-        int[] offsets = offsetsSupplier.get();
-        WorldPoint wl = start;
-
-        for(WorldArea wa = new WorldArea(start, 1, 1); wa.canTravelInDirection(client, offsets[0], offsets[1]); wa = new WorldArea(wl, 1, 1)) {
-            wl = wa.toWorldPoint().dx(offsets[0]).dy(offsets[1]);
-        }
-
-        return wl;
-    }
-
-    public WorldPoint getDestination() {
-        return this.destination;
-    }
-
-    public BloatSafespot getBloatSafespot() {
-        return this.bloatSafespot;
-    }
-
-    static {
-        log.info("Populating the Chunk HashTable...");
-        chunkTable.put(BloatChunk.NW, Direction.NORTH, new ImmutablePair<>(BloatPath.W_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.NW, Direction.EAST, new ImmutablePair<>(BloatPath.N_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.NW, Direction.SOUTH, new ImmutablePair<>(BloatPath.W_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.NW, Direction.WEST, new ImmutablePair<>(BloatPath.N_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.NE, Direction.NORTH, new ImmutablePair<>(BloatPath.E_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.NE, Direction.EAST, new ImmutablePair<>(BloatPath.N_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.NE, Direction.SOUTH, new ImmutablePair<>(BloatPath.E_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.NE, Direction.WEST, new ImmutablePair<>(BloatPath.N_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.SW, Direction.NORTH, new ImmutablePair<>(BloatPath.W_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.SW, Direction.EAST, new ImmutablePair<>(BloatPath.S_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.SW, Direction.SOUTH, new ImmutablePair<>(BloatPath.W_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.SW, Direction.WEST, new ImmutablePair<>(BloatPath.S_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.SE, Direction.NORTH, new ImmutablePair<>(BloatPath.E_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.SE, Direction.EAST, new ImmutablePair<>(BloatPath.S_PATH, BloatRotation.COUNTER_CLOCKWISE));
-        chunkTable.put(BloatChunk.SE, Direction.SOUTH, new ImmutablePair<>(BloatPath.E_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.SE, Direction.WEST, new ImmutablePair<>(BloatPath.S_PATH, BloatRotation.CLOCKWISE));
-        chunkTable.put(BloatChunk.UNKNOWN, Direction.NORTH, new ImmutablePair<>(BloatPath.UNKNOWN, BloatRotation.UNKNOWN));
-        chunkTable.put(BloatChunk.UNKNOWN, Direction.EAST, new ImmutablePair<>(BloatPath.UNKNOWN, BloatRotation.UNKNOWN));
-        chunkTable.put(BloatChunk.UNKNOWN, Direction.SOUTH, new ImmutablePair<>(BloatPath.UNKNOWN, BloatRotation.UNKNOWN));
-        chunkTable.put(BloatChunk.UNKNOWN, Direction.WEST, new ImmutablePair<>(BloatPath.UNKNOWN, BloatRotation.UNKNOWN));
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGrouperOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGrouperOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGrouperOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGrouperOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,98 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import lombok.extern.slf4j.Slf4j;
-import net.runelite.api.Client;
-import net.runelite.api.Perspective;
-import net.runelite.api.Point;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.util.ArrayList;
-@Slf4j
-public class YellowGrouperOverlay extends RoomOverlay {
-    @Inject
-    private Client client;
-    @Inject
-    private Verzik verzik;
-    @Inject
-    private SpoonTobConfig config;
-
-    @Inject
-    protected YellowGrouperOverlay(SpoonTobConfig config) {
-        super(config);
-    }
-
-    @Override
-    public Dimension render(Graphics2D graphics) {
-        if(verzik.yellowGroups.size() > 0 && config.showVerzikYellows() == SpoonTobConfig.verzikYellowsMode.GROUPS && verzik.yellowsOut && verzik.getVerzikNPC().getId() == 10852) {
-            int group = 0;
-            String text = String.valueOf(verzik.yellowTimer);
-
-            if(config.yellowTicksOnPlayer() && client.getLocalPlayer() != null) {
-                Point point = Perspective.getCanvasTextLocation(client, graphics, client.getLocalPlayer().getLocalLocation(), "#", config.yellowsOffset());
-                if (config.fontStyle()) {
-                    renderTextLocation(graphics, text, Color.WHITE, point);
-                } else {
-                    renderSteroidsTextLocation(graphics, text, config.yellowsSize(), Font.BOLD, Color.WHITE, point);
-                }
-            }
-
-            for (ArrayList<WorldPoint> list : verzik.yellowGroups) {
-                for (WorldPoint next : list) {
-                    final LocalPoint localPoint = LocalPoint.fromWorld(client, next);
-                    if (localPoint != null) {
-                        Polygon poly = Perspective.getCanvasTilePoly(client, localPoint);
-                        if (poly == null)
-                            continue;
-
-                        Color color = Color.BLACK;
-                        graphics.setColor(color);
-
-                        Stroke originalStroke = graphics.getStroke();
-                        graphics.setStroke(new BasicStroke(2));
-                        graphics.draw(poly);
-                        Color fill;
-                        switch (group) {
-                            case 0:
-                                fill = Color.RED;
-                                break;
-                            case 1:
-                                fill = Color.BLUE;
-                                break;
-                            case 2:
-                                fill = Color.GREEN;
-                                break;
-                            case 3:
-                                fill = Color.MAGENTA;
-                                break;
-                            case 4:
-                                fill = Color.ORANGE;
-                                break;
-                            default:
-                                fill = new Color(250, 50, 100);
-                        }
-                        Color realFill = new Color(fill.getRed(), fill.getGreen(), fill.getBlue(), 130);
-                        graphics.setColor(realFill);
-                        graphics.fill(poly);
-                        graphics.setStroke(originalStroke);
-
-                        if (!config.yellowTicksOnPlayer()) {
-                            Point point = Perspective.getCanvasTextLocation(client, graphics, localPoint, text, 0);
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, text, Color.WHITE, point);
-                            } else {
-                                renderResizeTextLocation(graphics, text, 12, Font.BOLD, Color.WHITE, point);
-                            }
-                        }
-                    }
-                }
-                group++;
-            }
-        }
-        return null;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Direction.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Direction.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Direction.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Direction.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,67 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Xarpus;
-
-public enum Direction {
-    NORTH("N"),
-    EAST("E"),
-    SOUTH("S"),
-    WEST("W"),
-    NORTHEAST("NE"),
-    NORTHWEST("NW"),
-    SOUTHEAST("SE"),
-    SOUTHWEST("SW");
-
-    private final String dirName;
-
-    public static Direction getNearestDirection(int angle) {
-        int round = angle >>> 9;
-        int up = angle & 256;
-        if (up != 0) {
-            ++round;
-        }
-
-        switch(round & 3) {
-            case 0:
-                return SOUTH;
-            case 1:
-                return WEST;
-            case 2:
-                return NORTH;
-            case 3:
-                return EAST;
-            default:
-                throw new IllegalStateException();
-        }
-    }
-
-    public static Direction getPreciseDirection(int angle) {
-        int ordinalDirection = (int)Math.round((double)angle / 256.0D) % 8;
-        switch(ordinalDirection) {
-            case 0:
-                return SOUTH;
-            case 1:
-                return SOUTHWEST;
-            case 2:
-                return WEST;
-            case 3:
-                return NORTHWEST;
-            case 4:
-                return NORTH;
-            case 5:
-                return NORTHEAST;
-            case 6:
-                return EAST;
-            case 7:
-                return SOUTHEAST;
-            default:
-                throw new IllegalStateException();
-        }
-    }
-
-    private Direction(String dirName) {
-        this.dirName = dirName;
-    }
-
-    public String getDirName() {
-        return this.dirName;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionManager.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionManager.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionManager.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionManager.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,65 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import java.awt.Point;
-import java.awt.Rectangle;
-import java.awt.Dimension;
-import java.awt.Graphics2D;
-
-import net.runelite.client.ui.overlay.Overlay;
-
-import lombok.Getter;
-import lombok.Setter;
-
-public class NyloSelectionManager extends Overlay {
-    @Getter
-    private final NyloSelectionBox melee;
-
-    @Getter
-    private final NyloSelectionBox mage;
-
-    @Getter
-    private final NyloSelectionBox range;
-
-    @Getter
-    @Setter
-    private boolean isHidden = true;
-
-    @Getter
-    private Rectangle meleeBounds = new Rectangle();
-
-    @Getter
-    private Rectangle rangeBounds = new Rectangle();
-
-    @Getter
-    private Rectangle mageBounds = new Rectangle();
-
-    public NyloSelectionManager(NyloSelectionBox melee, NyloSelectionBox mage, NyloSelectionBox range)
-    {
-        this.mage = mage;
-        this.melee = melee;
-        this.range = range;
-    }
-
-    @Override
-    public Dimension render(Graphics2D graphics)
-    {
-        if (isHidden)
-        {
-            return null;
-        }
-
-        Dimension meleeD = melee.render(graphics);
-        graphics.translate(meleeD.width + 1, 0);
-        Dimension rangeD = range.render(graphics);
-        graphics.translate(rangeD.width + 1, 0);
-        Dimension mageD = mage.render(graphics);
-        graphics.translate(-meleeD.width - rangeD.width - 2, 0);
-
-        meleeBounds = new Rectangle(getBounds().getLocation(), meleeD);
-        rangeBounds = new Rectangle(new Point(getBounds().getLocation().x + meleeD.width + 1, getBounds().y), rangeD);
-        mageBounds = new Rectangle(new Point(getBounds().getLocation().x + meleeD.width + 1 + rangeD.width + 1, getBounds().y), mageD);
-
-        return new Dimension(meleeD.width + rangeD.width + mageD.width, Math.max(Math.max(meleeD.height, rangeD.height), mageD.height));
-    }
-
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/MiscOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/MiscOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/MiscOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/MiscOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,64 +0,0 @@
-package net.runelite.client.plugins.spoontob;
-
-import net.runelite.api.Client;
-import net.runelite.client.ui.overlay.Overlay;
-import net.runelite.client.ui.overlay.OverlayLayer;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
-import java.awt.*;
-
-@Singleton
-public class MiscOverlay extends Overlay {
-    private final Client client;
-    private final SpoonTobPlugin plugin;
-    private final SpoonTobConfig config;
-
-    @Inject
-    private MiscOverlay(final Client client, final SpoonTobPlugin plugin, final SpoonTobConfig config) {
-        this.client = client;
-        this.plugin = plugin;
-        this.config = config;
-        setPosition(OverlayPosition.DYNAMIC);
-        setPriority(OverlayPriority.HIGH);
-        setLayer(OverlayLayer.ABOVE_SCENE);
-    }
-
-    @Override
-    public Dimension render(Graphics2D graphics) {
-        if (config.lootReminder() != SpoonTobConfig.lootReminderMode.OFF && plugin.bankLootChest != null && this.client.getLocalPlayer() != null) {
-            Color raveColor = plugin.raveUtils.getColor(plugin.bankLootChest.hashCode(), true);
-            if(plugin.bankLootChest.getRenderable().getModel().getModelHeight() == 119) {
-                if(config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMBER || config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMBEST
-                        || config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMBEREST) {
-                    if (!this.client.hasHintArrow()) {
-                        this.client.setHintArrow(plugin.bankLootChest.getWorldLocation());
-                    }
-
-                    if (config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMBEST) {
-                        graphics.setColor(new Color(raveColor.getRed(), raveColor.getGreen(), raveColor.getBlue(), config.lootReminderColor().getAlpha()));
-                    } else if (config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMBEREST){
-                        graphics.setColor(new Color(plugin.raveBankChestColor.getRed(), plugin.raveBankChestColor.getBlue(), plugin.raveBankChestColor.getGreen(), config.lootReminderColor().getAlpha()));
-                    } else {
-                        graphics.setColor(config.lootReminderColor());
-                    }
-
-                    if(plugin.bankLootChest.getConvexHull() != null) {
-                        graphics.fill(plugin.bankLootChest.getConvexHull());
-                    }
-                }else if(config.lootReminder() == SpoonTobConfig.lootReminderMode.DUMB){
-                    graphics.setColor(config.lootReminderColor());
-                    if(plugin.bankLootChest.getConvexHull() != null) {
-                        graphics.fill(plugin.bankLootChest.getConvexHull());
-                    }
-                }
-            }else {
-                plugin.bankLootChest = null;
-                this.client.clearHintArrow();
-            }
-        }
-        return null;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloWaveSpawnInfobox.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloWaveSpawnInfobox.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloWaveSpawnInfobox.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloWaveSpawnInfobox.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,54 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import net.runelite.api.Client;
-import net.runelite.api.MenuAction;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-import net.runelite.client.ui.overlay.OverlayMenuEntry;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.components.LineComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class NyloWaveSpawnInfobox extends OverlayPanel {
-    private final Client client;
-    private final SpoonTobPlugin plugin;
-    private final SpoonTobConfig config;
-    private Nylocas nylo;
-
-    @Inject
-    public NyloWaveSpawnInfobox(Client client, SpoonTobPlugin plugin, SpoonTobConfig config, Nylocas nylo) {
-        super(plugin);
-        this.client = client;
-        this.nylo = nylo;
-        this.plugin = plugin;
-        this.config = config;
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, "Configure", "Theatre xarpus overlay"));
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        panelComponent.getChildren().clear();
-        if((config.waveSpawnTimer() == SpoonTobConfig.waveSpawnTimerMode.INFOBOX || config.waveSpawnTimer() == SpoonTobConfig.waveSpawnTimerMode.BOTH)
-                && TheatreRegions.inRegion(client, TheatreRegions.NYLOCAS) && nylo.isNyloActive() && nylo.nyloWave < 31 && nylo.waveSpawnTicks > -1) {
-            panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth("Next Wave:   ") + 20, 0));
-
-            if(nylo.stalledWave) {
-                panelComponent.getChildren().add(LineComponent.builder()
-                        .left("Next Wave: ")
-                        .rightColor(Color.RED)
-                        .right(String.valueOf(nylo.waveSpawnTicks))
-                        .build());
-            } else {
-                panelComponent.getChildren().add(LineComponent.builder()
-                        .left("Next Wave: ")
-                        .right(String.valueOf(nylo.waveSpawnTicks))
-                        .build());
-            }
-        }
-        return super.render(graphics);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikRedsOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikRedsOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikRedsOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikRedsOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,74 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.Client;
-import net.runelite.api.NPC;
-import net.runelite.api.NPCComposition;
-import net.runelite.api.Perspective;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-import net.runelite.client.ui.overlay.OverlayLayer;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class VerzikRedsOverlay extends RoomOverlay {
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    private SpoonTobConfig config;
-
-    @Inject
-    private Client client;
-
-    @Inject
-    private Verzik verzik;
-
-    @Inject
-    public VerzikRedsOverlay(Client client, SpoonTobConfig config, SpoonTobPlugin plugin) {
-        super(config);
-        this.client = client;
-        this.plugin = plugin;
-        this.setPosition(OverlayPosition.DYNAMIC);
-        this.setPriority(OverlayPriority.HIGH);
-        setLayer(OverlayLayer.ABOVE_SCENE);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if ((config.redsTL() != SpoonTobConfig.redsTlMode.OFF || config.redsFreezeWarning()) && plugin.enforceRegion()) {
-            for (NPC reds : client.getNpcs()) {
-                if (reds.getName() != null && reds.getName().equalsIgnoreCase("nylocas matomenos")) {
-                    NPCComposition composition = reds.getComposition();
-                    int size = composition.getSize();
-                    LocalPoint lp = LocalPoint.fromWorld(client, reds.getWorldLocation());
-                    if (lp != null) {
-                        lp = new LocalPoint(lp.getX() + size * 128 / 2 - 64, lp.getY() + size * 128 / 2 - 64);
-                        Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, lp, size);
-                        if (tilePoly != null) {
-                            if ((config.redsTL() == SpoonTobConfig.redsTlMode.VERZIK || config.redsTL() == SpoonTobConfig.redsTlMode.BOTH)
-                                    && TheatreRegions.inRegion(client, TheatreRegions.VERZIK)) {
-                                renderPoly(graphics, tilePoly, config.redsTLColor(), config.redsTLColor().getAlpha(), 0);
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    private void renderPoly(Graphics2D graphics, Shape polygon, Color color, int outlineOpacity, int fillOpacity) {
-        if (polygon != null) {
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineOpacity));
-            graphics.setStroke(new BasicStroke((float) 1));
-            graphics.draw(polygon);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillOpacity));
-            graphics.fill(polygon);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Xarpus.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Xarpus.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Xarpus.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Xarpus.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,488 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Xarpus;
-
-import com.google.common.collect.ImmutableSet;
-import net.runelite.client.plugins.spoontob.Room;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import lombok.Getter;
-import lombok.Setter;
-import lombok.ToString;
-import net.runelite.api.*;
-import net.runelite.api.Point;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.*;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.events.ConfigChanged;
-import net.runelite.client.game.AlternateSprites;
-import net.runelite.client.plugins.Plugin;
-import net.runelite.client.ui.overlay.infobox.Counter;
-import net.runelite.client.ui.overlay.infobox.InfoBox;
-import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
-import net.runelite.client.util.ColorUtil;
-import net.runelite.client.util.ImageUtil;
-import org.apache.commons.lang3.tuple.Pair;
-
-import javax.inject.Inject;
-import javax.sound.sampled.*;
-import javax.sound.sampled.DataLine.Info;
-import javax.sound.sampled.FloatControl.Type;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.io.BufferedInputStream;
-import java.util.List;
-import java.util.*;
-
-import static net.runelite.api.NpcID.*;
-
-public class Xarpus extends Room {
-    private static BufferedImage EXHUMED_COUNT_ICON;
-    private static final int GROUNDOBJECT_ID_EXHUMED = 32743;
-    protected static final Set<Integer> P0_IDS = ImmutableSet.of(
-            XARPUS, XARPUS_10766, XARPUS_10770
-    );
-    protected static final Set<Integer> P1_IDS = ImmutableSet.of(
-            XARPUS_8339, XARPUS_10767, XARPUS_10771
-    );
-    protected static final Set<Integer> P2_IDS = ImmutableSet.of(
-            XARPUS_8340, XARPUS_10768, XARPUS_10772
-    );
-    protected static final Set<Integer> P3_IDS = ImmutableSet.of(
-            XARPUS_8341, XARPUS_10769, XARPUS_10773
-    );
-    @Inject
-    private XarpusOverlay xarpusOverlay;
-    @Inject
-    private XarpusCounterPanel xarpusPanel;
-    @Inject
-    private XarpusTimer xarpusTimer;
-    @Inject
-    private InfoBoxManager infoBoxManager;
-    @Inject
-    private Client client;
-
-    int exhumedCount = 0;
-    int healCount = 0;
-
-    private boolean xarpusStarted = false;
-
-	private static Clip clip;
-
-    @Getter
-    private ExhumedInfobox exhumedCounter;
-    private static BufferedImage HEALED_COUNT_ICON;
-    @Getter
-    private Counter xarpusHealedCounter;
-
-    @Getter
-    private boolean xarpusActive;
-    @Getter
-    public boolean xarpusStare;
-    @Getter
-    private final Map<Long, Pair<GroundObject, Integer>> xarpusExhumeds = new HashMap<>();
-    @Getter
-    private int xarpusTicksUntilAttack;
-    @Getter
-    private NPC xarpusNPC;
-
-    @Getter
-    private boolean exhumedSpawned = false;
-
-    @Getter
-    private int instanceTimer = 0;
-    @Getter
-    private boolean isInstanceTimerRunning = false;
-    private boolean nextInstance = true;
-
-    @Getter
-    private boolean isHM = false;
-    @Getter
-    private boolean isP3Active = false;
-
-    @Inject
-    protected Xarpus(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin, config);
-    }
-
-    public void init() {
-		try {
-            AudioInputStream stream = AudioSystem.getAudioInputStream(new BufferedInputStream(SpoonTobPlugin.class.getResourceAsStream("sheesh.wav")));
-            AudioFormat format = stream.getFormat();
-            Info info = new Info(Clip.class, format);
-            clip = (Clip)AudioSystem.getLine(info);
-            clip.open(stream);
-            FloatControl control = (FloatControl)clip.getControl(Type.MASTER_GAIN);
-            if (control != null) {
-                control.setValue((float)(config.sheeshVolume() / 2 - 45));
-            }
-        } catch (Exception var6) {
-            clip = null;
-        }
-        EXHUMED_COUNT_ICON = ImageUtil.resizeCanvas(ImageUtil.loadImageResource(AlternateSprites.class, AlternateSprites.POISON_HEART), 26, 26);
-        HEALED_COUNT_ICON = ImageUtil.resizeCanvas(ImageUtil.loadImageResource(SpoonTobPlugin.class, "healsplat.png"), 26, 26);
-    }
-
-    public void load() {
-        overlayManager.add(xarpusOverlay);
-        overlayManager.add(xarpusTimer);
-        overlayManager.add(xarpusPanel);
-    }
-
-    public void unload() {
-        overlayManager.remove(xarpusOverlay);
-        overlayManager.remove(xarpusPanel);
-        overlayManager.remove(xarpusTimer);
-        xarpusStarted = false;
-        healCount = 0;
-
-        infoBoxManager.removeInfoBox(exhumedCounter);
-        exhumedCounter = null;
-
-        infoBoxManager.removeInfoBox(xarpusHealedCounter);
-        xarpusHealedCounter = null;
-    }
-
-    @Subscribe
-    public void onConfigChanged(ConfigChanged event) {
-        if (event.getGroup().equals("spoontob")) {
-            if (event.getKey().equals("sheeshVolume")) {
-                if(clip != null) {
-                    FloatControl control = (FloatControl)clip.getControl(Type.MASTER_GAIN);
-			        if (control != null) {
-				        control.setValue((float)(config.sheeshVolume() / 2 - 45));
-                    }
-                }
-            }
-            if (event.getKey().equals("exhumedIB")) {
-                if (config.exhumedIB()) {
-                    infoBoxManager.addInfoBox(exhumedCounter);
-                } else {
-                    infoBoxManager.removeInfoBox(exhumedCounter);
-                }
-            }
-
-            if (event.getKey().equals("xarpusHealingCount")) {
-                if (config.xarpusHealingCount()) {
-                    infoBoxManager.addInfoBox(xarpusHealedCounter);
-                } else {
-                    infoBoxManager.removeInfoBox(xarpusHealedCounter);
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onNpcSpawned(NpcSpawned npcSpawned)
-    {
-        isHM = false;
-        isP3Active = false;
-        NPC npc = npcSpawned.getNpc();
-        switch (npc.getId())
-        {
-            case XARPUS_10770:
-            case XARPUS_10771:
-            case XARPUS_10772:
-            case XARPUS_10773:
-                isHM = true;
-            case XARPUS:
-            case XARPUS_8339:
-            case XARPUS_8340:
-            case XARPUS_8341:
-            case XARPUS_10766:
-            case XARPUS_10767:
-            case XARPUS_10768:
-            case XARPUS_10769:
-                xarpusActive = true;
-                xarpusNPC = npc;
-                xarpusStare = false;
-                xarpusTicksUntilAttack = 9;
-                healCount = 0;
-                exhumedSpawned = false;
-                break;
-        }
-    }
-
-    @Subscribe
-    public void onNpcDespawned(NpcDespawned npcDespawned) {
-        NPC npc = npcDespawned.getNpc();
-        switch(npc.getId()) {
-            case XARPUS:
-            case XARPUS_8339:
-            case XARPUS_8340:
-            case XARPUS_8341:
-            case XARPUS_10766: //Story mode
-            case XARPUS_10767:
-            case XARPUS_10768:
-            case XARPUS_10769:
-            case XARPUS_10770: //Hard mode
-            case XARPUS_10771:
-            case XARPUS_10772:
-            case XARPUS_10773:
-                xarpusActive = false;
-                xarpusNPC = null;
-                xarpusStare = false;
-                xarpusTicksUntilAttack = 9;
-                xarpusExhumeds.clear();
-                xarpusStarted = false;
-                isInstanceTimerRunning = false;
-                healCount = 0;
-                exhumedSpawned = false;
-                infoBoxManager.removeInfoBox(exhumedCounter);
-                exhumedCounter = null;
-                exhumedCount = -1;
-                removeCounter();
-                break;
-        }
-    }
-
-    @Subscribe
-    public void onNpcChanged(NpcChanged event) {
-        NPC npc = event.getNpc();
-        if (xarpusActive) {
-            if (P2_IDS.contains(npc.getId()) || P3_IDS.contains(npc.getId())) {
-                infoBoxManager.removeInfoBox(exhumedCounter);
-                exhumedCounter = null;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGroundObjectSpawned(GroundObjectSpawned event)
-    {
-        if (xarpusActive)
-        {
-            GroundObject o = event.getGroundObject();
-            if (o.getId() == GROUNDOBJECT_ID_EXHUMED)
-            {
-                long hash = o.getHash();
-                if (xarpusExhumeds.containsKey(hash))
-                {
-                    return;
-                }
-                exhumedSpawned = true;
-
-                if (exhumedCounter == null)
-                {
-                    switch (SpoonTobPlugin.partySize)
-                    {
-                        case 5:
-                            exhumedCount = isHM ? 24 : 18;
-                            break;
-                        case 4:
-                            exhumedCount = isHM ? 20 : 15;
-                            break;
-                        case 3:
-                            exhumedCount = isHM ? 16 : 12;
-                            break;
-                        case 2:
-                            exhumedCount = isHM ? 13 : 9;
-                            break;
-                        default:
-                            exhumedCount = isHM ? 9 : 7;
-                    }
-
-                    exhumedCounter = new ExhumedInfobox(EXHUMED_COUNT_ICON, plugin, exhumedCount - 1);
-                    if (config.exhumedIB())
-                    {
-                        infoBoxManager.addInfoBox(exhumedCounter);
-                        exhumedCounter.setTooltip(ColorUtil.wrapWithColorTag(exhumedCounter.getCount() > 0 ? "Exhumeds Left: "
-                                + exhumedCounter.getCount() : "NOW", exhumedCounter.getCount() <= 1 ? Color.RED : Color.WHITE));
-                    }
-                }
-                else
-                {
-
-                    exhumedCounter.setCount(exhumedCounter.getCount() - 1);
-                    exhumedCounter.setTooltip(ColorUtil.wrapWithColorTag(exhumedCounter.getCount() > 0 ? "Exhumeds Left: "
-                            + exhumedCounter.getCount() : "NOW", exhumedCounter.getCount() <= 1 ? Color.RED : Color.WHITE));
-                }
-
-                xarpusExhumeds.put(hash, Pair.of(o, isHM ? 9 : 11));
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        if (xarpusActive) {
-            if (!xarpusExhumeds.isEmpty())
-            {
-                xarpusExhumeds.replaceAll((k, v) -> Pair.of(v.getLeft(), v.getRight() - 1));
-                xarpusExhumeds.values().removeIf((p) -> p.getRight() <= 0);
-            }
-
-            if (xarpusNPC.getOverheadText() != null && !xarpusStare) {
-                xarpusStare = true;
-                xarpusTicksUntilAttack = 9;
-            }
-
-            if (xarpusStare) {
-                xarpusTicksUntilAttack--;
-                if (xarpusTicksUntilAttack <= 0) {
-                    xarpusTicksUntilAttack = 8;
-                    isP3Active = true;
-                }
-
-                infoBoxManager.removeInfoBox(exhumedCounter);
-
-            } else if (P2_IDS.contains(xarpusNPC.getId())) {
-                xarpusTicksUntilAttack--;
-
-                if (xarpusTicksUntilAttack <= 0)
-                {
-                    xarpusTicksUntilAttack = 4;
-                }
-            }
-        }
-
-        instanceTimer = (instanceTimer + 1) % 4;
-    }
-
-    @Subscribe
-    public void onHitsplatApplied(HitsplatApplied event) {
-        if (event.getActor() != null && event.getActor().getName() != null) {
-            if (event.getActor().getName().toLowerCase().contains("xarpus") && event.getHitsplat().getHitsplatType() == HitsplatID.HEAL) {
-                healCount += event.getHitsplat().getAmount();
-                addCounter();
-                updateCounter();
-            }
-
-        }
-    }
-
-    private void updateCounter()
-    {
-        if (xarpusHealedCounter != null)
-        {
-            xarpusHealedCounter.setCount(healCount);
-        }
-    }
-
-    private void addCounter()
-    {
-        if (config.xarpusHealingCount() && xarpusHealedCounter == null)
-        {
-            xarpusHealedCounter = new Counter(HEALED_COUNT_ICON, plugin, healCount);
-            xarpusHealedCounter.setTooltip("Xarpus Heals");
-            infoBoxManager.addInfoBox(xarpusHealedCounter);
-        }
-    }
-
-    private void removeCounter()
-    {
-        if (xarpusHealedCounter != null)
-        {
-            infoBoxManager.removeInfoBox(xarpusHealedCounter);
-            healCount = 0;
-            xarpusHealedCounter = null;
-        }
-    }
-
-    @Subscribe
-    public void onVarbitChanged(VarbitChanged event) {
-        if ((client.getVarbitValue(Varbits.MULTICOMBAT_AREA) == 1 || client.getVarbitValue(client.getVarps(), 6447) == 2) && !xarpusStarted && isInstanceTimerRunning) {
-            isInstanceTimerRunning = false;
-            xarpusStarted = true;
-        }
-    }
-
-    @Subscribe
-    public void onGameStateChanged(GameStateChanged gameStateChanged) {
-        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
-            nextInstance = true;
-        }
-    }
-
-    @Subscribe
-    protected void onClientTick(ClientTick event) {
-        if (client.getLocalPlayer() == null)
-        {
-            return;
-        }
-        List<Player> players = client.getPlayers();
-        for (Player player : players)
-        {
-            if (player.getWorldLocation() != null)
-            {
-                WorldPoint wpPlayer = player.getWorldLocation();
-                LocalPoint lpPlayer = LocalPoint.fromWorld(client, wpPlayer.getX(), wpPlayer.getY());
-
-                if (lpPlayer == null)
-                {
-                    continue;
-                }
-                WorldPoint wpChest = WorldPoint.fromRegion(player.getWorldLocation().getRegionID(),17,5, player.getWorldLocation().getPlane());
-                LocalPoint lpChest = LocalPoint.fromWorld(client, wpChest.getX(), wpChest.getY());
-                if (lpChest != null)
-                {
-                    Point point = new Point(lpChest.getSceneX() - lpPlayer.getSceneX(), lpChest.getSceneY() - lpPlayer.getSceneY());
-
-                    if (isInSotetsegRegion() && point.getY() == 1 && (point.getX() == 1 || point.getX() == 2 || point.getX() == 3) && nextInstance)
-                    {
-                        client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Xarpus instance timer started", "", false);
-                        instanceTimer = 2;
-                        isInstanceTimerRunning = true;
-                        nextInstance = false;
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed event) {
-		if(xarpusActive && xarpusNPC != null){
-			if(event.getSoundId() == 4005 && (getXarpusNPC().getId() >= 10770 && getXarpusNPC().getId() <= 10773) && config.muteXarpusHmEarrape()){
-				event.consume();
-			}else if(event.getSoundId() == 4007 && config.sheesh()){
-				event.consume();
-			}
-		}
-    }
-
-    @Subscribe
-    public void onOverheadTextChanged(OverheadTextChanged event) {
-        if(event.getActor() instanceof NPC && config.sheesh() && xarpusActive){
-            NPC npc = (NPC) event.getActor();
-            if(npc.getId() == xarpusNPC.getId()) {
-                event.getActor().setOverheadText("Sheeeeeesh!");
-				clip.setFramePosition(0);
-                clip.start();
-            }
-        }
-    }
-
-    public boolean isInXarpusRegion() {
-        return client.getMapRegions() != null && client.getMapRegions().length > 0 && Arrays.stream(client.getMapRegions()).anyMatch((s) -> s == 12612);
-    }
-
-    protected boolean isInSotetsegRegion() {
-        return client.getMapRegions() != null && client.getMapRegions().length > 0 && Arrays.stream(client.getMapRegions()).anyMatch((s) -> s == 13123 || s == 13379);
-    }
-
-    @ToString
-    public static class ExhumedInfobox extends InfoBox {
-        @Getter
-        @Setter
-        private int count;
-
-        public ExhumedInfobox(BufferedImage image, Plugin plugin, int count) {
-            super(image, plugin);
-            this.count = count;
-        }
-
-        @Override
-        public String getText() {
-            return Integer.toString(getCount());
-        }
-
-        @Override
-        public Color getTextColor() {
-            if (count <= 1) {
-                return Color.RED;
-            } else {
-                return Color.WHITE;
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/DeathBallPanel.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/DeathBallPanel.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/DeathBallPanel.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/DeathBallPanel.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,61 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Sotetseg;
-
-import net.runelite.api.Client;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.ImageComponent;
-import net.runelite.client.ui.overlay.components.TitleComponent;
-import net.runelite.client.util.ImageUtil;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-
-public class DeathBallPanel extends OverlayPanel {
-    @Inject
-    private  SpoonTobPlugin plugin;
-    @Inject
-    private  SpoonTobConfig config;
-    @Inject
-    private  Client client;
-    @Inject
-    private Sotetseg sote;
-
-    @Inject
-    public DeathBallPanel(SpoonTobPlugin plugin, SpoonTobConfig config, Client client, Sotetseg sote) {
-        super(plugin);
-        this.plugin = plugin;
-        this.config = config;
-        this.client = client;
-        this.sote = sote;
-        setPriority(OverlayPriority.HIGH);
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        this.panelComponent.getChildren().clear();
-        if((config.deathballInfobox() == SpoonTobConfig.soteDeathballMode.INFOBOX || config.deathballInfobox() == SpoonTobConfig.soteDeathballMode.BOTH)
-                && sote.isSotetsegActive()) {
-            Color color = Color.WHITE;
-            int attacksLeft = sote.sotetsegAttacksLeft;
-            if(attacksLeft > 0) {
-                if (attacksLeft == 1) {
-                    color = Color.RED;
-                }
-                this.panelComponent.getChildren().add(TitleComponent.builder()
-                        .color(color)
-                        .text(Integer.toString(attacksLeft))
-                        .build());
-            }else {
-                BufferedImage img = ImageUtil.loadImageResource(SpoonTobPlugin.class, "NukeSprite.png");
-                ImageComponent imgComp = new ImageComponent(img);
-                this.panelComponent.getChildren().add(imgComp);
-            }
-            this.panelComponent.setPreferredSize(new Dimension(24, 24));
-        }
-        return super.render(graphics);
-    }
-}
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatChunk.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatChunk.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatChunk.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatChunk.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,27 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def;
-
-import java.util.EnumSet;
-
-public enum BloatChunk {
-    NW("Northwest", 411, 556),
-    NE("Northeast", 412, 556),
-    SW("Southwest", 411, 555),
-    SE("Southeast", 412, 555),
-    UNKNOWN("Unknown", 0, 0);
-
-    private final String name;
-    private final int zone;
-
-    BloatChunk(String name, int x, int y) {
-        this.name = name;
-        this.zone = (x & 1023) << 14 | (y & 1023) << 3;
-    }
-
-    public static BloatChunk getOccupiedChunk(int chunk) {
-        return chunk == -1 ? UNKNOWN : EnumSet.allOf(BloatChunk.class).stream().filter((c) -> c.zone == chunk).findFirst().orElse(UNKNOWN);
-    }
-
-    public String toString() {
-        return this.name;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/SituationalTickOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/SituationalTickOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/SituationalTickOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/SituationalTickOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,72 +0,0 @@
-package net.runelite.client.plugins.spoontob;
-
-import net.runelite.api.Client;
-import net.runelite.api.Player;
-import net.runelite.api.Point;
-import net.runelite.client.ui.overlay.*;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.util.Arrays;
-
-public class SituationalTickOverlay extends RoomOverlay {
-    @Inject
-    private Client client;
-    @Inject
-    private SpoonTobConfig config;
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    protected SituationalTickOverlay(SpoonTobConfig config) {
-        super(config);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if(plugin.enforceRegion() && config.situationalTicks()) {
-            Player p = client.getLocalPlayer();
-            if (p != null) {
-                if (isInBloatRegion(client)) {
-                    Integer tick = plugin.situationalTicksList.get(p);
-                    if (tick != null) {
-                        Point canvasPoint = client.getLocalPlayer().getCanvasTextLocation(graphics, String.valueOf(tick), config.situationalTicksOffset());
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, String.valueOf(tick), (tick == 1) ? Color.GREEN : Color.WHITE, canvasPoint);
-                        } else {
-                            renderSteroidsTextLocation(graphics, String.valueOf(tick), config.situationalTicksSize(), Font.BOLD, (tick == 1) ? Color.GREEN : Color.WHITE, canvasPoint);
-                        }
-                    }
-                } else if (isInXarpRegion(client)) {
-                    for (Player p2 : plugin.getSituationalTicksList().keySet()) {
-                        int tick = plugin.getSituationalTicksList().get(p2);
-                        Point canvasPoint = p2.getCanvasTextLocation(graphics, String.valueOf(tick), config.situationalTicksOffset());
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, String.valueOf(tick), (tick == 1) ? Color.GREEN : Color.WHITE, canvasPoint);
-                        } else {
-                            renderSteroidsTextLocation(graphics, String.valueOf(tick), config.situationalTicksSize(), Font.BOLD, (tick == 1) ? Color.GREEN : Color.WHITE, canvasPoint);
-                        }
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-
-    private static boolean isInBloatRegion(Client client) {
-        return (client.getMapRegions() != null && (client.getMapRegions()).length > 0 && Arrays.stream(client.getMapRegions()).anyMatch(s -> (s == 13125)));
-    }
-
-    private static boolean isInXarpRegion(Client client) {
-        return (client.getMapRegions() != null && (client.getMapRegions()).length > 0 && Arrays.stream(client.getMapRegions()).anyMatch(s -> (s == 12612)));
-    }
-
-    protected void renderTextLocation(Graphics2D graphics, String txtString, Color fontColor, Point canvasPoint) {
-        if (canvasPoint != null) {
-            Point canvasCenterPoint = new Point(canvasPoint.getX(), canvasPoint.getY());
-            Point canvasCenterPoint_shadow = new Point(canvasPoint.getX() + 1, canvasPoint.getY() + 1);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint_shadow, txtString, Color.BLACK);
-            OverlayUtil.renderTextLocation(graphics, canvasCenterPoint, txtString, fontColor);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,52 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.LineComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class MaidenMaxHitOverlay extends OverlayPanel {
-    private final Maiden maiden;
-    private final SpoonTobConfig config;
-
-    @Inject
-    private MaidenMaxHitOverlay(Maiden maiden, SpoonTobConfig config) {
-        this.maiden = maiden;
-        this.config = config;
-        setPriority(OverlayPriority.HIGH);
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-        panelComponent.setPreferredSize(new Dimension(85, 0));
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (config.maidenMaxHitOverlay() != SpoonTobConfig.MaidenMaxHit.OFF && maiden.getMaidenNPC() != null) {
-            int noPrayerMaxHit = (int)Math.floor(maiden.getMaxHit());
-            int prayerMaxHit = noPrayerMaxHit / 2;
-            int elyMaxHit = prayerMaxHit - (int)Math.floor((double)prayerMaxHit * 0.25D);
-            LineComponent reg = LineComponent.builder().left("Max Hit:").leftColor(Color.WHITE).right(Integer.toString(prayerMaxHit)).rightColor(Color.GREEN).build();
-            LineComponent ely = LineComponent.builder().left("Ely Max Hit:").leftColor(Color.WHITE).right(Integer.toString(elyMaxHit)).rightColor(Color.GREEN).build();
-            switch(config.maidenMaxHitOverlay()) {
-                case REGULAR:
-                    panelComponent.getChildren().add(reg);
-                    break;
-                case ELY:
-                    panelComponent.getChildren().add(ely);
-                    break;
-                case BOTH:
-                    panelComponent.getChildren().add(reg);
-                    panelComponent.getChildren().add(ely);
-                    break;
-                default:
-                    throw new IllegalStateException("Invalid 'maidenMaxHit' config state -> state: " + config.maidenMaxHitOverlay().getName());
-            }
-
-            return super.render(graphics);
-        } else {
-            return null;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/LightningPanel.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/LightningPanel.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/LightningPanel.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/LightningPanel.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,61 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.Client;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.ImageComponent;
-import net.runelite.client.ui.overlay.components.TitleComponent;
-import net.runelite.client.util.ImageUtil;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-
-public class LightningPanel extends OverlayPanel {
-    private SpoonTobPlugin plugin;
-
-    private SpoonTobConfig config;
-
-    private Client client;
-
-    private Verzik verzik;
-
-    @Inject
-    public LightningPanel(SpoonTobPlugin plugin, SpoonTobConfig config, Client client, Verzik verzik) {
-        super(plugin);
-        this.plugin = plugin;
-        this.config = config;
-        this.client = client;
-        this.verzik = verzik;
-        setPriority(OverlayPriority.HIGH);
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        this.panelComponent.getChildren().clear();
-        if (config.lightningInfobox() != SpoonTobConfig.lightningMode.OFF) {
-            if ((config.lightningInfobox() == SpoonTobConfig.lightningMode.INFOBOX || config.lightningInfobox() == SpoonTobConfig.lightningMode.BOTH)
-                    && this.verzik.isVerzikActive() && this.verzik.getVerzikPhase() == Verzik.Phase.PHASE2) {
-                Color color = Color.WHITE;
-                if (verzik.lightningAttacks > 0) {
-                    if (verzik.lightningAttacks == 1) {
-                        color = Color.RED;
-                    }
-                    this.panelComponent.getChildren().add(TitleComponent.builder()
-                            .color(color)
-                            .text(Integer.toString(verzik.lightningAttacks))
-                            .build());
-                } else {
-                    BufferedImage img = ImageUtil.loadImageResource(SpoonTobPlugin.class, "Zap.png");
-                    ImageComponent imgComp = new ImageComponent(img);
-                    this.panelComponent.getChildren().add(imgComp);
-                }
-                this.panelComponent.setPreferredSize(new Dimension(24, 24));
-            }
-        }
-        return super.render(graphics);
-    }
-}
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/Coordinates.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/Coordinates.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/Coordinates.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/Coordinates.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,45 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp;
-
-import java.util.Objects;
-
-public final class Coordinates {
-    private final int x;
-    private final int y;
-
-    public Coordinates dx(int dx) {
-        return new Coordinates(this.x + dx, this.y);
-    }
-
-    public Coordinates dy(int dy) {
-        return new Coordinates(this.x, this.y + dy);
-    }
-
-    public int distanceTo(Coordinates other) {
-        return (int)Math.hypot((double)(this.x - other.x), (double)(this.y - other.y));
-    }
-
-    public boolean equals(Object other) {
-        if (!(other instanceof Coordinates)) {
-            return false;
-        } else {
-            return this.x == ((Coordinates)other).x && this.y == ((Coordinates)other).y;
-        }
-    }
-
-    public int hashCode() {
-        return Objects.hash(this.x, this.y);
-    }
-
-    public Coordinates(int x, int y) {
-        this.x = x;
-        this.y = y;
-    }
-
-    public int getX() {
-        return this.x;
-    }
-
-    public int getY() {
-        return this.y;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatRotation.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatRotation.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatRotation.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatRotation.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,11 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def;
-
-public enum BloatRotation {
-    CLOCKWISE,
-    COUNTER_CLOCKWISE,
-    UNKNOWN;
-
-    public boolean isClockwise() {
-        return this == CLOCKWISE;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenCrabInfo.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenCrabInfo.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenCrabInfo.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenCrabInfo.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,22 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import net.runelite.api.NPC;
-
-public class MaidenCrabInfo {
-    public MaidenCrabInfo(NPC crab, int phase, String position, int hpRatio, int hpScale, int frozenTicks, boolean scuffed) {
-        this.crab = crab;
-        this.phase = phase;
-        this.position = position;
-        this.hpRatio = hpRatio;
-        this.hpScale = hpScale;
-        this.frozenTicks = frozenTicks;
-        this.scuffed = scuffed;
-    }
-    public NPC crab;
-    public int phase;
-    public String position;
-    public int hpRatio;
-    public int hpScale;
-    public int frozenTicks;
-    public boolean scuffed;
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/Nylocas.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/Nylocas.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/Nylocas.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/Nylocas.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,1170 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import com.google.common.collect.ImmutableSet;
-import lombok.Getter;
-import lombok.Setter;
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.*;
-import net.runelite.api.kit.KitType;
-import net.runelite.client.util.Text;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.events.ConfigChanged;
-import net.runelite.client.game.SkillIconManager;
-import net.runelite.client.input.MouseManager;
-import net.runelite.client.plugins.spoontob.Room;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.TheatreInputListener;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-import net.runelite.client.plugins.spoontob.util.WeaponMap;
-import net.runelite.client.plugins.spoontob.util.WeaponStyle;
-import net.runelite.client.ui.overlay.components.InfoBoxComponent;
-import net.runelite.client.util.ColorUtil;
-import org.apache.commons.lang3.ObjectUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import net.runelite.api.MenuEntry;
-import net.runelite.api.events.AnimationChanged;
-import net.runelite.api.events.MenuOpened;
-import java.awt.Color;
-import java.time.Instant;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import javax.inject.Inject;
-import net.runelite.api.ChatMessageType;
-import net.runelite.api.Client;
-import net.runelite.api.GameState;
-import net.runelite.api.MenuAction;
-import net.runelite.api.NPC;
-import net.runelite.api.Player;
-import net.runelite.api.Skill;
-import net.runelite.api.events.ClientTick;
-import net.runelite.api.events.GameStateChanged;
-import net.runelite.api.events.GameTick;
-import net.runelite.api.events.MenuEntryAdded;
-import net.runelite.api.events.MenuOptionClicked;
-import net.runelite.api.events.NpcChanged;
-import net.runelite.api.events.NpcDespawned;
-import net.runelite.api.events.NpcSpawned;
-import net.runelite.api.events.VarbitChanged;
-
-
-import java.util.*;
-
-import static net.runelite.api.NpcID.*;
-
-public class Nylocas extends Room {
-    private static final Logger log = LoggerFactory.getLogger(SpoonTobPlugin.class);
-    @Inject
-    private SkillIconManager skillIconManager;
-    @Inject
-    private MouseManager mouseManager;
-    @Inject
-    private TheatreInputListener theatreInputListener;
-    @Inject
-    private Client client;
-    @Inject
-    private NylocasOverlay nylocasOverlay;
-    @Inject
-    public NylocasAliveCounterOverlay nylocasAliveCounterOverlay;
-    @Inject
-    private NyloTimer nyloTimer;
-    @Inject
-    private NyloWaveSpawnInfobox waveSpawnInfobox;
-
-    private static final int NPCID_NYLOCAS_PILLAR = 8358;
-    private static final int NPCID_NYLOCAS_SM_PILLAR = 10790;
-    private static final int NPCID_NYLOCAS_HM_PILLAR = 10811;
-    private static final int NYLO_MAP_REGION = 13122;
-    private static final int BLOAT_MAP_REGION = 13125;
-    private static final String MAGE_NYLO = "Nylocas Hagios";
-    private static final String RANGE_NYLO = "Nylocas Toxobolos";
-    private static final String MELEE_NYLO = "Nylocas Ischyros";
-    private static final String BOSS_NYLO = "Nylocas Vasilias";
-    private static final String DEMIBOSS_NYLO = "Nylocas Prinkipas";
-
-    protected static final Set<Integer> NYLO_BOSS_IDS = ImmutableSet.of(
-            NYLOCAS_VASILIAS_8355, NYLOCAS_VASILIAS_8356, NYLOCAS_VASILIAS_8357, //Reg
-            NYLOCAS_VASILIAS_10787, NYLOCAS_VASILIAS_10788, NYLOCAS_VASILIAS_10789, // SM
-            NYLOCAS_VASILIAS_10808, NYLOCAS_VASILIAS_10809, NYLOCAS_VASILIAS_10810 // HM
-    );
-
-    protected static final Set<Integer> NYLO_DEMI_BOSS_IDS = ImmutableSet.of(
-            NYLOCAS_PRINKIPAS_10804, NYLOCAS_PRINKIPAS_10805, NYLOCAS_PRINKIPAS_10806
-    );
-
-    protected static final Set<Integer> MELEE_IDS = ImmutableSet.of(
-            NYLOCAS_ISCHYROS_8342, NYLOCAS_ISCHYROS_8345, NYLOCAS_ISCHYROS_8348, NYLOCAS_ISCHYROS_8351, //Reg
-            NYLOCAS_ISCHYROS_10774, NYLOCAS_ISCHYROS_10777, NYLOCAS_ISCHYROS_10780, NYLOCAS_ISCHYROS_10783, // SM
-            NYLOCAS_ISCHYROS_10791, NYLOCAS_ISCHYROS_10794, NYLOCAS_ISCHYROS_10797, NYLOCAS_ISCHYROS_10800 // HM
-    );
-
-    protected static final Set<Integer> RANGE_IDS = ImmutableSet.of(
-            NYLOCAS_TOXOBOLOS_8343, NYLOCAS_TOXOBOLOS_8346, NYLOCAS_TOXOBOLOS_8349, NYLOCAS_TOXOBOLOS_8352, //Reg
-            NYLOCAS_TOXOBOLOS_10775, NYLOCAS_TOXOBOLOS_10778, NYLOCAS_TOXOBOLOS_10781, NYLOCAS_TOXOBOLOS_10784, // SM
-            NYLOCAS_TOXOBOLOS_10792, NYLOCAS_TOXOBOLOS_10795, NYLOCAS_TOXOBOLOS_10798, NYLOCAS_TOXOBOLOS_10801 // HM
-    );
-
-    protected static final Set<Integer> MAGIC_IDS = ImmutableSet.of(
-            NYLOCAS_HAGIOS, NYLOCAS_HAGIOS_8347, NYLOCAS_HAGIOS_8350, NYLOCAS_HAGIOS_8353, //Reg
-            NYLOCAS_HAGIOS_10776, NYLOCAS_HAGIOS_10779, NYLOCAS_HAGIOS_10782, NYLOCAS_HAGIOS_10785, // SM
-            NYLOCAS_HAGIOS_10793, NYLOCAS_HAGIOS_10796, NYLOCAS_HAGIOS_10799, NYLOCAS_HAGIOS_10802 // HM
-    );
-
-    protected static final Set<Integer> TRIDENT_IDS = ImmutableSet.of(
-            ItemID.SANGUINESTI_STAFF, ItemID.HOLY_SANGUINESTI_STAFF, ItemID.TRIDENT_OF_THE_SEAS_E, ItemID.TRIDENT_OF_THE_SEAS,
-            ItemID.TRIDENT_OF_THE_SEAS_FULL, ItemID.TRIDENT_OF_THE_SWAMP_E, ItemID.TRIDENT_OF_THE_SWAMP
-    );
-
-    @Getter
-    @Setter
-    private static Runnable wave31Callback = null;
-    @Getter
-    @Setter
-    private static Runnable endOfWavesCallback = null;
-
-    @Getter
-    private boolean nyloActive;
-
-    public int nyloWave = 0;
-    private int varbit6447 = -1;
-    @Getter
-    private Instant nyloWaveStart;
-    @Getter
-    private NyloSelectionManager nyloSelectionManager;
-
-    @Getter
-    private HashMap<NPC, Integer> nylocasPillars = new HashMap();
-    public ArrayList<NyloInfo> nylocasNpcs = new ArrayList<>();
-    @Getter
-    private HashSet<NPC> aggressiveNylocas = new HashSet();
-    private HashMap<NyloNPC, NPC> currentWave = new HashMap();
-
-    private int ticksSinceLastWave = 0;
-    @Getter
-    public int instanceTimer = 0;
-    @Getter
-    private boolean isInstanceTimerRunning = false;
-    private boolean nextInstance = true;
-
-    private int rangeBoss = 0;
-    private int mageBoss = 0;
-    private int meleeBoss = 0;
-    private int rangeSplits = 0;
-    private int mageSplits = 0;
-    private int meleeSplits = 0;
-    private int preRangeSplits = 0;
-    private int preMageSplits = 0;
-    private int preMeleeSplits = 0;
-    private int postRangeSplits = 0;
-    private int postMageSplits = 0;
-    private int postMeleeSplits = 0;
-
-    @Getter
-    private int bossChangeTicks;
-    private int lastBossId;
-    @Getter
-    private NPC nylocasBoss;
-    private boolean nyloBossAlive;
-
-    public int weaponId = 0;
-
-    private static final Set<Point> spawnTiles = ImmutableSet.of(
-            new Point(17, 24), new Point(17, 25), new Point(31, 9), new Point(32, 9), new Point(46, 24), new Point(46, 25));
-
-    @Getter
-    private final Map<NPC, Integer> splitsMap = new HashMap<>();
-    private final Set<NPC> bigNylos = new HashSet<>();
-
-    public boolean showHint;
-
-    public final ArrayList<Color> meleeNyloRaveColors = new ArrayList<Color>();
-    public final ArrayList<Color> rangeNyloRaveColors = new ArrayList<Color>();
-    public final ArrayList<Color> mageNyloRaveColors = new ArrayList<Color>();
-
-    public String tobMode = "";
-    public boolean minibossAlive = false;
-    public NPC nyloMiniboss = null;
-    public String nyloBossStyle = "";
-
-    public int logTicks = 0;
-
-    public int waveSpawnTicks = 0;
-    public boolean stalledWave = false;
-
-    private boolean mirrorMode;
-    private boolean setAlive;
-
-    private WeaponStyle weaponStyle;
-    private boolean skipTickCheck = false;
-
-    @Inject
-    protected Nylocas(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin, config);
-    }
-
-    public void init() {
-        InfoBoxComponent box = new InfoBoxComponent();
-        box.setImage(skillIconManager.getSkillImage(Skill.ATTACK));
-        NyloSelectionBox nyloMeleeOverlay = new NyloSelectionBox(box);
-        nyloMeleeOverlay.setSelected(config.getHighlightMeleeNylo());
-        box = new InfoBoxComponent();
-        box.setImage(skillIconManager.getSkillImage(Skill.MAGIC));
-        NyloSelectionBox nyloMageOverlay = new NyloSelectionBox(box);
-        nyloMageOverlay.setSelected(config.getHighlightMageNylo());
-        box = new InfoBoxComponent();
-        box.setImage(skillIconManager.getSkillImage(Skill.RANGED));
-        NyloSelectionBox nyloRangeOverlay = new NyloSelectionBox(box);
-        nyloRangeOverlay.setSelected(config.getHighlightRangeNylo());
-        nyloSelectionManager = new NyloSelectionManager(nyloMeleeOverlay, nyloMageOverlay, nyloRangeOverlay);
-        nyloSelectionManager.setHidden(!config.nyloOverlay());
-        nylocasAliveCounterOverlay.setHidden(!config.nyloAlivePanel());
-        nylocasAliveCounterOverlay.setNyloAlive(0);
-        nylocasAliveCounterOverlay.setMaxNyloAlive(12);
-        nyloBossAlive = false;
-        tobMode = "";
-        minibossAlive = false;
-        nyloMiniboss = null;
-        nyloBossStyle = "";
-        waveSpawnTicks = 0;
-        stalledWave = false;
-    }
-
-    private void startupNyloOverlay() {
-        mouseManager.registerMouseListener(theatreInputListener);
-        if (nyloSelectionManager != null) {
-            overlayManager.add(nyloSelectionManager);
-            nyloSelectionManager.setHidden(!config.nyloOverlay());
-        }
-
-        if (nylocasAliveCounterOverlay != null) {
-            overlayManager.add(nylocasAliveCounterOverlay);
-            nylocasAliveCounterOverlay.setHidden(!config.nyloAlivePanel());
-        }
-    }
-
-    private void shutdownNyloOverlay() {
-        mouseManager.unregisterMouseListener(theatreInputListener);
-        if (nyloSelectionManager != null) {
-            overlayManager.remove(nyloSelectionManager);
-            nyloSelectionManager.setHidden(true);
-        }
-
-        if (nylocasAliveCounterOverlay != null) {
-            overlayManager.remove(nylocasAliveCounterOverlay);
-            nylocasAliveCounterOverlay.setHidden(true);
-        }
-    }
-
-    public void load() {
-        overlayManager.add(nylocasOverlay);
-        overlayManager.add(nyloTimer);
-        overlayManager.add(waveSpawnInfobox);
-        bossChangeTicks = -1;
-        lastBossId = -1;
-        weaponStyle = null;
-    }
-
-    public void unload() {
-        overlayManager.remove(nylocasOverlay);
-        overlayManager.remove(nyloTimer);
-        overlayManager.remove(waveSpawnInfobox);
-        shutdownNyloOverlay();
-        nyloBossAlive = false;
-        nyloWaveStart = null;
-        nyloActive = false;
-        tobMode = "";
-        minibossAlive = false;
-        nyloBossStyle = "";
-        logTicks = 0;
-        waveSpawnTicks = 0;
-        stalledWave = false;
-        weaponStyle = null;
-        splitsMap.clear();
-        bigNylos.clear();
-    }
-
-    private void resetNylo() {
-        nyloBossAlive = false;
-        nylocasPillars.clear();
-        nylocasNpcs.clear();
-        aggressiveNylocas.clear();
-        setNyloWave(0);
-        currentWave.clear();
-        bossChangeTicks = -1;
-        lastBossId = -1;
-        nylocasBoss = null;
-        weaponId = 0;
-        weaponStyle = null;
-        splitsMap.clear();
-        bigNylos.clear();
-
-        tobMode = "";
-        minibossAlive = false;
-        nyloMiniboss = null;
-        nyloBossStyle = "";
-        logTicks = 0;
-        waveSpawnTicks = 0;
-        stalledWave = false;
-    }
-
-    private void setNyloWave(int wave) {
-        nyloWave = wave;
-        nylocasAliveCounterOverlay.setWave(wave);
-        if (wave >= 3) {
-            isInstanceTimerRunning = false;
-        }
-
-        if (wave != 0) {
-            switch (tobMode) {
-                case "hard":
-                    ticksSinceLastWave = ((NylocasWave) NylocasWave.hmWaves.get(wave)).getWaveDelay();
-                    break;
-                case "story":
-                    ticksSinceLastWave = ((NylocasWave) NylocasWave.smWaves.get(wave)).getWaveDelay();
-                    break;
-                case "normal":
-                    ticksSinceLastWave = ((NylocasWave) NylocasWave.waves.get(wave)).getWaveDelay();
-                    break;
-            }
-        }
-
-        if (wave >= 20 && nylocasAliveCounterOverlay.getMaxNyloAlive() != 24) {
-            nylocasAliveCounterOverlay.setMaxNyloAlive(24);
-        }
-
-        if (wave < 20 && nylocasAliveCounterOverlay.getMaxNyloAlive() != 12) {
-            nylocasAliveCounterOverlay.setMaxNyloAlive(12);
-        }
-
-        if (wave == 31 && wave31Callback != null) {
-            wave31Callback.run();
-        }
-    }
-
-    @Subscribe
-    public void onConfigChanged(ConfigChanged change) {
-        if (change.getKey().equals("nyloOverlay")) {
-            nyloSelectionManager.setHidden(!config.nyloOverlay());
-        }else if (change.getKey().equals("nyloAliveCounter")) {
-            nylocasAliveCounterOverlay.setHidden(!config.nyloAlivePanel());
-        }else if (change.getKey().equals("showLowestPillar") && !config.showLowestPillar()) {
-            client.clearHintArrow();
-        }else if(change.getKey().equals("hidePillars")){
-            plugin.refreshScene();
-            if(config.hidePillars() == SpoonTobConfig.hidePillarsMode.PILLARS){
-                //removeGameObjectsFromScene(ImmutableSet.of(32862), 0);
-            }else if(config.hidePillars() == SpoonTobConfig.hidePillarsMode.CLEAN){
-                //removeGameObjectsFromScene(ImmutableSet.of(32862, 32876, 32899), 0);
-            }
-
-            if(config.hideEggs()) {
-                //removeGameObjectsFromScene(ImmutableSet.of(32939, 32937, 2739, 32865), 0);
-            }
-        }else if(change.getKey().equals("hideEggs")){
-            plugin.refreshScene();
-            if(config.hideEggs()) {
-                //removeGameObjectsFromScene(ImmutableSet.of(32939, 32937, 2739, 32865), 0);
-            }
-
-            if(config.hidePillars() == SpoonTobConfig.hidePillarsMode.PILLARS){
-                //removeGameObjectsFromScene(ImmutableSet.of(32862), 0);
-            }else if(config.hidePillars() == SpoonTobConfig.hidePillarsMode.CLEAN){
-                //removeGameObjectsFromScene(ImmutableSet.of(32862, 32876, 32899), 0);
-            }
-        }
-    }
-
-    @Subscribe
-    public void onNpcSpawned(NpcSpawned npcSpawned) {
-        NPC npc = npcSpawned.getNpc();
-        int id = npc.getId();
-        switch(npc.getId()) {
-            case NYLOCAS_ISCHYROS_8342:
-            case NYLOCAS_TOXOBOLOS_8343:
-            case NYLOCAS_HAGIOS:
-            case NYLOCAS_ISCHYROS_8345:
-            case NYLOCAS_TOXOBOLOS_8346:
-            case NYLOCAS_HAGIOS_8347:
-            case NYLOCAS_ISCHYROS_8348:
-            case NYLOCAS_TOXOBOLOS_8349:
-            case NYLOCAS_HAGIOS_8350:
-            case NYLOCAS_ISCHYROS_8351:
-            case NYLOCAS_TOXOBOLOS_8352:
-            case NYLOCAS_HAGIOS_8353:
-            case NYLOCAS_ISCHYROS_10774: //Story Mode
-            case NYLOCAS_TOXOBOLOS_10775:
-            case NYLOCAS_HAGIOS_10776:
-            case NYLOCAS_ISCHYROS_10777:
-            case NYLOCAS_TOXOBOLOS_10778:
-            case NYLOCAS_HAGIOS_10779:
-            case NYLOCAS_ISCHYROS_10780:
-            case NYLOCAS_TOXOBOLOS_10781:
-            case NYLOCAS_HAGIOS_10782:
-            case NYLOCAS_ISCHYROS_10783:
-            case NYLOCAS_TOXOBOLOS_10784:
-            case NYLOCAS_HAGIOS_10785:
-            case NYLOCAS_ISCHYROS_10791: //Hard Mode
-            case NYLOCAS_TOXOBOLOS_10792:
-            case NYLOCAS_HAGIOS_10793:
-            case NYLOCAS_ISCHYROS_10794:
-            case NYLOCAS_TOXOBOLOS_10795:
-            case NYLOCAS_HAGIOS_10796:
-            case NYLOCAS_ISCHYROS_10797:
-            case NYLOCAS_TOXOBOLOS_10798:
-            case NYLOCAS_HAGIOS_10799:
-            case NYLOCAS_ISCHYROS_10800:
-            case NYLOCAS_TOXOBOLOS_10801:
-            case NYLOCAS_HAGIOS_10802:
-            case NYLOCAS_PRINKIPAS:
-            case NYLOCAS_PRINKIPAS_10804:
-            case NYLOCAS_PRINKIPAS_10805:
-            case NYLOCAS_PRINKIPAS_10806:
-                if (nyloActive) {
-                    if (npc.getId() == NYLOCAS_PRINKIPAS_10804){
-                        minibossAlive = true;
-                        nyloMiniboss = npc;
-                        bossChangeTicks = 10;
-                    } else {
-                        nylocasNpcs.add(new NyloInfo(npc));
-                    }
-
-                    if (minibossAlive) {
-                        nylocasAliveCounterOverlay.setNyloAlive(nylocasNpcs.size() + 3);
-                    } else {
-                        nylocasAliveCounterOverlay.setNyloAlive(nylocasNpcs.size());
-                    }
-                    NyloNPC nyloNPC = matchNpc(npc);
-                    if (nyloNPC != null) {
-                        currentWave.put(nyloNPC, npc);
-                        if (currentWave.size() > 2) {
-                            matchWave();
-                        }
-                    }
-                }
-                setAlive = true;
-                break;
-            case NYLOCAS_VASILIAS:
-            case NYLOCAS_VASILIAS_8355:
-            case NYLOCAS_VASILIAS_8356:
-            case NYLOCAS_VASILIAS_8357:
-            case NYLOCAS_VASILIAS_10786: //Story mode
-            case NYLOCAS_VASILIAS_10787:
-            case NYLOCAS_VASILIAS_10788:
-            case NYLOCAS_VASILIAS_10789:
-            case NYLOCAS_VASILIAS_10807: //Hard mode
-            case NYLOCAS_VASILIAS_10808:
-            case NYLOCAS_VASILIAS_10809:
-            case NYLOCAS_VASILIAS_10810:
-                showHint = false;
-                isInstanceTimerRunning = false;
-                nyloBossStyle = "melee";
-                client.clearHintArrow();
-                nyloBossAlive = true;
-                lastBossId = id;
-                nylocasBoss = npc;
-                meleeBoss = 0;
-                mageBoss = 0;
-                rangeBoss = 0;
-                if (npc.getId() == NYLOCAS_VASILIAS_8355 || npc.getId() == NYLOCAS_VASILIAS_10787 || npc.getId() == NYLOCAS_VASILIAS_10808) {
-                    if (npc.getId() == NYLOCAS_VASILIAS_10787) {
-                        bossChangeTicks = 15;
-                    } else {
-                        bossChangeTicks = 10;
-                    }
-                    meleeBoss++;
-                }
-                break;
-            case NPCID_NYLOCAS_PILLAR:
-            case NPCID_NYLOCAS_SM_PILLAR: //Story Mode
-            case NPCID_NYLOCAS_HM_PILLAR: //Hard Mode
-                nyloActive = true;
-                showHint = true;
-                if (nylocasPillars.size() > 3) {
-                    nylocasPillars.clear();
-                }
-                if (!nylocasPillars.containsKey(npc)) {
-                    nylocasPillars.put(npc, 100);
-                }
-
-                if (npc.getId() == NPCID_NYLOCAS_HM_PILLAR){
-                    tobMode = "hard";
-                } else if (npc.getId() == NPCID_NYLOCAS_SM_PILLAR){
-                    tobMode = "story";
-                } else {
-                    tobMode = "normal";
-                }
-
-                mageSplits = 0;
-                rangeSplits = 0;
-                meleeSplits = 0;
-                preRangeSplits = 0;
-                preMageSplits = 0;
-                preMeleeSplits = 0;
-                postRangeSplits = 0;
-                postMageSplits = 0;
-                postMeleeSplits = 0;
-        }
-
-        if (nyloActive) {
-            switch (id) {
-                case NYLOCAS_ISCHYROS_8345: //Normal mode
-                case NYLOCAS_TOXOBOLOS_8346:
-                case NYLOCAS_HAGIOS_8347:
-                case NYLOCAS_ISCHYROS_10777: //Story mode
-                case NYLOCAS_TOXOBOLOS_10778:
-                case NYLOCAS_HAGIOS_10779:
-                case NYLOCAS_ISCHYROS_10794: //Hard mode
-                case NYLOCAS_TOXOBOLOS_10795:
-                case NYLOCAS_HAGIOS_10796:
-                    bigNylos.add(npc);
-                    break;
-            }
-
-            WorldPoint worldPoint = WorldPoint.fromLocalInstance(client, npc.getLocalLocation());
-            Point spawnLoc = new Point(worldPoint.getRegionX(), worldPoint.getRegionY());
-            if (!spawnTiles.contains(spawnLoc)) {
-                if (npc.getName() != null) {
-                    if (npc.getName().contains("Hagios") && (id == NYLOCAS_HAGIOS || id == NYLOCAS_HAGIOS_10776 || id == NYLOCAS_HAGIOS_10793)) {
-                        mageSplits++;
-                        if (nyloWave < 20) {
-                            preMageSplits++;
-                        } else {
-                            postMageSplits++;
-                        }
-                    } else if (npc.getName().contains("Toxobolos") && (id == NYLOCAS_TOXOBOLOS_8343 || id == NYLOCAS_TOXOBOLOS_10775 || id == NYLOCAS_TOXOBOLOS_10792)) {
-                        rangeSplits++;
-                        if (nyloWave < 20) {
-                            preRangeSplits++;
-                        } else {
-                            postRangeSplits++;
-                        }
-                    } else if (npc.getName().contains("Ischyros") && (id == NYLOCAS_ISCHYROS_8342 || id == NYLOCAS_ISCHYROS_10774 || id == NYLOCAS_ISCHYROS_10791)) {
-                        meleeSplits++;
-                        if (nyloWave < 20) {
-                            preMeleeSplits++;
-                        } else {
-                            postMeleeSplits++;
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onNpcChanged(NpcChanged event){
-        NPC npc = event.getNpc();
-        int id = npc.getId();
-        if (NYLO_BOSS_IDS.contains(id) || NYLO_DEMI_BOSS_IDS.contains(id)) {
-            if (id == NYLOCAS_VASILIAS_10787 || id == NYLOCAS_VASILIAS_10788 || id == NYLOCAS_VASILIAS_10789) {
-                bossChangeTicks = 16;
-            } else {
-                bossChangeTicks = 11;
-            }
-            lastBossId = id;
-
-            if (NYLO_DEMI_BOSS_IDS.contains(id)) {
-                nyloMiniboss = npc;
-            }
-        }
-
-        if (id == NYLOCAS_VASILIAS_8355 || id == NYLOCAS_VASILIAS_10787 || id == NYLOCAS_VASILIAS_10808) {
-            meleeBoss++;
-            nyloBossStyle = "melee";
-        } else if (id == NYLOCAS_VASILIAS_8356 || id == NYLOCAS_VASILIAS_10788 || id == NYLOCAS_VASILIAS_10809) {
-            mageBoss++;
-            nyloBossStyle = "mage";
-        } else if (id == NYLOCAS_VASILIAS_8357 || id == NYLOCAS_VASILIAS_10789 || id == NYLOCAS_VASILIAS_10810) {
-            rangeBoss++;
-            nyloBossStyle = "range";
-        }
-    }
-
-    private void matchWave() {
-        HashSet<NyloNPC> potentialWave = null;
-        Set<NyloNPC> currentWaveKeySet = currentWave.keySet();
-
-        for (int wave = nyloWave + 1; wave <= NylocasWave.MAX_WAVE; wave++) {
-            boolean matched = true;
-            switch (tobMode) {
-                case "hard":
-                    potentialWave = ((NylocasWave) NylocasWave.hmWaves.get(wave)).getWaveData();
-                    break;
-                case "story":
-                    potentialWave = ((NylocasWave) NylocasWave.smWaves.get(wave)).getWaveData();
-                    break;
-                case "normal":
-                    potentialWave = ((NylocasWave) NylocasWave.waves.get(wave)).getWaveData();
-                    break;
-            }
-
-            for (NyloNPC nyloNpc : potentialWave) {
-                if (!currentWaveKeySet.contains(nyloNpc)) {
-                    matched = false;
-                    break;
-                }
-            }
-
-            if (matched) {
-                setNyloWave(wave);
-                stalledWave = false;
-                if(ticksSinceLastWave > 0) {
-                    waveSpawnTicks = ticksSinceLastWave;
-                } else {
-                    waveSpawnTicks = 4;
-                }
-
-                for (NyloNPC nyloNPC : potentialWave) {
-                    if (nyloNPC.isAggressive()) {
-                        aggressiveNylocas.add(currentWave.get(nyloNPC));
-                    }
-                }
-
-                currentWave.clear();
-                return;
-            }
-        }
-    }
-
-    private NyloNPC matchNpc(NPC npc) {
-        WorldPoint p = WorldPoint.fromLocalInstance(client, npc.getLocalLocation());
-        Point point = new Point(p.getRegionX(), p.getRegionY());
-        NylocasSpawnPoint spawnPoint = NylocasSpawnPoint.getLookupMap().get(point);
-
-        if (spawnPoint == null) {
-            return null;
-        }
-
-        NylocasType nylocasType = NylocasType.getLookupMap().get(npc.getId());
-
-        if (nylocasType == null) {
-            return null;
-        }
-
-        return new NyloNPC(nylocasType, spawnPoint);
-    }
-
-
-    @Subscribe
-    public void onNpcDespawned(NpcDespawned npcDespawned) {
-        NPC npc = npcDespawned.getNpc();
-        int id = npc.getId();
-        switch(id) {
-            case NYLOCAS_ISCHYROS_8342:
-            case NYLOCAS_TOXOBOLOS_8343:
-            case NYLOCAS_HAGIOS:
-            case NYLOCAS_ISCHYROS_8345:
-            case NYLOCAS_TOXOBOLOS_8346:
-            case NYLOCAS_HAGIOS_8347:
-            case NYLOCAS_ISCHYROS_8348:
-            case NYLOCAS_TOXOBOLOS_8349:
-            case NYLOCAS_HAGIOS_8350:
-            case NYLOCAS_ISCHYROS_8351:
-            case NYLOCAS_TOXOBOLOS_8352:
-            case NYLOCAS_HAGIOS_8353:
-            case NYLOCAS_ISCHYROS_10774: //Story Mode
-            case NYLOCAS_TOXOBOLOS_10775:
-            case NYLOCAS_HAGIOS_10776:
-            case NYLOCAS_ISCHYROS_10777:
-            case NYLOCAS_TOXOBOLOS_10778:
-            case NYLOCAS_HAGIOS_10779:
-            case NYLOCAS_ISCHYROS_10780:
-            case NYLOCAS_TOXOBOLOS_10781:
-            case NYLOCAS_HAGIOS_10782:
-            case NYLOCAS_ISCHYROS_10783:
-            case NYLOCAS_TOXOBOLOS_10784:
-            case NYLOCAS_HAGIOS_10785:
-            case NYLOCAS_ISCHYROS_10791: //Hard Mode
-            case NYLOCAS_TOXOBOLOS_10792:
-            case NYLOCAS_HAGIOS_10793:
-            case NYLOCAS_ISCHYROS_10794:
-            case NYLOCAS_TOXOBOLOS_10795:
-            case NYLOCAS_HAGIOS_10796:
-            case NYLOCAS_ISCHYROS_10797:
-            case NYLOCAS_TOXOBOLOS_10798:
-            case NYLOCAS_HAGIOS_10799:
-            case NYLOCAS_ISCHYROS_10800:
-            case NYLOCAS_TOXOBOLOS_10801:
-            case NYLOCAS_HAGIOS_10802:
-            case NYLOCAS_PRINKIPAS_10804:
-            case NYLOCAS_PRINKIPAS_10805:
-            case NYLOCAS_PRINKIPAS_10806:
-                if (nylocasNpcs.removeIf(n -> n.nylo != null && n.nylo == npc) || NYLO_DEMI_BOSS_IDS.contains(id)) {
-                    if (NYLO_DEMI_BOSS_IDS.contains(id)) {
-                        nyloMiniboss = null;
-                        minibossAlive = false;
-                        bossChangeTicks = -1;
-                    }
-
-                    if (minibossAlive) {
-                        nylocasAliveCounterOverlay.setNyloAlive(nylocasNpcs.size() + 3);
-                    } else {
-                        nylocasAliveCounterOverlay.setNyloAlive(nylocasNpcs.size());
-                    }
-                }
-
-                aggressiveNylocas.remove(npc);
-                if (nyloWave == 31 && nylocasNpcs.size() == 0) {
-                    if ((config.nyloSplitsMsg() == SpoonTobConfig.nyloSplitsMessage.WAVES || config.nyloSplitsMsg() == SpoonTobConfig.nyloSplitsMessage.BOTH)
-                            && config.splitMsgTiming() == SpoonTobConfig.splitsMsgTiming.CLEANUP) {
-                        if (config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.CAP || config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.BOTH) {
-                            client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Pre-cap splits: <col=00FFFF>" + preMageSplits + "</col> - <col=00FF00>"
-                                    + preRangeSplits + "</col> - <col=ff0000>" + preMeleeSplits + "</col> Post-cap splits: <col=00FFFF>" + postMageSplits + "</col> - <col=00FF00>"
-                                    + postRangeSplits + "</col> - <col=ff0000>" + postMeleeSplits, null);
-                        }
-                        if (config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.TOTAL || config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.BOTH) {
-                            client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Small splits: <col=00FFFF>" + mageSplits + "</col> - <col=00FF00>"
-                                    + rangeSplits + "</col> - <col=ff0000>" + meleeSplits + "</col> ", null);
-                        }
-                    }
-                    if (endOfWavesCallback != null) {
-                        endOfWavesCallback.run();
-                    }
-                }
-                setAlive = false;
-                break;
-            case NYLOCAS_VASILIAS:
-            case NYLOCAS_VASILIAS_8355:
-            case NYLOCAS_VASILIAS_8356:
-            case NYLOCAS_VASILIAS_8357:
-            case NYLOCAS_VASILIAS_10786: //Story mode
-            case NYLOCAS_VASILIAS_10787:
-            case NYLOCAS_VASILIAS_10788:
-            case NYLOCAS_VASILIAS_10789:
-            case NYLOCAS_VASILIAS_10807: //Hard mode
-            case NYLOCAS_VASILIAS_10808:
-            case NYLOCAS_VASILIAS_10809:
-            case NYLOCAS_VASILIAS_10810:
-                nyloBossAlive = false;
-                nylocasBoss = null;
-                break;
-            case NPCID_NYLOCAS_PILLAR:
-            case NPCID_NYLOCAS_SM_PILLAR: //Story Mode
-            case NPCID_NYLOCAS_HM_PILLAR: //Hard Mode
-                if (nylocasPillars.containsKey(npc)) {
-                    nylocasPillars.remove(npc);
-                }
-
-                if (nylocasPillars.size() < 1) {
-                    nyloWaveStart = null;
-                    nyloActive = false;
-                }
-        }
-    }
-
-    @Subscribe
-    public void onVarbitChanged(VarbitChanged event) {
-        int[] varps = client.getVarps();
-        int newVarbit6447 = client.getVarbitValue(varps, 6447);
-        if (isInNyloRegion() && newVarbit6447 != 0 && newVarbit6447 != varbit6447) {
-            nyloWaveStart = Instant.now();
-            if (nylocasAliveCounterOverlay != null) {
-                nylocasAliveCounterOverlay.setNyloWaveStart(nyloWaveStart);
-            }
-        }
-
-        if (TheatreRegions.inRegion(client, TheatreRegions.NYLOCAS)) {
-            nyloActive = client.getVarbitValue(6447) != 0;
-        }
-
-        varbit6447 = newVarbit6447;
-    }
-
-    @Subscribe
-    public void onGameStateChanged(GameStateChanged gameStateChanged) {
-        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
-            if (isInNyloRegion()) {
-                startupNyloOverlay();
-
-                if (config.hidePillars() == SpoonTobConfig.hidePillarsMode.PILLARS) {
-                    removeGameObjectsFromScene(ImmutableSet.of(32862), 0);
-                } else if (config.hidePillars() == SpoonTobConfig.hidePillarsMode.CLEAN) {
-                    removeGameObjectsFromScene(ImmutableSet.of(32862, 32876, 32899), 0);
-                }
-
-                if (config.hideEggs()) {
-                    removeGameObjectsFromScene(ImmutableSet.of(32939, 32937, 2739, 32865), 0);
-                }
-            } else {
-                if (!nyloSelectionManager.isHidden() || !nylocasAliveCounterOverlay.isHidden()) {
-                    shutdownNyloOverlay();
-                }
-
-                resetNylo();
-                isInstanceTimerRunning = false;
-            }
-
-            nextInstance = true;
-        }
-
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        if (nyloActive) {
-            if (skipTickCheck) {
-                skipTickCheck = false;
-            } else {
-                if (client.getLocalPlayer() == null || client.getLocalPlayer().getPlayerComposition() == null) {
-                    return;
-                }
-                int equippedWeapon = ObjectUtils.defaultIfNull(client.getLocalPlayer().getPlayerComposition().getEquipmentId(KitType.WEAPON), -1);
-                weaponStyle = WeaponMap.StyleMap.get(equippedWeapon);
-            }
-
-            if (waveSpawnTicks >= 0) {
-                waveSpawnTicks--;
-                if (waveSpawnTicks < 0 && nylocasAliveCounterOverlay.getNyloAlive() >= nylocasAliveCounterOverlay.getMaxNyloAlive()) {
-                    waveSpawnTicks = 3;
-                    stalledWave = true;
-                }
-            }
-            meleeNyloRaveColors.clear();
-            rangeNyloRaveColors.clear();
-            mageNyloRaveColors.clear();
-
-            for (int i = nylocasNpcs.size() - 1; i >= 0; i--)
-            {
-                NyloInfo ni = nylocasNpcs.get(i);
-                ni.ticks--;
-                if (ni.ticks < 0 || ni.nylo.isDead() || !ni.alive)
-                {
-                    nylocasNpcs.remove(ni);
-                    continue;
-                }
-
-                if (MELEE_IDS.contains(ni.nylo.getId())) {
-                    meleeNyloRaveColors.add(Color.getHSBColor(new Random().nextFloat(), 1.0F, 1.0F));
-                } else if (RANGE_IDS.contains(ni.nylo.getId())) {
-                    rangeNyloRaveColors.add(Color.getHSBColor(new Random().nextFloat(), 1.0F, 1.0F));
-                } else if (MAGIC_IDS.contains(ni.nylo.getId())) {
-                    mageNyloRaveColors.add(Color.getHSBColor(new Random().nextFloat(), 1.0F, 1.0F));
-                }
-            }
-
-            for (NPC pillar : nylocasPillars.keySet())
-            {
-                int healthPercent = pillar.getHealthRatio();
-                if (healthPercent > -1)
-                {
-                    nylocasPillars.replace(pillar, healthPercent);
-                }
-            }
-
-            boolean foundPillar = false;
-            for (NPC npc : this.client.getNpcs()) {
-                if (npc.getId() == NPCID_NYLOCAS_PILLAR || npc.getId() == NPCID_NYLOCAS_SM_PILLAR || npc.getId() == NPCID_NYLOCAS_HM_PILLAR) {
-                    foundPillar = true;
-                    break;
-                }
-            }
-            NPC minNPC = null;
-            int minHealth = 100;
-            if (foundPillar) {
-                for (NPC npc : this.nylocasPillars.keySet()) {
-                    int health = (npc.getHealthRatio() > -1) ? npc.getHealthRatio() : this.nylocasPillars.get(npc);
-                    this.nylocasPillars.replace(npc, health);
-                    if (health < minHealth) {
-                        minHealth = health;
-                        minNPC = npc;
-                    }
-                }
-                if (minNPC != null && this.config.showLowestPillar() && showHint)
-                    this.client.setHintArrow(minNPC);
-            } else {
-                this.nylocasPillars.clear();
-            }
-
-            if ((instanceTimer + 1) % 4 == 1 && nyloWave < NylocasWave.MAX_WAVE && ticksSinceLastWave < 2) {
-                if (config.nyloStallMessage() && nylocasAliveCounterOverlay.getNyloAlive() >= nylocasAliveCounterOverlay.getMaxNyloAlive()) {
-                    client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Stalled wave: <col=FF0000>" + nyloWave + " </col>Time:<col=FF0000> "
-                            + nylocasAliveCounterOverlay.getFormattedTime() + " </col>Nylos alive:<col=FF0000> " + nylocasAliveCounterOverlay.getNyloAlive() + "/"
-                            + nylocasAliveCounterOverlay.getMaxNyloAlive(), "", false);
-                }
-            }
-
-            ticksSinceLastWave = Math.max(0, ticksSinceLastWave - 1);
-
-            if (nylocasBoss != null && nyloBossAlive) {
-                bossChangeTicks--;
-                if (nylocasBoss.getId() != lastBossId) {
-                    lastBossId = nylocasBoss.getId();
-                    if (nylocasBoss.getId() == 10787 || nylocasBoss.getId() == 10788 || nylocasBoss.getId() == 10789) {
-                        bossChangeTicks = 15;
-                    } else {
-                        bossChangeTicks = 10;
-                    }
-                }
-            } else if (minibossAlive && nyloMiniboss != null){
-                bossChangeTicks--;
-            }
-
-            if (!splitsMap.isEmpty())
-            {
-                splitsMap.values().removeIf((value) -> value <= 1);
-                splitsMap.replaceAll((key, value) -> value - 1);
-            }
-        }
-
-        instanceTimer = (instanceTimer + 1) % 4;
-    }
-
-    @Subscribe
-    protected void onClientTick(ClientTick event) {
-        List<Player> players = client.getPlayers();
-        for (Player player : players)
-        {
-            if (player.getWorldLocation() != null)
-            {
-                LocalPoint lp = player.getLocalLocation();
-
-                WorldPoint wp = WorldPoint.fromRegion(player.getWorldLocation().getRegionID(), 5, 33, 0);
-                LocalPoint lp1 = LocalPoint.fromWorld(client, wp.getX(), wp.getY());
-                if (lp1 != null)
-                {
-                    Point base = new Point(lp1.getSceneX(), lp1.getSceneY());
-                    Point point = new Point(lp.getSceneX() - base.getX(), lp.getSceneY() - base.getY());
-
-                    if (isInBloatRegion() && point.getX() == -1 && (point.getY() == -1 || point.getY() == -2 || point.getY() == -3) && nextInstance)
-                    {
-                        client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Nylo instance timer started.", "");
-                        instanceTimer = 3;
-                        isInstanceTimerRunning = true;
-                        nextInstance = false;
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    private void onAnimationChanged(AnimationChanged event) {
-        if (!bigNylos.isEmpty() && event.getActor() instanceof NPC) {
-            NPC npc = (NPC) event.getActor();
-            int anim = npc.getAnimation();
-            if (bigNylos.contains(npc)) {
-                if (anim == 8005 || anim == 7991 || anim == 7998) {
-                    splitsMap.putIfAbsent(npc, 6);
-                    bigNylos.remove(npc);
-                }
-                if (anim == 8006 || anim == 7992 || anim == 8000) {
-                    splitsMap.putIfAbsent(npc, 4);
-                    bigNylos.remove(npc);
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onChatMessage(ChatMessage event){
-        String mes = event.getMessage();
-        if (mes.contains("Wave 'The Nylocas'") && mes.contains("complete!<br>Duration: <col=ff0000>")){
-            if ((config.nyloSplitsMsg() == SpoonTobConfig.nyloSplitsMessage.WAVES || config.nyloSplitsMsg() == SpoonTobConfig.nyloSplitsMessage.BOTH)
-                    && config.splitMsgTiming() == SpoonTobConfig.splitsMsgTiming.FINISHED){
-                if (config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.CAP || config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.BOTH){
-                    client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Pre-cap splits: <col=00FFFF>" + preMageSplits + "</col> - <col=00FF00>"
-                            + preRangeSplits + "</col> - <col=ff0000>" + preMeleeSplits + "</col> Post-cap splits: <col=00FFFF>" + postMageSplits + "</col> - <col=00FF00>"
-                            + postRangeSplits + "</col> - <col=ff0000>" + postMeleeSplits, null);
-                } if (config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.TOTAL || config.smallSplitsType() == SpoonTobConfig.smallSplitsMode.BOTH)
-                    client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Small splits: <col=00FFFF>" + mageSplits + "</col> - <col=00FF00>"
-                            + rangeSplits + "</col> - <col=ff0000>" + meleeSplits + "</col> ", null);
-            }
-            if (config.nyloSplitsMsg() == SpoonTobConfig.nyloSplitsMessage.BOSS || config.nyloSplitsMsg() == SpoonTobConfig.nyloSplitsMessage.BOTH){
-                client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", "Boss phases: <col=00FFFF>" + mageBoss + "</col> - <col=00FF00>"
-                        + rangeBoss + "</col> - <col=ff0000>" + meleeBoss + "</col> ", null);
-            }
-        }
-    }
-
-    @Subscribe
-    public void onMenuOptionClicked(MenuOptionClicked event) {
-        if (event.getMenuOption().equalsIgnoreCase("wield")) {
-            WeaponStyle newStyle = WeaponMap.StyleMap.get(event.getItemId());
-            if (newStyle != null) {
-                skipTickCheck = true;
-                weaponStyle = newStyle;
-            }
-        } else if ((config.wheelchairNylo() == SpoonTobConfig.wheelchairMode.BOSS || config.wheelchairNylo() == SpoonTobConfig.wheelchairMode.BOTH)
-                && nylocasBoss != null && event.getMenuTarget().contains(BOSS_NYLO) && event.getMenuOption().equalsIgnoreCase("attack") && weaponStyle != null) {
-            switch (weaponStyle) {
-                case TRIDENTS:
-                case MAGIC:
-                    if (nylocasBoss.getId() != NYLOCAS_VASILIAS_8356 && nylocasBoss.getId() != NYLOCAS_VASILIAS_10788
-                            && nylocasBoss.getId() != NYLOCAS_VASILIAS_10809) {
-                        event.consume();
-                    }
-                    break;
-                case MELEE:
-                    if (nylocasBoss.getId() != NYLOCAS_VASILIAS_8355 && nylocasBoss.getId() != NYLOCAS_VASILIAS_10787
-                            && nylocasBoss.getId() != NYLOCAS_VASILIAS_10808) {
-                        event.consume();
-                    }
-                    break;
-                case RANGE:
-                    if (nylocasBoss.getId() != NYLOCAS_VASILIAS_8357 && nylocasBoss.getId() != NYLOCAS_VASILIAS_10789
-                            && nylocasBoss.getId() != NYLOCAS_VASILIAS_10810) {
-                        event.consume();
-                    }
-                    break;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onMenuEntryAdded(MenuEntryAdded event) {
-        if (nyloActive) {
-            String target = event.getTarget();
-            String option = event.getOption();
-            MenuEntry nEntry = event.getMenuEntry();
-            MenuEntry nbEntry = event.getMenuEntry();
-
-            if (config.nyloRecolorMenu() && (option.equalsIgnoreCase("attack") || event.getType() == MenuAction.WIDGET_TARGET_ON_NPC.getId())) {
-                MenuEntry[] entries = client.getMenuEntries();
-                MenuEntry toEdit = entries[entries.length - 1];
-
-                String strippedTarget = Text.removeTags(target);
-                int timeAlive;
-                String timeAliveString = "";
-
-                NPC npc = client.getCachedNPCs()[toEdit.getIdentifier()];
-                if (npc != null && npc.getComposition() != null) {
-                    boolean isBig = npc.getComposition().getSize() > 1;
-                    for (NyloInfo ni : nylocasNpcs) {
-                        if (config.nyloTicksMenu() && ni.nylo == npc) {
-                            if (config.nyloTimeAliveCountStyle() == SpoonTobConfig.nylotimealive.COUNTUP) {
-                                timeAlive = 52 - ni.ticks;
-                                timeAliveString = ColorUtil.prependColorTag(" - " + timeAlive, new Color(255 * timeAlive / 52, 255 * (52 - timeAlive) / 52, 0));
-                            } else {
-                                timeAlive = ni.ticks;
-                                timeAliveString = ColorUtil.prependColorTag(" - " + timeAlive, new Color(255 * (52 - timeAlive) / 52, 255 * timeAlive / 52, 0));
-                            }
-                            break;
-                        }
-                    }
-
-                    if (strippedTarget.contains(MAGE_NYLO)) {
-                        if (isBig) {
-                            toEdit.setTarget(ColorUtil.prependColorTag(strippedTarget, new Color(0, 190, 190)) + timeAliveString);
-                        } else {
-                            toEdit.setTarget(ColorUtil.prependColorTag(strippedTarget, new Color(0, 255, 255)) + timeAliveString);
-                        }
-                    } else if (strippedTarget.contains(MELEE_NYLO)) {
-                        if (isBig) {
-                            toEdit.setTarget(ColorUtil.prependColorTag(strippedTarget, new Color(190, 150, 150)) + timeAliveString);
-                        } else {
-                            toEdit.setTarget(ColorUtil.prependColorTag(strippedTarget, new Color(255, 188, 188)) + timeAliveString);
-                        }
-                    } else if (strippedTarget.contains(RANGE_NYLO)) {
-                        if (isBig) {
-                            toEdit.setTarget(ColorUtil.prependColorTag(strippedTarget, new Color(0, 190, 0)) + timeAliveString);
-                        } else {
-                            toEdit.setTarget(ColorUtil.prependColorTag(strippedTarget, new Color(0, 255, 0)) + timeAliveString);
-                        }
-                    }
-                    client.setMenuEntries(entries);
-                }
-            }
-
-            if ((config.wheelchairNylo() == SpoonTobConfig.wheelchairMode.WAVES || config.wheelchairNylo() == SpoonTobConfig.wheelchairMode.BOTH)
-                    && option.equalsIgnoreCase("attack") && weaponStyle != null) {
-                switch (weaponStyle) {
-                    case TRIDENTS:
-                        if (target.contains(MELEE_NYLO) || target.contains(RANGE_NYLO)) {
-                            nEntry.setDeprioritized(true);
-                        }
-                        break;
-                    case MAGIC:
-                        if (config.manualCast()) {
-                            if (target.contains(MELEE_NYLO) || target.contains(RANGE_NYLO) || target.contains(MAGE_NYLO)) {
-                                nEntry.setDeprioritized(true);
-                            }
-                        } else {
-                            if (target.contains(MELEE_NYLO) || target.contains(RANGE_NYLO)) {
-                                nEntry.setDeprioritized(true);
-                            }
-                        }
-                        break;
-                    case MELEE:
-                        if (target.contains(RANGE_NYLO) || target.contains(MAGE_NYLO)) {
-                            nEntry.setDeprioritized(true);
-                        }
-                        break;
-                    case RANGE:
-                        if (target.contains(MELEE_NYLO) || target.contains(MAGE_NYLO)) {
-                            nEntry.setDeprioritized(true);
-                        }
-                        break;
-                    case CHINS:
-                        if (!config.ignoreChins() && (target.contains(MELEE_NYLO) || target.contains(MAGE_NYLO))) {
-                            nEntry.setDeprioritized(true);
-                        }
-                        break;
-                }
-            }
-
-            if ((config.wheelchairNylo() == SpoonTobConfig.wheelchairMode.BOSS || config.wheelchairNylo() == SpoonTobConfig.wheelchairMode.BOTH)
-                    && nyloMiniboss != null && target.contains(DEMIBOSS_NYLO) && option.equalsIgnoreCase("attack") && weaponStyle != null) {
-                switch (weaponStyle) {
-                    case TRIDENTS:
-                    case MAGIC:
-                        if (nyloMiniboss.getId() != NYLOCAS_PRINKIPAS_10805) {
-                            nbEntry.setDeprioritized(true);
-                        }
-                        break;
-                    case MELEE:
-                        if (nyloMiniboss.getId() != NYLOCAS_PRINKIPAS_10804) {
-                            nbEntry.setDeprioritized(true);
-                        }
-                        break;
-                    case RANGE:
-                        if (nyloMiniboss.getId() != NYLOCAS_PRINKIPAS_10806) {
-                            nbEntry.setDeprioritized(true);
-                        }
-                        break;
-                }
-            }
-        }
-    }
-
-    static String stripColor(String str) {
-        return str.replaceAll("(<col=[0-9a-f]+>|</col>)", "");
-    }
-
-    @Subscribe
-    public void onMenuOpened(MenuOpened menu) {
-        if (config.nyloRecolorMenu() && nyloActive && !nyloBossAlive) {
-            client.setMenuEntries(Arrays.stream(menu.getMenuEntries()).filter((s) -> !s.getOption().equals("Examine")).toArray(MenuEntry[]::new));
-        }
-    }
-
-    public void removeGameObjectsFromScene(Set<Integer> objectIDs, int plane) {
-        Scene scene = client.getScene();
-        Tile[][] tiles = scene.getTiles()[plane];
-        for (int x = 0; x < 104; x++) {
-            for (int y = 0; y < 104; y++) {
-                Tile tile = tiles[x][y];
-                if (tile != null) {
-                    if (objectIDs != null) {
-                        Arrays.stream(tile.getGameObjects()).filter(obj -> (obj != null && objectIDs.contains(obj.getId()))).findFirst().ifPresent(scene::removeGameObject);
-                    }
-                }
-            }
-        }
-    }
-
-    boolean isInNyloRegion() {
-        return client.isInInstancedRegion() && client.getMapRegions().length > 0 && client.getMapRegions()[0] == NYLO_MAP_REGION;
-    }
-
-    private boolean isInBloatRegion() {
-        return client.isInInstancedRegion() && client.getMapRegions().length > 0 && client.getMapRegions()[0] == BLOAT_MAP_REGION;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatPath.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatPath.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatPath.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatPath.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,75 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def;
-
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.SSLine;
-import org.apache.commons.lang3.tuple.ImmutablePair;
-import org.apache.commons.lang3.tuple.Pair;
-
-import java.util.Arrays;
-import java.util.List;
-
-public enum BloatPath implements IPath {
-    N_PATH {
-        public List<Pair<SSLine[], int[]>> getCornerSafespots(SSLine[][][] bloatGrid) {
-            return Arrays.asList(new ImmutablePair<>(IPath.getSECornerLines(bloatGrid), SE_OFFSETS), new ImmutablePair<>(IPath.getSWCornerLines(bloatGrid), SW_OFFSETS));
-        }
-
-        public SSLine[] getSideSafespotLines(SSLine[][][] bloatGrid) {
-            return IPath.getNorthLines(bloatGrid);
-        }
-
-        public boolean areOffsetsNegative() {
-            return true;
-        }
-
-        public boolean shouldOffsetY() {
-            return true;
-        }
-    },
-    E_PATH {
-        public List<Pair<SSLine[], int[]>> getCornerSafespots(SSLine[][][] bloatGrid) {
-            return Arrays.asList(new ImmutablePair<>(IPath.getSWCornerLines(bloatGrid), SW_OFFSETS), new ImmutablePair<>(IPath.getNWCornerLines(bloatGrid), NW_OFFSETS));
-        }
-
-        public SSLine[] getSideSafespotLines(SSLine[][][] bloatGrid) {
-            return IPath.getEastLines(bloatGrid);
-        }
-
-        public boolean areOffsetsNegative() {
-            return true;
-        }
-
-        public boolean shouldOffsetX() {
-            return true;
-        }
-    },
-    S_PATH {
-        public List<Pair<SSLine[], int[]>> getCornerSafespots(SSLine[][][] bloatGrid) {
-            return Arrays.asList(new ImmutablePair<>(IPath.getNWCornerLines(bloatGrid), NW_OFFSETS), new ImmutablePair<>(IPath.getNECornerLines(bloatGrid), NE_OFFSETS));
-        }
-
-        public SSLine[] getSideSafespotLines(SSLine[][][] bloatGrid) {
-            return IPath.getSouthLines(bloatGrid);
-        }
-
-        public boolean shouldOffsetY() {
-            return true;
-        }
-    },
-    W_PATH {
-        public List<Pair<SSLine[], int[]>> getCornerSafespots(SSLine[][][] bloatGrid) {
-            return Arrays.asList(new ImmutablePair<>(IPath.getNECornerLines(bloatGrid), NE_OFFSETS), new ImmutablePair<>(IPath.getSECornerLines(bloatGrid), SE_OFFSETS));
-        }
-
-        public SSLine[] getSideSafespotLines(SSLine[][][] bloatGrid) {
-            return IPath.getWestLines(bloatGrid);
-        }
-
-        public boolean shouldOffsetX() {
-            return true;
-        }
-    },
-    UNKNOWN;
-
-    BloatPath() {
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloTimer.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloTimer.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloTimer.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloTimer.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,45 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import net.runelite.api.Client;
-import net.runelite.api.MenuAction;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-import net.runelite.client.ui.overlay.OverlayMenuEntry;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.components.LineComponent;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class NyloTimer extends OverlayPanel {
-    private final Client client;
-    private final SpoonTobPlugin plugin;
-    private final SpoonTobConfig config;
-    private Nylocas nylo;
-
-    @Inject
-    public NyloTimer(Client client, SpoonTobPlugin plugin, SpoonTobConfig config, Nylocas nylo) {
-        super(plugin);
-        this.client = client;
-        this.nylo = nylo;
-        this.plugin = plugin;
-        this.config = config;
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, "Configure", "Theatre xarpus overlay"));
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        panelComponent.getChildren().clear();
-        if(config.entryInstanceTimer() == SpoonTobConfig.instancerTimerMode.OVERLAY && TheatreRegions.inRegion(client, TheatreRegions.NYLOCAS)
-                && nylo.isInstanceTimerRunning()) {
-            panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth("Tick:   ") + 10, 0));
-            panelComponent.getChildren().add(LineComponent.builder()
-                    .left("Tick: ")
-                    .right(String.valueOf(nylo.getInstanceTimer()))
-                    .build());
-        }
-        return super.render(graphics);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/SotetsegOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/SotetsegOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/SotetsegOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/SotetsegOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,232 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Sotetseg;
-
-import net.runelite.api.Perspective;
-import net.runelite.api.Point;
-import net.runelite.api.Projectile;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.game.SkillIconManager;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayUtil;
-import net.runelite.client.util.ImageUtil;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.awt.image.RescaleOp;
-import java.util.Random;
-
-public class SotetsegOverlay extends RoomOverlay {
-    @Inject
-    private Sotetseg sotetseg;
-    @Inject
-    private SkillIconManager iconManager;
-
-    @Inject
-    protected SotetsegOverlay(SpoonTobConfig config) {
-        super(config);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (this.sotetseg.isSotetsegActive()) {
-            this.displaySotetsegCounters(graphics);
-
-            if (config.sotetsegMaze()) {
-                int counter = 1;
-                for (Point p : sotetseg.getRedTiles())
-                {
-                    WorldPoint wp = sotetseg.worldPointFromMazePoint(p);
-                    drawTile(graphics, wp, Color.GREEN, 1, 255, 0);
-                    LocalPoint lp = LocalPoint.fromWorld(client, wp);
-                    if (lp != null && !sotetseg.isWasInUnderWorld())
-                    {
-                        Point textPoint = Perspective.getCanvasTextLocation(client, graphics, lp, String.valueOf(counter), 0);
-                        if (textPoint != null)
-                        {
-                            renderTextLocation(graphics, String.valueOf(counter), Color.GREEN, textPoint);
-                        }
-                    }
-                    counter++;
-                }
-
-                for (Point p : sotetseg.getGreenTiles())
-                {
-                    WorldPoint wp = sotetseg.worldPointFromMazePoint(p);
-                    drawTile(graphics, wp, Color.GREEN, 1, 255, 0);
-                }
-            }
-
-            if (config.sotetsegShowOrbs() != SpoonTobConfig.soteOrbMode.OFF || config.sotetsegShowNuke() != SpoonTobConfig.soteDeathballOverlayMode.OFF) {
-                for (Projectile p : client.getProjectiles()) {
-                    int id = p.getId();
-                    Point point = Perspective.localToCanvas(client, new LocalPoint((int)p.getX(), (int)p.getY()), 0, Perspective.getTileHeight(client, new LocalPoint((int)p.getX(), (int)p.getY()), p.getFloor()) - (int)p.getZ());
-                    String ticks = String.valueOf(p.getRemainingCycles() / 30);
-
-                    if (point != null) {
-                        if (config.sotetsegShowOrbs() == SpoonTobConfig.soteOrbMode.HATS || config.sotetsegShowOrbs() == SpoonTobConfig.soteOrbMode.BOTH) {
-                            BufferedImage icon;
-
-                            if (id == Sotetseg.SOTETSEG_MAGE_ORB && p.getInteracting() == client.getLocalPlayer()) {
-                                if (config.raveHats() == SpoonTobConfig.raveHatsMode.RAVE || config.raveHats() == SpoonTobConfig.raveHatsMode.TURBO) {
-                                    icon = ImageUtil.loadImageResource(SpoonTobPlugin.class, "magic" + sotetseg.mageHatNum + ".png");
-                                } else if (config.raveHats() == SpoonTobConfig.raveHatsMode.EPILEPSY) {
-                                    icon = ImageUtil.loadImageResource(SpoonTobPlugin.class, "magic" + (new Random().nextInt(8) + 1) + ".png");
-                                } else {
-                                    icon = sotetseg.mageIcon;
-                                }
-
-                                Point iconlocation = new Point(point.getX() - icon.getWidth() / 2, point.getY() - 30);
-
-                                if (config.raveHats() == SpoonTobConfig.raveHatsMode.TURBO) {
-                                    graphics.drawImage(icon, iconlocation.getX(), iconlocation.getY(), sotetseg.turboHatWidth, sotetseg.turboHatHeight, null);
-                                } else {
-                                    OverlayUtil.renderImageLocation(graphics, iconlocation, icon);
-                                }
-
-                                if (p.getInteracting() == client.getLocalPlayer()) {
-                                    OverlayUtil.renderImageLocation(graphics, iconlocation, icon);
-                                }
-                            }
-
-                            if (id == Sotetseg.SOTETSEG_RANGE_ORB && p.getInteracting() == client.getLocalPlayer()) {
-                                if (config.raveHats() == SpoonTobConfig.raveHatsMode.RAVE || config.raveHats() == SpoonTobConfig.raveHatsMode.TURBO) {
-                                    icon = ImageUtil.loadImageResource(SpoonTobPlugin.class, "ranged" + sotetseg.rangeHatNum + ".png");
-                                } else if (config.raveHats() == SpoonTobConfig.raveHatsMode.EPILEPSY) {
-                                    icon = ImageUtil.loadImageResource(SpoonTobPlugin.class, "ranged" + (new Random().nextInt(8) + 1) + ".png");
-                                } else {
-                                    icon = sotetseg.rangeIcon;
-                                }
-
-                                Point iconlocation = new Point(point.getX() - icon.getWidth() / 2, point.getY() - 30);
-
-                                if (config.raveHats() == SpoonTobConfig.raveHatsMode.TURBO) {
-                                    graphics.drawImage(icon, iconlocation.getX(), iconlocation.getY(), sotetseg.turboHatWidth, sotetseg.turboHatHeight, null);
-                                } else {
-                                    OverlayUtil.renderImageLocation(graphics, iconlocation, icon);
-                                }
-
-                                if (p.getInteracting() == client.getLocalPlayer()) {
-                                    OverlayUtil.renderImageLocation(graphics, iconlocation, icon);
-                                }
-
-                            }
-                        }
-
-                        if ((p.getInteracting() == client.getLocalPlayer()) && (id == Sotetseg.SOTETSEG_MAGE_ORB || id == Sotetseg.SOTETSEG_RANGE_ORB)
-                                && (config.sotetsegShowOrbs() == SpoonTobConfig.soteOrbMode.TICKS || config.sotetsegShowOrbs() == SpoonTobConfig.soteOrbMode.BOTH)) {
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, ticks, (id == Sotetseg.SOTETSEG_MAGE_ORB ? Color.CYAN : Color.GREEN), point);
-                            } else {
-                                renderSteroidsTextLocation(graphics, ticks, 17, Font.BOLD, (id == Sotetseg.SOTETSEG_MAGE_ORB ? Color.CYAN : Color.GREEN), point);
-                            }
-                        }
-
-                        if (id == Sotetseg.SOTETSEG_BIG_AOE_ORB && (config.sotetsegShowNuke() == SpoonTobConfig.soteDeathballOverlayMode.TICKS
-                                || config.sotetsegShowNuke() == SpoonTobConfig.soteDeathballOverlayMode.BOTH)) {
-                            Color color = Color.ORANGE;
-                            if (config.deathTicksOnPlayer()) {
-                                point = Perspective.getCanvasTextLocation(client, graphics, p.getInteracting().getLocalLocation(), ticks, config.deathballOffset());
-
-                                if (config.fontStyle()) {
-                                    renderTextLocation(graphics, ticks, Color.WHITE, point);
-                                } else {
-                                    renderSteroidsTextLocation(graphics, ticks, config.deathballSize(), Font.BOLD, color, point);
-                                }
-                            } else {
-                                if (config.fontStyle()) {
-                                    renderTextLocation(graphics, ticks, color, point);
-                                } else {
-                                    renderSteroidsTextLocation(graphics, ticks, 20, Font.BOLD, color, point);
-                                }
-                            }
-                            if (config.displayDeathBall()) {
-                                renderPoly(graphics, config.displayDeathBallColor(), p.getInteracting().getCanvasTilePoly());
-                            }
-                            Point imagelocation = new Point(point.getX() - Sotetseg.TACTICAL_NUKE_OVERHEAD.getWidth() / 2, point.getY() - 60);
-                            if (config.sotetsegShowNuke() == SpoonTobConfig.soteDeathballOverlayMode.NUKE || config.sotetsegShowNuke() == SpoonTobConfig.soteDeathballOverlayMode.BOTH) {
-                                OverlayUtil.renderImageLocation(graphics, imagelocation, Sotetseg.TACTICAL_NUKE_OVERHEAD);
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    private void displaySotetsegCounters(Graphics2D graphics) {
-        if (this.sotetseg.sotetsegTicks > 0 && sotetseg.sotetsegNPC != null) {
-            String text = "";
-            String yuriText = "";
-            if(config.deathballInfobox() == SpoonTobConfig.soteDeathballMode.OVERLAY || config.deathballInfobox() == SpoonTobConfig.soteDeathballMode.BOTH){
-                if (config.deathballSingleLine()) {
-                    if (sotetseg.sotetsegAttacksLeft == 0) {
-                        text += "Nuke";
-                    } else {
-                        text += sotetseg.sotetsegAttacksLeft;
-                    }
-                } else {
-                    if (sotetseg.sotetsegAttacksLeft == 0) {
-                        yuriText = "Nuke";
-                    } else {
-                        yuriText = String.valueOf(sotetseg.sotetsegAttacksLeft);
-                    }
-                }
-            }
-
-            if(config.showSotetsegAttackTicks()){
-                if(text.equals("")){
-                    text += this.getSotetsegTicksString();
-                }else {
-                    text += " : " + this.getSotetsegTicksString();
-                }
-            }
-
-            Point textLocation = sotetseg.sotetsegNPC.getCanvasTextLocation(graphics, text, 50);
-            if (config.fontStyle()) {
-                this.renderTextLocation(graphics, text, Color.WHITE, textLocation);
-                if(!config.deathballSingleLine() && !yuriText.equals("")) {
-                    Point yuriTextLocation = sotetseg.sotetsegNPC.getCanvasTextLocation(graphics, yuriText, 200);
-                    renderTextLocation(graphics, yuriText, Color.ORANGE, yuriTextLocation);
-                }
-            } else {
-                renderResizeTextLocation(graphics, text, 14, Font.BOLD, Color.WHITE, textLocation);
-                if(!config.deathballSingleLine() && !yuriText.equals("")) {
-                    Point yuriTextLocation = sotetseg.sotetsegNPC.getCanvasTextLocation(graphics, yuriText, 200);
-                    renderResizeTextLocation(graphics, yuriText, 14, Font.BOLD, Color.ORANGE, yuriTextLocation);
-                }
-            }
-        }
-    }
-
-    private String getSotetsegTicksString() {
-        return Byte.toString(this.sotetseg.getSotetsegTicks());
-    }
-
-    public static BufferedImage fadeImage(Image img, float fade, float target) {
-        int w = img.getWidth(null);
-        int h = img.getHeight(null);
-        BufferedImage bi = new BufferedImage(w, h, 2);
-        Graphics2D g = bi.createGraphics();
-        g.drawImage(img, 0, 0, null);
-        float offset = target * (1.0F - fade);
-        float[] scales = new float[]{fade, fade, fade, 1.0F};
-        float[] offsets = new float[]{offset, offset, offset, 0.0F};
-        RescaleOp rop = new RescaleOp(scales, offsets, (RenderingHints)null);
-        g.drawImage(bi, rop, 0, 0);
-        g.dispose();
-        return bi;
-    }
-
-    public static void renderPolygon(Graphics2D graphics, Shape poly, Color color, Color color2, int width) {
-        graphics.setColor(color);
-        Stroke originalStroke = graphics.getStroke();
-        graphics.setStroke(new BasicStroke((float)width));
-        graphics.draw(poly);
-        graphics.setColor(color2);
-        graphics.fill(poly);
-        graphics.setStroke(originalStroke);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenBloodSplatInfo.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenBloodSplatInfo.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenBloodSplatInfo.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenBloodSplatInfo.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,13 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import net.runelite.api.Projectile;
-import net.runelite.api.coords.LocalPoint;
-
-public class MaidenBloodSplatInfo {
-    public MaidenBloodSplatInfo(Projectile projectile, LocalPoint lp) {
-        this.projectile = projectile;
-        this.lp = lp;
-    }
-    public Projectile projectile;
-    public LocalPoint lp;
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/PoisonStyle.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonStyle.java b/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonStyle.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonStyle.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,6 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-public enum PoisonStyle
-{
-    POISON, NOT
-}
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/Bloat.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/Bloat.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/Bloat.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/Bloat.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,472 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Bloat;
-
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.BloatDown;
-import com.google.common.collect.ImmutableSet;
-import lombok.Getter;
-import net.runelite.api.*;
-import net.runelite.api.coords.*;
-import net.runelite.api.events.*;
-import net.runelite.client.util.Text;
-import net.runelite.client.callback.ClientThread;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.events.ConfigChanged;
-import net.runelite.client.plugins.spoontob.Room;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.rooms.Bloat.stomp.def.BloatChunk;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-
-import javax.inject.Inject;
-import javax.sound.sampled.*;
-import java.awt.*;
-import java.io.BufferedInputStream;
-import java.util.List;
-import java.util.*;
-import java.util.function.Supplier;
-
-public class Bloat extends Room {
-    private ClientThread clientThread;
-
-    @Inject
-    private BloatOverlay bloatOverlay;
-
-    @Inject
-    private Client client;
-
-    protected static final int ROOM_STATE_VARBIT = 6447;
-    protected static final Set<Integer> BLOAT_IDS = ImmutableSet.of(NpcID.PESTILENT_BLOAT, NpcID.PESTILENT_BLOAT_10812, NpcID.PESTILENT_BLOAT_10813);
-    protected int lastVarp6447 = 0;
-    public int bloatVar = 0;
-
-    @Getter
-    private boolean bloatActive;
-    @Getter
-    private NPC bloatNPC;
-    @Getter
-    private int bloatDownCount = 0;
-    @Getter
-    private int bloatUpTimer = 0;
-    @Getter
-    private int bloatState = 0;
-    @Getter
-    private BloatDown bloatDown = null;
-
-    @Getter
-    private final HashMap<WorldPoint, Integer> bloathands;
-
-    public static final Set<Integer> topOfTankObjectIDs = ImmutableSet.of(32958, 32962, 32964, 32965, 33062);
-    public static final Set<Integer> tankObjectIDs = ImmutableSet.of(32957, 32955, 32959, 32960, 32964, 33084);
-    public static final Set<Integer> ceilingChainsObjectIDs = ImmutableSet.of(32949, 32950, 32951, 32952, 32953, 32954, 32970);
-
-    public int handTicks = 4;
-    public boolean handsFalling = false;
-
-    private static Clip clip;
-    private LocalPoint bloatPrevLoc = null;
-    private String bloatDirection = "";
-
-    @Inject
-    protected Bloat(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin, config);
-        bloathands = new HashMap();
-    }
-
-    public void load() {
-        overlayManager.add(bloatOverlay);
-        try {
-            AudioInputStream stream = AudioSystem.getAudioInputStream(new BufferedInputStream(SpoonTobPlugin.class.getResourceAsStream("reverse.wav")));
-            AudioFormat format = stream.getFormat();
-            DataLine.Info info = new DataLine.Info(Clip.class, format);
-            clip = (Clip)AudioSystem.getLine(info);
-            clip.open(stream);
-            FloatControl control = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
-            if (control != null) {
-                control.setValue((float)(config.reverseVolume() / 2 - 45));
-            }
-        } catch (Exception var6) {
-            clip = null;
-        }
-    }
-
-    public void unload() {
-        overlayManager.remove(bloatOverlay);
-        bloatDownCount = 0;
-        bloatState = 0;
-        bloatUpTimer = 0;
-        bloatDown = null;
-        handTicks = 4;
-        handsFalling = false;
-        bloatPrevLoc = null;
-        bloatDirection = "";
-    }
-
-    @Subscribe
-    public void onNpcSpawned(NpcSpawned npcSpawned) {
-        NPC npc = npcSpawned.getNpc();
-        if (BLOAT_IDS.contains(npc.getId())) {
-            bloatActive = true;
-            bloatNPC = npc;
-            bloatUpTimer = 0;
-        }
-    }
-
-    @Subscribe
-    public void onNpcDespawned(NpcDespawned npcDespawned) {
-        NPC npc = npcDespawned.getNpc();
-        if (BLOAT_IDS.contains(npc.getId())) {
-            bloatActive = false;
-            bloatNPC = null;
-            bloatUpTimer = 0;
-        }
-    }
-
-    @Subscribe
-    public void onAnimationChanged(AnimationChanged event)
-    {
-        if (client.getGameState() != GameState.LOGGED_IN || event.getActor() != bloatNPC)
-        {
-            return;
-        }
-
-        bloatUpTimer = 0;
-    }
-
-    @Subscribe
-    protected void onGraphicsObjectCreated(GraphicsObjectCreated graphicsObjectC) {
-        if (bloatActive) {
-            GraphicsObject graphicsObject = graphicsObjectC.getGraphicsObject();
-            if (graphicsObject.getId() >= 1560 && graphicsObject.getId() <= 1590) {
-                WorldPoint point = WorldPoint.fromLocal(client, graphicsObject.getLocation());
-                if (!bloathands.containsKey(point)) {
-                    bloathands.put(point, 4);
-
-                    if(!handsFalling) {
-                        handsFalling = true;
-                    }
-                }
-            }
-        }
-
-    }
-
-    @Subscribe
-    protected void onVarbitChanged(VarbitChanged event) {
-        if (isInRegion()) {
-            int varp6447 = client.getVarbitValue(client.getVarps(), ROOM_STATE_VARBIT);
-            if (varp6447 != lastVarp6447 && varp6447 > 0) {
-                bloatUpTimer = 0;
-                bloatVar = 1;
-            }
-            lastVarp6447 = varp6447;
-
-            if (client.getVarbitValue(ROOM_STATE_VARBIT) == 0){
-                bloatVar = 0;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onConfigChanged(ConfigChanged event) {
-        if (event.getGroup().equals("spoontob")) {
-            if (event.getKey().equals("hideAnnoyingAssObjects")) {
-                if (TheatreRegions.inRegion(client, TheatreRegions.BLOAT)) {
-                    plugin.refreshScene();
-                    if (config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.TANK
-                            || config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.BOTH) {
-                        removeGameObjectsFromScene(tankObjectIDs, client.getPlane());
-                        removeGameObjectsFromScene(topOfTankObjectIDs, 1);
-                        nullTopOfTankTiles();
-                    }
-
-                    if (config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.CHAINS
-                            || config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.BOTH) {
-                        removeGameObjectsFromScene(ceilingChainsObjectIDs, 1);
-                    }
-                }
-            }else if (event.getKey().equals("reverseVolume")) {
-                if(clip != null) {
-                    FloatControl control = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
-                    if (control != null) {
-                        control.setValue((float)(config.reverseVolume() / 2 - 45));
-                    }
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameStateChanged(GameStateChanged event) {
-        if(event.getGameState() == GameState.LOGGED_IN) {
-            if (TheatreRegions.inRegion(client, TheatreRegions.BLOAT)) {
-                if (config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.CHAINS || config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.BOTH) {
-                    removeGameObjectsFromScene(ceilingChainsObjectIDs, 1);
-                }
-                if (config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.TANK || config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.BOTH) {
-                    removeGameObjectsFromScene(tankObjectIDs, client.getPlane());
-                    removeGameObjectsFromScene(topOfTankObjectIDs, 1);
-                    nullTopOfTankTiles();
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameObjectSpawned(GameObjectSpawned event){
-        if (TheatreRegions.inRegion(client, TheatreRegions.BLOAT)) {
-            if (config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.CHAINS
-                    || config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.BOTH) {
-                removeGameObjectsFromScene(ceilingChainsObjectIDs, 1);
-            }
-            if (config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.TANK
-                    || config.hideAnnoyingAssObjects() == SpoonTobConfig.annoyingObjectHideMode.BOTH) {
-                removeGameObjectsFromScene(tankObjectIDs, client.getPlane());
-                removeGameObjectsFromScene(topOfTankObjectIDs, 1);
-                nullTopOfTankTiles();
-            }
-        }
-    }
-
-    public void refreshScene() { clientThread.invokeLater(() -> client.setGameState(GameState.LOADING)); }
-
-    public void removeGameObjectsFromScene(Set<Integer> objectIDs, int plane) {
-        Scene scene = client.getScene();
-        Tile[][] tiles = scene.getTiles()[plane];
-        for (int x = 0; x < 104; x++) {
-            for (int y = 0; y < 104; y++) {
-                Tile tile = tiles[x][y];
-                if (tile != null) {
-                    if (objectIDs != null) {
-                        Arrays.stream(tile.getGameObjects()).filter(obj -> (obj != null && objectIDs.contains(obj.getId()))).findFirst().ifPresent(scene::removeGameObject);
-                    }
-                }
-            }
-        }
-    }
-
-    private void nullTopOfTankTiles() {
-        List<WorldPoint> wpl = (new WorldArea(3293, 4445, 6, 6, 1)).toWorldPointList();
-        wpl.forEach((wp) -> {
-            Collection<WorldPoint> wpi = WorldPoint.toLocalInstance(client, wp);
-            wpi.forEach(this::nullThisTile);
-        });
-    }
-
-    public void nullThisTile(WorldPoint tile) {
-        int plane = tile.getPlane();
-        int sceneX = tile.getX() - client.getBaseX();
-        int sceneY = tile.getY() - client.getBaseY();
-        if (plane <= 3 && plane >= 0 && sceneX <= 103 && sceneX >= 0 && sceneY <= 103 && sceneY >= 0) {
-            client.getScene().getTiles()[plane][sceneX][sceneY] = null;
-        }
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        if (bloatActive) {
-            if(handsFalling){
-                handTicks--;
-                if(handTicks <= 0){
-                    handTicks = 4;
-                    handsFalling = false;
-                }
-            }
-            bloatDownCount++;
-            bloatUpTimer++;
-
-            bloathands.values().removeIf(v -> v <= 0);
-            bloathands.replaceAll((k, v) -> v - 1);
-
-            if (bloatNPC.getAnimation() == -1) // 1 = UP, 2 = DOWN, 3 = WARN, 4 = PAST THRESHOLD;
-            {
-                bloatDownCount = 0;
-                if (bloatNPC.getHealthScale() == 0)
-                {
-                    bloatState = 2;
-                }
-                else if (bloatUpTimer >= 38)
-                {
-                    bloatState = 4;
-                }
-                else
-                {
-                    bloatState = 1;
-                }
-            }
-            else
-            {
-                if (bloatUpTimer >= 38)
-                {
-                    bloatState = 4;
-                }
-                else if (25 < bloatDownCount && bloatDownCount < 35)
-                {
-                    bloatState = 3;
-                }
-                else if (bloatDownCount < 26)
-                {
-                    bloatState = 2;
-                }
-                else if (bloatNPC.getModelHeight() == 568)
-                {
-                    bloatState = 2;
-                }
-                else
-                {
-                    if (bloatUpTimer >= 38)
-                    {
-                        bloatState = 4;
-                    }
-                    else
-                    {
-                        bloatState = 1;
-                    }
-                }
-            }
-
-            if (bloatNPC != null)
-            {
-                if (bloatNPC.getAnimation() == -1 && bloatDown != null)
-                {
-                    //log.debug("Nulling the old 'Bloat Down'");
-                    bloatDown = null;
-                }
-                else if (bloatNPC.getAnimation() != -1 && bloatDown == null && !bloatNPC.isDead())
-                {
-                    //log.debug("Building a new 'Bloat Down'");
-                    WorldPoint sw = bloatNPC.getWorldLocation();
-                    Direction dir = (new Angle(bloatNPC.getOrientation())).getNearestDirection();
-                    Supplier<BloatChunk> chunk = () -> {
-                        LocalPoint lp = LocalPoint.fromWorld(client, sw);
-                        if (lp != null && client.isInInstancedRegion())
-                        {
-                            int zone = client.getInstanceTemplateChunks()[0][lp.getSceneX() >> 3][lp.getSceneY() >> 3];
-                            return BloatChunk.getOccupiedChunk(zone);
-                        }
-                        else
-                        {
-                            return BloatChunk.UNKNOWN;
-                        }
-                    };
-                    bloatDown = new BloatDown(client, sw, dir, chunk.get());
-                }
-            }
-
-            if(bloatActive && bloatNPC != null && config.bloatReverseNotifier() != SpoonTobConfig.bloatTurnMode.OFF){
-                LocalPoint lp = LocalPoint.fromWorld(client, bloatNPC.getWorldLocation());
-                if (bloatPrevLoc != null && lp != null) {
-                    boolean changed = false;
-                    if (lp.getX() > bloatPrevLoc.getX()) {
-                        if (bloatDirection.equals("W")) {
-                            changed = true;
-                        }
-                        bloatDirection = "E";
-                    } else if (lp.getX() < bloatPrevLoc.getX()) {
-                        if (bloatDirection.equals("E")) {
-                            changed = true;
-                        }
-                        bloatDirection = "W";
-                    } else if (lp.getY() > bloatPrevLoc.getY()) {
-                        if (bloatDirection.equals("S")) {
-                            changed = true;
-                        }
-                        bloatDirection = "N";
-                    } else if (lp.getY() < bloatPrevLoc.getY()) {
-                        if (bloatDirection.equals("N")) {
-                            changed = true;
-                        }
-                        bloatDirection = "S";
-                    }
-
-                    if (changed) {
-                        if (config.bloatReverseNotifier() == SpoonTobConfig.bloatTurnMode.SOUND) {
-                            client.playSoundEffect(98, config.reverseVolume());
-                        } else {
-                            clip.setFramePosition(0);
-                            clip.start();
-                        }
-                    }
-                }
-                bloatPrevLoc = lp;
-            }
-        }
-    }
-
-    Polygon getBloatTilePoly()
-    {
-        if (bloatNPC == null)
-        {
-            return null;
-        }
-
-        int size = 1;
-        NPCComposition composition = bloatNPC.getTransformedComposition();
-        if (composition != null)
-        {
-            size = composition.getSize();
-        }
-
-        LocalPoint lp;
-
-        switch (bloatState)
-        {
-            case 1:
-            case 4:
-                lp = bloatNPC.getLocalLocation();
-
-                if (lp == null)
-                {
-                    return null;
-                }
-
-                return RoomOverlay.getCanvasTileAreaPoly(client, lp, size, true);
-            case 2:
-            case 3:
-                lp = LocalPoint.fromWorld(client, bloatNPC.getWorldLocation());
-
-                if (lp == null)
-                {
-                    return null;
-                }
-
-                return RoomOverlay.getCanvasTileAreaPoly(client, lp, size, false);
-        }
-
-        return null;
-    }
-
-    Color getBloatStateColor()
-    {
-        Color col = config.bloatIndicatorColorUP();
-        switch (bloatState)
-        {
-            case 2:
-                col = config.bloatIndicatorColorDOWN();
-                break;
-            case 3:
-                col = config.bloatIndicatorColorWARN();
-                break;
-            case 4:
-                col = config.bloatIndicatorColorTHRESH();
-                break;
-        }
-        return col;
-    }
-
-    private boolean isInRegion() {
-        return client.getMapRegions() != null && client.getMapRegions().length > 0 && Arrays.stream(client.getMapRegions()).anyMatch((s) -> s == 13125);
-    }
-
-    @Subscribe
-    public void onMenuEntryAdded(MenuEntryAdded event) {
-        if (!isInRegion())
-            return;
-        if (client.getItemContainer(InventoryID.INVENTORY) == null)
-            return;
-        String target = Text.removeTags(event.getTarget()).toLowerCase();
-        MenuEntry[] entries = client.getMenuEntries();
-        if ((config.stamReq() == SpoonTobConfig.stamReqMode.NYLO || config.stamReq() == SpoonTobConfig.stamReqMode.BOTH)
-                && target.contains("formidable passage") && !client.getItemContainer(InventoryID.INVENTORY).contains(12625))
-            client.setMenuEntries(Arrays.copyOf(entries, entries.length - 1));
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,365 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.TheatrePerspective;
-import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.function.BiFunction;
-
-public class MaidenOverlay extends RoomOverlay {
-    @Inject
-    private Maiden maiden;
-
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    private Client client;
-
-    protected static final BiFunction<Integer, Integer, Color> rgbMod;
-
-    private final  ModelOutlineRenderer modelOutlineRenderer;
-
-    @Inject
-    protected MaidenOverlay(SpoonTobConfig config, ModelOutlineRenderer modelOutlineRenderer) {
-        super(config);
-        this.modelOutlineRenderer = modelOutlineRenderer;
-    }
-
-    static {
-        rgbMod = ((max, current) -> new Color(255 * (max - current) / max, 255 * current / max, 0));
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (maiden.isMaidenActive() && maiden.getMaidenNPC() != null) {
-            if (config.fuckBluelite()) {
-                LocalPoint lp = null;
-                if (maiden != null)
-                    lp = maiden.getMaidenNPC().getLocalLocation();
-                if (lp != null) {
-                    LocalPoint lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() - 960);
-                    List<Polygon> polyList = new ArrayList<>();
-                    Polygon poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    Polygon poly2 = TheatrePerspective.getLine(client, lp2, "westMiddle");
-                    Polygon poly3 = TheatrePerspective.getLine(client, lp2, "swnw");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() - 800);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "nwne");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() - 640);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "swnw");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() - 480);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "kUp");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "kDown");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() - 192);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "B1");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "B2");
-                    Polygon poly4 = TheatrePerspective.getLine(client, lp2, "B3");
-                    Polygon poly5 = TheatrePerspective.getLine(client, lp2, "B4");
-                    Polygon poly6 = TheatrePerspective.getLine(client, lp2, "B5");
-                    Polygon poly7 = TheatrePerspective.getLine(client, lp2, "B6");
-                    Polygon poly8 = TheatrePerspective.getLine(client, lp2, "B7");
-                    Polygon poly9 = TheatrePerspective.getLine(client, lp2, "B8");
-                    Polygon poly10 = TheatrePerspective.getLine(client, lp2, "B9");
-                    Polygon poly11 = TheatrePerspective.getLine(client, lp2, "B10");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    polyList.add(poly4);
-                    polyList.add(poly5);
-                    polyList.add(poly6);
-                    polyList.add(poly7);
-                    polyList.add(poly8);
-                    polyList.add(poly9);
-                    polyList.add(poly10);
-                    polyList.add(poly11);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() - 32);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() + 128);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "nwne");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() + 288);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "swnw");
-                    poly4 = TheatrePerspective.getLine(client, lp2, "E");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    polyList.add(poly4);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() + 448);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() + 608);
-                    poly = TheatrePerspective.getLine(client, lp2, "I");
-                    polyList.add(poly);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() + 768);
-                    poly = TheatrePerspective.getLine(client, lp2, "I");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "swnw");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    lp2 = new LocalPoint(lp.getX() + 1280, lp.getY() + 928);
-                    poly = TheatrePerspective.getLine(client, lp2, "swse");
-                    poly2 = TheatrePerspective.getLine(client, lp2, "sene");
-                    poly3 = TheatrePerspective.getLine(client, lp2, "swnw");
-                    poly4 = TheatrePerspective.getLine(client, lp2, "E");
-                    polyList.add(poly);
-                    polyList.add(poly2);
-                    polyList.add(poly3);
-                    polyList.add(poly4);
-                    graphics.setColor(maiden.c);
-                    graphics.setStroke(new BasicStroke(3.0F));
-                    for (Polygon p : polyList)
-                        graphics.draw(p);
-                }
-            }
-
-            if (config.maidenBlood() != SpoonTobConfig.maidenBloodSplatMode.OFF) {
-                for (int i = 0; i < maiden.getMaidenBloodSplatters().size(); i++) {
-                    WorldPoint wp = maiden.getMaidenBloodSplatters().get(i);
-                    Color color = config.bloodTossColour();
-                    if (config.maidenBlood() == SpoonTobConfig.maidenBloodSplatMode.RAVEST) {
-                        color = plugin.raveUtils.getColor(i * 50, false);
-                    } else if (config.maidenBlood() == SpoonTobConfig.maidenBloodSplatMode.RAVE) {
-                        color = plugin.raveUtils.getColor(maiden.getMaidenBloodSplatters().hashCode(), true);
-                    }
-                    drawTile(graphics, wp, color, 1, config.bloodTossColour().getAlpha(), config.bloodTossFill());
-                }
-            }
-
-            if(config.bloodTossTicks()) {
-                for (int i = 0; i < maiden.getMaidenBloodSplatterProj().size(); i++) {
-                    String text = String.valueOf(maiden.getMaidenBloodSplatterProj().get(i).projectile.getRemainingCycles() / 30);
-                    Point canvasPoint = Perspective.getCanvasTextLocation(client, graphics, maiden.getMaidenBloodSplatterProj().get(i).lp, text, 0);
-                    if (canvasPoint != null) {
-                        Color col = Color.WHITE;
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, text, col, canvasPoint);
-                        } else {
-                            renderSteroidsTextLocation(graphics, text, 14, Font.BOLD, col, canvasPoint);
-                        }
-                    }
-                }
-            }
-
-            if (config.maidenSpawns()) {
-                for (WorldPoint point : maiden.getMaidenBloodSpawnLocations()) {
-                    drawTile(graphics, point, config.bloodSpawnsColor(), 2, 180, 20);
-                }
-                if (config.maidenSpawnsTrail()) {
-                    for (WorldPoint point : maiden.getMaidenBloodSpawnTrailingLocations()) {
-                        drawTile(graphics, point, config.bloodSpawnsColor(), 1, 120, 10);
-                    }
-                }
-            }
-
-            if (config.maidenTickCounter() && !maiden.getMaidenNPC().isDead()) {
-                String text = String.valueOf(maiden.ticksUntilAttack);
-                Point canvasPoint = maiden.getMaidenNPC().getCanvasTextLocation(graphics, text, 30);
-                if (canvasPoint != null) {
-                    Color col = maiden.maidenSpecialWarningColor();
-                    if (config.fontStyle()) {
-                        renderTextLocation(graphics, text, col, canvasPoint);
-                    } else {
-                        renderResizeTextLocation(graphics, text, 14, Font.BOLD, col, canvasPoint);
-                    }
-                }
-            }
-
-            if ((config.maidenFreezeTimer() == SpoonTobConfig.maidenFreezeTimerMode.TILE || config.maidenScuffedCrab()) && maiden.maidenCrabInfoList.size() > 0) {
-                int maidenX = 0;
-                if (maiden.getMaidenNPC() != null) {
-                    WorldPoint maidenWp = maiden.getMaidenNPC().getWorldLocation();
-                    maidenX = maidenWp.getX();
-                    NPCComposition maidenModel = maiden.getMaidenNPC().getTransformedComposition();
-                    if (maidenModel != null) {
-                        maidenX += maidenModel.getSize();
-                    }
-                }
-
-                for (MaidenCrabInfo mci : maiden.maidenCrabInfoList) {
-                    if (!mci.crab.isDead()) {
-                        int healerX = mci.crab.getWorldLocation().getX();
-                        int deltaX = Math.max(0, healerX - maidenX);
-                        if (deltaX > 0) {
-                            NPCComposition npcComposition = mci.crab.getTransformedComposition();
-                            if (npcComposition != null) {
-                                int size = npcComposition.getSize();
-                                LocalPoint lp = mci.crab.getLocalLocation();
-                                Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, lp, size);
-                                if (mci.frozenTicks != -1) {
-                                    renderPoly(graphics, rgbMod.apply(32, mci.frozenTicks), tilePoly);
-                                } else if(config.maidenScuffedCrab() && mci.scuffed && maiden.crabTicksSinceSpawn > 0) {
-                                    modelOutlineRenderer.drawOutline(mci.crab, 2, config.maidenScuffedCrabColor(), 4);
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-
-            if ((config.showMaidenCrabsDistance() || config.showMaidenCrabHp() || config.maidenFreezeTimer() == SpoonTobConfig.maidenFreezeTimerMode.TICKS)
-                    && maiden.maidenCrabInfoList.size() > 0) {
-                renderCrabInfo(graphics);
-            }
-
-            if(config.bloodSpawnFreezeTimer() && maiden.frozenBloodSpawns.size() > 0){
-                maiden.frozenBloodSpawns.forEach((npc, ticks) -> {
-                    if(ticks >= 0) {
-                        String text = String.valueOf(ticks);
-                        Point canvasPoint = npc.getCanvasTextLocation(graphics, text, 30);
-                        if (canvasPoint != null) {
-                            Color col = Color.WHITE;
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, text, col, canvasPoint);
-                            } else {
-                                renderSteroidsTextLocation(graphics, text, 14, Font.BOLD, col, canvasPoint);
-                            }
-                        }
-                    }
-                });
-            }
-        }
-        return null;
-    }
-
-    private void renderCrabInfo(Graphics2D graphics) {
-        ArrayList<NPC> prevCrabs = new ArrayList<>();
-        for (MaidenCrabInfo mci : maiden.maidenCrabInfoList) {
-            String text = "";
-            String distanceLine = "";
-            Color distanceColor = config.distanceColor();
-            Color color = Color.GREEN;
-            if (mci.hpRatio != 0) {
-                if (config.showMaidenCrabHp()) {
-                    double crabHealthPcent = ((double) mci.hpRatio / (double) mci.hpScale) * 100.0D;
-                    if (config.oldHpThreshold()) {
-                        color = plugin.oldHitpointsColor(crabHealthPcent);
-                    } else {
-                        color = plugin.calculateHitpointsColor(crabHealthPcent);
-                    }
-                    String crabHp = String.valueOf(crabHealthPcent);
-                    text = crabHp.substring(0, crabHp.indexOf(".")) + "%";
-                }
-
-                if (config.maidenFreezeTimer() == SpoonTobConfig.maidenFreezeTimerMode.TICKS && mci.frozenTicks >= 0) {
-                    if (!text.equals("")) {
-                        text += " : " + mci.frozenTicks;
-                    } else {
-                        text = String.valueOf(mci.frozenTicks);
-                    }
-                }
-
-                if (config.showMaidenCrabsDistance()) {
-                    WorldPoint maidenWp = maiden.getMaidenNPC().getWorldLocation();
-                    int maidenX = maidenWp.getX();
-                    NPCComposition maidenModel = maiden.getMaidenNPC().getTransformedComposition();
-                    if (maidenModel != null) {
-                        maidenX += maidenModel.getSize();
-                    }
-                    WorldPoint healerWp = mci.crab.getWorldLocation();
-                    int healerX = healerWp.getX();
-                    int deltaX = Math.max(0, healerX - maidenX);
-                    if (config.singleLineDistance()) {
-                        if (mci.frozenTicks == -1) {
-                            if (!text.equals("")) {
-                                text += " : " + deltaX;
-                            } else {
-                                color = Color.WHITE;
-                                text = Integer.toString(deltaX);
-                            }
-                        }
-                    } else {
-                        if (config.showFrozenDistance() || mci.frozenTicks == -1) {
-                            distanceLine = Integer.toString(deltaX);
-                        }
-                    }
-                }
-
-                int offsetTimes = 0;
-                NPC firstFreeze = null;
-                for (NPC crab : prevCrabs) {
-                    LocalPoint lp = crab.getLocalLocation();
-                    if (lp.getX() == mci.crab.getLocalLocation().getX() && lp.getY() == mci.crab.getLocalLocation().getY()) {
-                        offsetTimes++;
-                        if (firstFreeze == null){
-                            firstFreeze = crab;
-                        }
-                    }
-                }
-
-                Point drawPoint;
-                if (offsetTimes != 0){
-                    drawPoint = firstFreeze.getCanvasTextLocation(graphics, text, 0);
-                    if (drawPoint != null) {
-                        int x = drawPoint.getX();
-                        int y = drawPoint.getY() - (15 * offsetTimes);
-                        drawPoint = new Point(x, y);
-                    }
-                } else {
-                    drawPoint = mci.crab.getCanvasTextLocation(graphics, text, 0);
-                }
-
-                if (drawPoint != null) {
-                    if (config.fontStyle()) {
-                        renderTextLocation(graphics, text, color, drawPoint);
-                        if (!distanceLine.equals("")) {
-                            if(text.contains(":")) {
-                                drawPoint = new Point(drawPoint.getX() + 15, drawPoint.getY() - 10);
-                            }else {
-                                drawPoint = new Point(drawPoint.getX() + 5, drawPoint.getY() - 10);
-                            }
-                            renderTextLocation(graphics, distanceLine, distanceColor, drawPoint);
-                        }
-                    } else {
-                        renderResizeTextLocation(graphics, text, 11, Font.BOLD, color, drawPoint);
-                        if (!distanceLine.equals("")) {
-                            if(text.contains(":")) {
-                                drawPoint = new Point(drawPoint.getX() + 15, drawPoint.getY() - 10);
-                            } else {
-                                drawPoint = new Point(drawPoint.getX() + 5, drawPoint.getY() - 10);
-                            }
-                            renderResizeTextLocation(graphics, distanceLine, 11, Font.BOLD, distanceColor, drawPoint);
-                        }
-                    }
-                }
-                prevCrabs.add(mci.crab);
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGroup.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGroup.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGroup.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGroup.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,22 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.Point;
-import java.util.ArrayList;
-
-public class YellowGroup {
-    public Point a;
-    public Point b;
-    public Point c;
-
-    public YellowGroup(Point a, Point b, Point c) {
-        this.a = a;
-        this.b = b;
-        this.c = c;
-    }
-
-    public YellowGroup(ArrayList<Point> points) {
-        this.a = points.get(0);
-        this.b = points.get(1);
-        this.c = points.get(2);
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenRedsOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenRedsOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenRedsOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenRedsOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,137 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Maiden;
-
-import net.runelite.api.Client;
-import net.runelite.api.NPCComposition;
-import net.runelite.api.Perspective;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.TheatreRegions;
-import net.runelite.client.ui.overlay.OverlayLayer;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-
-import javax.inject.Inject;
-import java.awt.*;
-
-public class MaidenRedsOverlay extends RoomOverlay {
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    private SpoonTobConfig config;
-
-    @Inject
-    private Client client;
-
-    @Inject
-    private Maiden maiden;
-
-    @Inject
-    public MaidenRedsOverlay(Client client, SpoonTobConfig config, SpoonTobPlugin plugin) {
-        super(config);
-        this.client = client;
-        this.config = config;
-        this.plugin = plugin;
-        this.setPosition(OverlayPosition.DYNAMIC);
-        this.setPriority(OverlayPriority.HIGH);
-        setLayer(OverlayLayer.ABOVE_SCENE);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if ((config.redsTL() != SpoonTobConfig.redsTlMode.OFF || config.redsFreezeWarning()) && plugin.enforceRegion()) {
-            boolean canFreeze = true;
-            boolean n1Spawned = false;
-            boolean n2Spawned = false;
-            boolean threeSpawned = false;
-            for (MaidenCrabInfo mci : maiden.maidenCrabInfoList) {
-                if (maiden.maidenPhase == mci.phase) {
-                    switch (mci.position) {
-                        case "N1":
-                            n1Spawned = true;
-                            break;
-                        case "N2":
-                            n2Spawned = true;
-                            break;
-                        case "N3":
-                        case "S3":
-                            threeSpawned = true;
-                            break;
-                    }
-                }
-            }
-
-            for (MaidenCrabInfo mci : maiden.maidenCrabInfoList) {
-                NPCComposition composition = mci.crab.getComposition();
-                if(composition != null) {
-                    int size = composition.getSize();
-                    LocalPoint lp = LocalPoint.fromWorld(client, mci.crab.getWorldLocation());
-                    if (lp != null) {
-                        lp = new LocalPoint(lp.getX() + size * 128 / 2 - 64, lp.getY() + size * 128 / 2 - 64);
-                        Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, lp, size);
-                        if (tilePoly != null) {
-                            String spawn = mci.position;
-                            WorldPoint maidenWp = maiden.getMaidenNPC().getWorldLocation();
-                            int maidenX = maidenWp.getX();
-                            NPCComposition maidenModel = maiden.getMaidenNPC().getTransformedComposition();
-                            if (maidenModel != null) {
-                                maidenX += maidenModel.getSize();
-                            }
-                            WorldPoint healerWp = mci.crab.getWorldLocation();
-                            int healerX = healerWp.getX();
-                            int deltaX = Math.max(0, healerX - maidenX);
-
-                            if (threeSpawned) {
-                                if (n1Spawned && n2Spawned) {
-                                    if (spawn.equals("N1")) {
-                                        if (deltaX < 4 && mci.frozenTicks > 0) {
-                                            canFreeze = false;
-                                        }
-                                    } else if (spawn.equals("N2")) {
-                                        if (deltaX < 3) {
-                                            canFreeze = mci.frozenTicks <= 0;
-                                        }
-                                    }
-                                } else if (n1Spawned) {
-                                    if (spawn.equals("N1")) {
-                                        if (deltaX < 1 && mci.frozenTicks > 0) {
-                                            canFreeze = false;
-                                        }
-                                    }
-                                } else if (n2Spawned) {
-                                    if (spawn.equals("N2")) {
-                                        if (deltaX < 3 && mci.frozenTicks > 0) {
-                                            canFreeze = false;
-                                        }
-                                    }
-                                }
-                            }
-
-                            if (!canFreeze && (client.getVarbitValue(4070) == 1 && SpoonTobPlugin.partySize > 3) && config.redsFreezeWarning()
-                                    && (mci.position.equals("N3") || mci.position.equals("S3")) && mci.phase == maiden.maidenPhase && mci.frozenTicks == -1) {
-                                renderPoly(graphics, tilePoly, config.redsFreezeWarningColor(), config.redsFreezeWarningColor().getAlpha(), 50);
-                            } else {
-                                if ((config.redsTL() == SpoonTobConfig.redsTlMode.MAIDEN || config.redsTL() == SpoonTobConfig.redsTlMode.BOTH) && TheatreRegions.inRegion(client, TheatreRegions.MAIDEN)) {
-                                    renderPoly(graphics, tilePoly, config.redsTLColor(), config.redsTLColor().getAlpha(), 0);
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    private void renderPoly(Graphics2D graphics, Shape polygon, Color color, int outlineOpacity, int fillOpacity) {
-        if (polygon != null) {
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), outlineOpacity));
-            graphics.setStroke(new BasicStroke((float) 1));
-            graphics.draw(polygon);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillOpacity));
-            graphics.fill(polygon);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasType.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasType.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasType.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasType.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,59 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import java.util.HashMap;
-
-enum NylocasType {
-    MELEE_SMALL(8342, 8348),
-    MELEE_BIG(8345, 8351),
-    RANGE_SMALL(8343, 8349),
-    RANGE_BIG(8346, 8352),
-    MAGE_SMALL(8344, 8350),
-    MAGE_BIG(8347, 8353),
-
-    SM_MELEE_SMALL(10774, 10780), //Story Mode
-    SM_MELEE_BIG(10777, 10783),
-    SM_RANGE_SMALL(10775, 10781),
-    SM_RANGE_BIG(10778, 10784),
-    SM_MAGE_SMALL(10776, 10782),
-    SM_MAGE_BIG(10779, 10785),
-
-    HM_MELEE_SMALL(10791, 10797), // Hard Mode
-    HM_MELEE_BIG(10794, 10800),
-    HM_RANGE_SMALL(10792, 10798),
-    HM_RANGE_BIG(10795, 10801),
-    HM_MAGE_SMALL(10793, 10799),
-    HM_MAGE_BIG(10796, 10802);
-
-    private int id;
-    private int aggroId;
-    private static final HashMap<Integer, NylocasType> lookupMap = new HashMap();
-
-    private NylocasType(int id, int aggroId) {
-        this.id = id;
-        this.aggroId = aggroId;
-    }
-
-    public int getId() {
-        return this.id;
-    }
-
-    public int getAggroId() {
-        return this.aggroId;
-    }
-
-    public static HashMap<Integer, NylocasType> getLookupMap() {
-        return lookupMap;
-    }
-
-    static {
-        NylocasType[] var0 = values();
-        int var1 = var0.length;
-
-        for(int var2 = 0; var2 < var1; ++var2) {
-            NylocasType v = var0[var2];
-            lookupMap.put(v.getId(), v);
-            lookupMap.put(v.getAggroId(), v);
-        }
-
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/SpoonTobConfig.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobConfig.java b/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobConfig.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobConfig.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,2395 +0,0 @@
-package net.runelite.client.plugins.spoontob;
-
-import lombok.AccessLevel;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import net.runelite.client.config.*;
-
-import java.awt.*;
-
-@ConfigGroup("tobqol v2")
-public interface SpoonTobConfig extends Config {
-    @ConfigSection(
-            name = "Maiden",
-            description = "Maiden settings",
-            position = 1,
-            closedByDefault = true
-    )
-    String maiden = "maiden";
-
-    @ConfigSection(
-            name = "Bloat",
-            description = "Bloat settings",
-            position = 2,
-            closedByDefault = true
-    )
-    String bloat = "bloat";
-
-    @ConfigSection(
-            name = "Nylocas",
-            description = "Nylocas settings",
-            position = 3,
-            closedByDefault = true
-    )
-    String nylocas = "nylocas";
-
-    @ConfigSection(
-            name = "Sotetseg",
-            description = "Sotetseg settings",
-            position = 4,
-            closedByDefault = true
-    )
-    String sotetseg = "sotetseg";
-
-    @ConfigSection(
-            name = "Xarpus",
-            description = "Xarpus settings",
-            position = 5,
-            closedByDefault = true
-    )
-    String xarpus = "xarpus";
-
-    @ConfigSection(
-            name = "Verzik",
-            description = "Verzik settings",
-            position = 6,
-            closedByDefault = true
-    )
-    String verzik = "verzik";
-
-    @ConfigSection(
-            name = "Misc",
-            description = "Misc settings",
-            position = 7,
-            closedByDefault = true
-    )
-    String misc = "misc";
-
-    @ConfigSection(
-            name = "Font Settings",
-            description = "Font settings",
-            position = 8,
-            closedByDefault = true
-    )
-    String font = "font";
-
-    //------------------------------------------------------------//
-    // Maiden
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 0,
-            keyName = "MaidenTc1",
-            name = "Show Maiden Tick Counter",
-            description = "Show a Tick timer on the boss indicating time until next attack",
-            section = maiden
-    )
-    default boolean maidenTickCounter() {return false;}
-
-    @ConfigItem(
-            position = 1,
-            keyName = "leaked1",
-            name = "Show Leaked Message",
-            description = "For all those shit freezers out there",
-            section = maiden
-    )
-    default boolean leakedMessage() { return false; }
-
-    @ConfigItem(
-            position = 2,
-            keyName = "maidenProc1",
-            name = "Maiden Proc Threshold",
-            description = "Shows a rough estimate on the damage needed to proc next phase",
-            section = maiden
-    )
-    default boolean maidenProcThreshold()
-    {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 3,
-            name = "Maiden Max Hit (Tooltip)",
-            keyName = "mMHit",
-            description = "When hovering over Maiden's clickbox it will display her max hits for:<br>No Prayer<br>Prayer<br>Elysian Spirit Shield",
-            section = maiden
-    )
-    default MaidenMaxHitTTMode maidenMaxHit() {
-        return MaidenMaxHitTTMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 4,
-            name = "Maiden Max Hit (Overlay)",
-            keyName = "mMHO",
-            description = "Overlay that will display her max hits for:<br>No Prayer<br>Prayer<br>Elysian Spirit Shield",
-            section = maiden
-    )
-    default MaidenMaxHit maidenMaxHitOverlay() {
-        return MaidenMaxHit.OFF;
-    }
-
-    @ConfigItem(
-            position = 5,
-            name = "<html><p style=\"color:#25C54F\">—————— Nylocas Matomenos</p></html>",
-            keyName = "maiden div",
-            description = "",
-            section = maiden
-    )
-    void maidenDivider1();
-
-    @ConfigItem(
-            position = 6,
-            keyName = "MaidencolNylos1",
-            name = "Recolor HP Nylo Menu",
-            description = "Recolor nylos in right click menu based on their HP and adds the HP % next to the name.",
-            section = maiden
-    )
-    default boolean maidenRecolourNylos() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "maidenFrzTimer1",
-            name = "Nylo Freeze Timers",
-            description = "Displays how long each Nylocas Matomenos is frozen for",
-            section = maiden
-    )
-    default maidenFreezeTimerMode maidenFreezeTimer() { return maidenFreezeTimerMode.OFF; }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "CrabsDistance332",
-            name = "Show Crabs Distance",
-            description = "You really need me to explain this?",
-            section = maiden
-    )
-    default boolean showMaidenCrabsDistance() { return false; }
-
-    @ConfigItem(
-            position = 9,
-            keyName = "singleLineD332",
-            name = "Single Line Crabs Distance",
-            description = "Makes the crabs distance and hp % a single line",
-            section = maiden
-    )
-    default boolean singleLineDistance() { return false; }
-
-    @ConfigItem(
-            position = 10,
-            keyName = "showFD",
-            name = "Show Distance When Frozen",
-            description = "Shows the distance overlay on the crabs when they are frozen",
-            section = maiden
-
-    )
-    default boolean showFrozenDistance() { return false; }
-
-    @ConfigItem(
-            position = 11,
-            keyName = "distanceCol112",
-            name = "Crabs Distance Color",
-            description = "You really need me to explain this?",
-            section = maiden
-
-    )
-    default Color distanceColor() { return Color.WHITE; }
-
-    @ConfigItem(
-            position = 12,
-            keyName = "showMaidenCrabHp221",
-            name = "Show Crabs HP",
-            description = "Crab HP show do",
-            section = maiden
-    )
-    default boolean showMaidenCrabHp() { return false; }
-
-
-    @ConfigItem(
-            position = 13,
-            keyName = "maidenScuffed21",
-            name = "Scuffed Crab Outline",
-            description = "Spawn right you little shit",
-            section = maiden
-    )
-    default boolean maidenScuffedCrab() { return false; }
-
-    @ConfigItem(
-            position = 14,
-            keyName = "maidenScufCCol",
-            name = "Scuffed Crab Color",
-            description = "Sets the color for Scuffed Crab Outline",
-            section = maiden
-
-    )
-    default Color maidenScuffedCrabColor() {
-        return Color.WHITE;
-    }
-
-    @ConfigItem(
-            position = 15,
-            keyName = "hpcrab12",
-            name = "Prioritize Highest Hp Crab",
-            description = "Swaps menu entries so the highest HP crab is left click",
-            section = maiden
-    )
-    default boolean maidenCrabHpPriority() {return false;}
-
-    @ConfigItem(
-            position = 16,
-            name = "Reds Freeze Warning",
-            keyName = "redwarn1",
-            description = "Highlights the N3 and S3 crabs when the north mager cannot freeze them in time <br> Must be on Ancient spellbook and be 4 or 5 man scale",
-            section = maiden
-    )
-    default boolean redsFreezeWarning() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 17,
-            name = "Reds Freeze Warning Color",
-            keyName = "redfrzwarncol2",
-            description = "Color of the N3 crabs when the north mager cannot freeze them in time",
-            section = maiden
-
-    )
-    default Color redsFreezeWarningColor() {
-        return Color.RED;
-    }
-
-    @ConfigItem(
-            position = 18,
-            name = "<html><p style=\"color:#25C54F\">—————— Blood Spawns</p></html>",
-            keyName = "maiden div2",
-            description = "",
-            section = maiden
-    )
-    void maidenDivider2();
-
-    @ConfigItem(
-            position = 19,
-            keyName = "mBl2",
-            name = "Show Maiden Blood Toss",
-            description = "Displays the tile location where tossed blood will land.",
-            section = maiden
-    )
-    default maidenBloodSplatMode maidenBlood() {
-        return maidenBloodSplatMode.COLOR;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 20,
-            keyName = "bTossCol332",
-            name = "Blood Toss Color",
-            description = "Colors the tile where blood will land",
-            section = maiden
-    )
-    default Color bloodTossColour() {
-        return new Color(0, 255, 255, 150);
-    }
-
-    @Range(min = 0, max = 255)
-    @ConfigItem(
-            position = 21,
-            keyName = "bTossFill",
-            name = "Blood Toss Opacity",
-            description = "Changes the opacity of the blood toss highlight",
-            section = maiden
-    )
-    default int bloodTossFill() {
-        return 10;
-    }
-
-    @ConfigItem(
-            position = 22,
-            keyName = "bloodTossT221",
-            name = "Blood Toss Ticks",
-            description = "Show the ticks until the blood splat lands",
-            section = maiden
-    )
-    default boolean bloodTossTicks() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 23,
-            keyName = "mSpawn66",
-            name = "Show Blood Spawns True Tile",
-            description = "Show the tiles that blood spawns will travel to.",
-            section = maiden
-    )
-    default boolean maidenSpawns() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 24,
-            keyName = "mSpTrail22",
-            name = "Show Blood Spawns Trailing Tile",
-            description = "Shows the trailing tile of the blood spawns location.",
-            section = maiden
-
-    )
-    default boolean maidenSpawnsTrail() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 25,
-            keyName = "bSpawnCol22",
-            name = "Blood Spawns Color",
-            description = "Color of the tiles that blood spawns will travel to.",
-            section = maiden
-    )
-    default Color bloodSpawnsColor() {
-        return new Color(0, 150, 200);
-    }
-
-    @ConfigItem(
-            position = 26,
-            keyName = "rMB",
-            name = "Remove Blood Spawns",
-            description = "Yup... cast, attack, both",
-            section = maiden
-    )
-    default maidenBloodsMode removeMaidenBloods() { return maidenBloodsMode.BOTH; }
-
-    @ConfigItem(
-            position = 27,
-            keyName = "bSpFrzT",
-            name = "Blood Spawn Freeze Timer",
-            description = "y freeze?",
-            section = maiden
-    )
-    default boolean bloodSpawnFreezeTimer() { return false; }
-
-    //------------------------------------------------------------//
-    // Bloat
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 1,
-            keyName = "bloatI33",
-            name = "Bloat Status",
-            description = "Display Bloat's status (asleep, awake, enrage) using color codes.",
-            section = bloat
-    )
-    default BloatIndicatorMode bloatIndicator() {
-        return BloatIndicatorMode.TILE;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 2,
-            keyName = "bIColorUPp33",
-            name = "Bloat Up",
-            description = "Select a color for when Bloat is UP.",
-            section = bloat
-    )
-    default Color bloatIndicatorColorUP() {return new Color(223, 109, 255, 150);}
-
-    @Alpha
-    @ConfigItem(
-            position = 3,
-            keyName = "bIndiCoTHRESH221",
-            name = "Bloat Down Warning",
-            description = "Select a color for when Bloat UP and goes over 37 ticks, which allows you to know when he can go down.",
-            section = bloat
-    )
-    default Color bloatIndicatorColorTHRESH() {return new Color(255, 200, 0, 150);}
-
-    @Alpha
-    @ConfigItem(
-            position = 4,
-            keyName = "bIndiColDOWN221",
-            name = "Bloat Down",
-            description = "Select a color for when Bloat is DOWN.",
-            section = bloat
-    )
-    default Color bloatIndicatorColorDOWN() {return new Color(0, 255, 0, 150);}
-
-    @Alpha
-    @ConfigItem(
-            position = 5,
-            keyName = "bIndiColWARN131",
-            name = "Bloat Stomp Warning",
-            description = "Select a color for when Bloat is DOWN and about to get UP.",
-            section = bloat
-    )
-    default Color bloatIndicatorColorWARN() {return new Color(255, 0, 0, 150);}
-
-    @ConfigItem(
-            position = 6,
-            keyName = "bUpT331",
-            name = "Bloat Timer",
-            description = "Show the estimated time when Bloat will stop moving.",
-            section = bloat
-    )
-    default boolean bloatUpTimer() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "bEntT",
-            name = "Bloat Entry Timer",
-            description = "Shows the ticks since entering the Bloat region. Disappears once you start Bloat",
-            section = bloat
-    )
-    default boolean bloatEntryTimer() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "bRevNoti221",
-            name = "Bloat Turn",
-            description = "Plays a sound to let you know when bloat changes direction",
-            section = bloat
-    )
-    default bloatTurnMode bloatReverseNotifier() {
-        return bloatTurnMode.OFF;
-    }
-
-    @Range(max = 100)
-    @ConfigItem(
-            position = 9,
-            keyName = "revVol2",
-            name = "Turn Volume",
-            description = "Cha cha real smooth",
-            section = bloat
-    )
-    default int reverseVolume() {
-        return 50;
-    }
-
-    @ConfigItem(
-            position = 10,
-            name = "<html><p style=\"color:#25C54F\">—————— Hands</p></html>",
-            keyName = "b div1",
-            description = "",
-            section = bloat
-    )
-    void bloatDivider1();
-
-    @ConfigItem(
-            position = 11,
-            keyName = "sBH",
-            name = "Show Bloat Hands",
-            description = "Highlights the falling hands inside Bloat.",
-            section = bloat
-    )
-    default bloatHandsMode showBloatHands() {
-        return bloatHandsMode.COLOR;
-    }
-
-    @ConfigItem(
-            position = 12,
-            keyName = "bHT",
-            name = "Bloat Hands Ticks",
-            description = "Shows the ticks till the hands hit the ground",
-            section = bloat
-    )
-    default boolean bloatHandsTicks() {
-        return false;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 13,
-            keyName = "bC",
-            name = "Hands Color",
-            description = "Bloat Hands Color",
-            section = bloat
-    )
-    default Color bloatHandColor() {
-        return new Color(106, 61, 255, 255);
-    }
-
-    @Range(min = 0, max = 255)
-    @ConfigItem(
-            position = 14,
-            keyName = "bCF",
-            name = "Hands Color Opacity",
-            description = "Changes the opacity of the bloat hands highlight",
-            section = bloat
-    )
-    default int bloatColorFill() {
-        return 10;
-    }
-
-    @ConfigItem(
-            position = 15,
-            name = "<html><p style=\"color:#25C54F\">—————— Misc</p></html>",
-            keyName = "b d3",
-            description = "",
-            section = bloat
-    )
-    void bloatDivider2();
-
-    @ConfigItem(
-            position = 16,
-            keyName = "hideAnnoyAssObj",
-            name = "Hide Objects",
-            description = "Hides annoying objects in the bloat room",
-            section = bloat
-    )
-    default annoyingObjectHideMode hideAnnoyingAssObjects() {
-        return annoyingObjectHideMode.CHAINS;
-    }
-
-    @ConfigItem(
-            position = 17,
-            keyName = "bSM33",
-            name = "Stomp Safespots",
-            description = "Shows lines for where you should go to flinch bloat stomps",
-            section = bloat
-    )
-    default bloatStompMode bloatStompMode() {
-        return bloatStompMode.COLOR;
-    }
-
-    @ConfigItem(
-            position = 18,
-            keyName = "bSC3",
-            name = "Stomp Color",
-            description = "Color of the stomp lines",
-            section = bloat
-    )
-    @Alpha
-    default Color bloatStompColor() {
-        return new Color(0, 255, 0, 100);
-    }
-
-    @ConfigItem(
-            position = 19,
-            keyName = "blStW4",
-            name = "Stomp Width",
-            description = "Girth",
-            section = bloat
-    )
-    @Range(max = 3, min = 1)
-    default int bloatStompWidth() {
-        return 1;
-    }
-
-    //------------------------------------------------------------//
-    // Nylo
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 0,
-            keyName = "wcW2",
-            name = "Wheelchair Nylos",
-            description = "Removes attack options on wrong style nylos when weapons are equipped",
-            section = nylocas
-    )
-    default wheelchairMode wheelchairNylo() {
-        return wheelchairMode.BOTH;
-    }
-
-    @ConfigItem(
-            position = 1,
-            keyName = "ignCh44",
-            name = "Wheelchair - Ignore Chins",
-            description = "Ignores wheelchair settings if you equip chins (aka lets you attack the wrong styles with chins)",
-            section = nylocas
-    )
-    default boolean ignoreChins() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 1,
-            keyName = "manC3",
-            name = "Wheelchair - Manual Cast Wands",
-            description = "Only lets you manually cast spells on all nylos when a wand or staff is equipped. Ignores tridents/sangs",
-            section = nylocas
-    )
-    default boolean manualCast() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 2,
-            keyName = "shoPCng22",
-            name = "Show Boss Phase Change",
-            description = "Shows how long until the boss changes phases. Both includes demiboss",
-            section = nylocas
-    )
-    default nyloBossPhaseChange showPhaseChange() {
-        return nyloBossPhaseChange.BOSS;
-    }
-
-    @ConfigItem(
-            position = 3,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "n dm3",
-            description = "",
-            section = nylocas
-    )
-    void nyloDivider1();
-
-    @Range(max = 52)
-    @ConfigItem(
-            position = 4,
-            keyName = "nylExplDispT",
-            name = "Display Last Ticks",
-            description = "Displays the last 'x' amount of ticks for a Nylocas. (ex: to see the last 10 ticks, you set it to 10).",
-            section = nylocas
-    )
-    default int nyloExplosionDisplayTicks()
-    {
-        return 52;
-    }
-
-    @ConfigItem(
-            position = 5,
-            keyName = "nylTilCS",
-            name = "Nylocas Tick Time Alive Style",
-            description = "Count up or Count down options on the tick time alive.",
-            section = nylocas
-    )
-    default nylotimealive nyloTimeAliveCountStyle() { return nylotimealive.COUNTUP;}
-
-    @ConfigItem(
-            position = 6,
-            keyName = "sholocasExpl",
-            name = "Explosion Warning",
-            description = "Displays ticks until explosion, a yellow tile, or both.",
-            section = nylocas
-    )
-    default ExplosionWarning showNylocasExplosions() {
-        return ExplosionWarning.OFF;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "loExplTyp",
-            name = "Explosion Mode",
-            description = "Display nylo explosion as either tile or explosion radius",
-            section = nylocas
-    )
-    default nyloExplosionType nyloExplosionType() {
-        return nyloExplosionType.TILE;
-    }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "loRecM",
-            name = "Nylocas Recolor Menu",
-            description = "Recolors the right click menu to the color of the nylos. Bigs are darker.",
-            section = nylocas
-    )
-    default boolean nyloRecolorMenu() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 9,
-            keyName = "loTMen",
-            name = "Time Alive Right Click Menu",
-            description = "Displays how many ticks the Nylos have left/been alive for in the right click menu <br> Must have Nylocas Recolour Menu on",
-            section = nylocas
-
-    )
-    default boolean nyloTicksMenu() { return false; }
-
-    @ConfigItem(
-            position = 10,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "nlo divi",
-            description = "",
-            section = nylocas
-    )
-    void nyloDivider2();
-
-    @ConfigItem(
-            position = 11,
-            keyName = "nloOlay",
-            name = "Nylocas Role Overlay",
-            description = "Display the interactive overlay allowing you to choose which nylocas to highlight",
-            section = nylocas
-    )
-    default boolean nyloOverlay() {
-        return false;
-    }
-
-    @Range(min = 0, max = 3)
-    @ConfigItem(
-            position = 12,
-            keyName = "nloTilWid",
-            name = "Nylocas Tile Width",
-            description = "girth",
-            section = nylocas
-
-    )
-    default double nyloTileWidth()
-    {
-        return 1;
-    }
-
-    @ConfigItem(
-            position = 13,
-            keyName = "nloAggrOlay",
-            name = "Highlight Aggressive Nylocas",
-            description = "Highlight nylocas that are aggressive.",
-            section = nylocas
-    )
-    default aggroStyle nyloAggressiveOverlay() { return aggroStyle.TILE; }
-
-    @ConfigItem(
-            position = 14,
-            name = "<html><p style=\"color:#25C54F\">—————— Waves</p></html>",
-            keyName = "nlo div2",
-            description = "",
-            section = nylocas
-    )
-    void nyloDivider3();
-
-    @ConfigItem(
-            position = 15,
-            keyName = "nloAliCount",
-            name = "Nylocas Alive Display",
-            description = "Show how many nylocas are alive in the room.",
-            section = nylocas
-    )
-    default boolean nyloAlivePanel() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 16,
-            keyName = "wavSpT",
-            name = "Wave Spawn Timer",
-            description = "Timer for when them niglets finna pull up",
-            section = nylocas
-    )
-    default waveSpawnTimerMode waveSpawnTimer() {
-        return waveSpawnTimerMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 17,
-            keyName = "wavSpTimCol",
-            name = "Wave Timer Color",
-            description = "Sets color of Wave Spawn Timer overlay",
-            section = nylocas
-    )
-    default Color waveSpawnTimerColor() {
-        return Color.WHITE;
-    }
-
-    @ConfigItem(
-            position = 20,
-            keyName = "sBSplit",
-            name = "Show Big Splits",
-            description = "Marks where a big nylo died and how long until littles spawn",
-            section = nylocas
-    )
-    default boolean showBigSplits() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 21,
-            keyName = "bColor",
-            name = "Big Splits Color",
-            description = "Big Splits Color",
-            section = nylocas
-
-    )
-    default Color bigsColor() {
-        return Color.GRAY;
-    }
-
-    @ConfigItem(
-            position = 22,
-            name = "<html><p style=\"color:#25C54F\">—————— Chat Messages</p></html>",
-            keyName = "nlo divi4",
-            description = "",
-            section = nylocas
-    )
-    void nyloDivider4();
-
-    @ConfigItem(
-            position = 23,
-            keyName = "nloSM5",
-            name = "Nylo Stall Chat Message",
-            description = "Display a message in chatbox when a wave stalls.",
-            section = nylocas
-    )
-    default boolean nyloStallMessage() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 24,
-            keyName = "nloSMsg3",
-            name = "Nylo Splits Message",
-            description = "Shows how many of each boss phase and/or how many small splits you got",
-            section = nylocas
-    )
-    default nyloSplitsMessage nyloSplitsMsg() {
-        return nyloSplitsMessage.BOSS;
-    }
-
-    @ConfigItem(
-            position = 25,
-            keyName = "sptMsgTim4",
-            name = "Waves Message Timing",
-            description = "Shows when to display how many small nylos you got from splits",
-            section = nylocas
-    )
-    default splitsMsgTiming splitMsgTiming() {
-        return splitsMsgTiming.FINISHED;
-    }
-
-    @ConfigItem(
-            position = 26,
-            keyName = "sST",
-            name = "Small Splits Type",
-            description = "Caps = Pre  + Post cap splits, Total is just the total splits throughout the waves, both you don't need an explanation",
-            section = nylocas
-    )
-    default smallSplitsMode smallSplitsType() {
-        return smallSplitsMode.TOTAL;
-    }
-
-    @ConfigItem(
-            position = 29,
-            name = "<html><p style=\"color:#25C54F\">—————— Pillars</p></html>",
-            keyName = "nlo div5",
-            description = "",
-            section = nylocas
-    )
-    void nyloDivider5();
-
-    @ConfigItem(
-            position = 30,
-            keyName = "nloPill3",
-            name = "Show Nylocas Pillar Health",
-            description = "Show the health bars of the Nylocas pillars.",
-            section = nylocas
-    )
-    default boolean nyloPillars() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 31,
-            keyName = "showLowP2",
-            name = "Show Lowest Pillar Health",
-            description = "Puts a hint arrow on the Nylocas pillar with the lowest health.",
-            section = nylocas
-    )
-    default boolean showLowestPillar() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 32,
-            keyName = "hidePill8",
-            name = "Hide Pillars",
-            description = "Removes the pillars in Nylo and the walls as well if set to clean",
-            section = nylocas
-    )
-    default hidePillarsMode hidePillars() {
-        return hidePillarsMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 33,
-            keyName = "hideEggs3",
-            name = "Hide Eggs",
-            description = "You're an idiot. Nobody's allergic to eggs",
-            section = nylocas
-    )
-    default boolean hideEggs() {
-        return false;
-    }
-
-    //------------------------------------------------------------//
-    // Sote
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 1,
-            keyName = "sotetmaz13",
-            name = "Sotetseg Maze",
-            description = "Display tiles indicating the correct path of the sotetseg maze.",
-            section = sotetseg
-    )
-    default boolean sotetsegMaze() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 2,
-            keyName = "showSoAT",
-            name = "Show Sotetseg Attack Ticks",
-            description = "Ticks until Sotetseg attacks again.",
-            section = sotetseg
-    )
-    default boolean showSotetsegAttackTicks() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 3,
-            keyName = "SoteAtt3",
-            name = "Show Sotetseg Orb",
-            description = "Highlight the attacks that Sotetseg throws at you.",
-            section = sotetseg
-    )
-    default soteOrbMode sotetsegShowOrbs() {
-        return soteOrbMode.OFF;
-    }
-
-    @Range(min = 1, max = 50)
-    @ConfigItem(
-            position = 4,
-            keyName = "sotHSizz",
-            name = "Sotetseg Orb Hat Size",
-            description = "Changes the size of the hats",
-            section = sotetseg
-    )
-    default int soteHatSize() {
-        return 16;
-    }
-
-    @ConfigItem(
-            position = 5,
-            name = "<html><p style=\"color:#25C54F\">—————— Death Ball</p></html>",
-            keyName = "sot divi2",
-            description = "",
-            section = sotetseg
-    )
-    void soteDivider1();
-
-    @ConfigItem(
-            position = 6,
-            keyName = "SoetAtcks13",
-            name = "Show Sotetseg Nuke",
-            description = "Highlight the big AoE dragonball-z deathball mfkin thing.",
-            section = sotetseg
-    )
-    default soteDeathballOverlayMode sotetsegShowNuke() {
-        return soteDeathballOverlayMode.TICKS;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "deathTOPlay",
-            name = "Death Ball Ticks on Player",
-            description = "Displays the death ball ticks on the targeted player instead of on the death ball",
-            section = sotetseg
-    )
-    default boolean deathTicksOnPlayer() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "SotetAttaSnds3",
-            name = "Sotetseg Nuke Sound",
-            description = "Ear rape.",
-            section = sotetseg
-    )
-    default boolean sotetsegAttacksSound() {
-        return false;
-    }
-
-    @Range(max = 100)
-    @ConfigItem(
-            position = 9,
-            keyName = "SotetAtcksSndsVol3",
-            name = "Nuke Volume",
-            description = "Set this to 100 or you're a pussy.",
-            section = sotetseg
-    )
-    default int sotetsegAttacksSoundVolume() {
-        return 80;
-    }
-
-    @ConfigItem(
-            position = 10,
-            keyName = "dDB3",
-            name = "Show Death Ball Target",
-            description = "Shows who has the death ball",
-            section = sotetseg
-    )
-    default boolean displayDeathBall() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 11,
-            keyName = "dispDBCol33",
-            name = "Death Ball Target Color",
-            description = "Sets color of the death ball target tile",
-            section = sotetseg
-
-    )
-    default Color displayDeathBallColor()
-    {
-        return new Color(188, 74, 74);
-    }
-
-    @ConfigItem(
-            position = 12,
-            keyName = "dballInfo22",
-            name = "Attacks Until Death Ball",
-            description = "Shows an infobox with the attacks left until death ball",
-            section = sotetseg
-    )
-    default soteDeathballMode deathballInfobox() {
-        return soteDeathballMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 13,
-            keyName = "dthbSL22",
-            name = "Single Line Text",
-            description = "Makes the attacks until deathball and ticks until attack a single line",
-            section = sotetseg
-    )
-    default boolean deathballSingleLine() {
-        return false;
-    }
-
-    //------------------------------------------------------------//
-    // Xarpus
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 0,
-            keyName = "xarT3",
-            name = "Xarpus Ticks",
-            description = "Count down the ticks until xarpus attacks next",
-            section = xarpus
-    )
-    default boolean xarpusTicks() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 1,
-            keyName = "xarLos22",
-            name = "Xarpus Line of Sight",
-            description = "No attack here",
-            section = xarpus
-    )
-    default losMode xarpusLos() {
-        return losMode.OFF;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 2,
-            keyName = "xLosCol",
-            name = "Line of Sight Color",
-            description = "What sorta fuckin description u need u moron",
-            section = xarpus
-    )
-    default Color xarpusLosColor() {
-        return new Color(255, 0, 0, 255);
-    }
-
-    @Range(min = 0, max = 255)
-    @ConfigItem(
-            position = 3,
-            keyName = "xarLosFil3",
-            name = "Line of Sight Opacity",
-            description = "Changes the opacity of the Xarpus Line of Sight highlight",
-            section = xarpus
-    )
-    default int xarpusLosFill() {
-        return 20;
-    }
-
-    @ConfigItem(
-            position = 4,
-            name = "<html><p style=\"color:#25C54F\">—————— Exhumeds</p></html>",
-            keyName = "xar divi2",
-            description = "",
-            section = xarpus
-    )
-    void xarpusDivider1();
-
-    @ConfigItem(
-            position = 5,
-            keyName = "xarExhu2",
-            name = "Xarpus Exhumed",
-            description = "Highlight the exhumed tiles that spawn on the ground.",
-            section = xarpus
-    )
-    default exhumedMode xarpusExhumed() {
-        return exhumedMode.BOTH;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 6,
-            keyName = "exhuStOffWarn6",
-            name = "Exhumed Step Off Warning",
-            description = "Changes the color of exhumed ticks and/or highlights when they are not active.",
-            section = xarpus
-    )
-    default stepOffMode exhumedStepOffWarning() {
-        return stepOffMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "xarpExhuInf",
-            name = "Show Xarpus Exhumed Panel",
-            description = "Show a small info panel indicating how many exhumes remaining and total healed.",
-            section = xarpus
-    )
-    default boolean xarpusExhumedInfo() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "exhuOnXar7",
-            name = "Show Exhumed Count on Xarpus",
-            description = "Displays the number of exhumeds left on Xarpus",
-            section = xarpus
-    )
-    default boolean exhumedOnXarpus() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 9,
-            keyName = "exhuIB3",
-            name = "Show Exhumed Count Infobox",
-            description = "Displays the number of exhumeds left in an infobox",
-            section = xarpus
-    )
-    default boolean exhumedIB() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 10,
-            keyName = "xarHealC3",
-            name = "Show Healing Count Infobox",
-            description = "Displays the healing done from exhumeds",
-            section = xarpus
-    )
-    default boolean xarpusHealingCount()
-    {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 11,
-            name = "<html><p style=\"color:#25C54F\">—————— Audio</p></html>",
-            keyName = "xar divi2",
-            description = "",
-            section = xarpus
-    )
-    void xarpusDivider2();
-
-    @ConfigItem(
-            position = 12,
-            keyName = "muteXar2",
-            name = "Mute HM Earrape",
-            description = "Fuck that noise",
-            section = xarpus
-    )
-    default boolean muteXarpusHmEarrape() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 13,
-            keyName = "sweeshhsh",
-            name = "Sheeeesh",
-            description = "Why not?",
-            section = xarpus
-    )
-    default boolean sheesh() {
-        return false;
-    }
-
-    @Range(max = 100)
-    @ConfigItem(
-            position = 14,
-            keyName = "swheeeshiVolume",
-            name = "Sheesh Volume",
-            description = "Muted hard mode earrape.... then I added this",
-            section = xarpus
-
-    )
-    default int sheeshVolume() {
-        return 50;
-    }
-
-    //------------------------------------------------------------//
-    // Verzik
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 1,
-            keyName = "sVT",
-            name = "Show Verzik Ticks",
-            description = "Count down the ticks until Verzik attacks.",
-            section = verzik
-    )
-    default boolean showVerzikTicks() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 2,
-            keyName = "sVA",
-            name = "Show Attack Counter",
-            description = "Counts how many attacks Verzik has done",
-            section = verzik
-    )
-    default verzikAttacksMode showVerzikAttacks() {
-        return verzikAttacksMode.REDS;
-    }
-
-    @ConfigItem(
-            position = 3,
-            keyName = "sVTT",
-            name = "Show Total Tick Counter",
-            description = "Display the total tick counter on Verzik.",
-            section = verzik
-    )
-    default boolean showVerzikTotalTicks() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 4,
-            keyName = "VML",
-            name = "P3 True Location",
-            description = "Draws a true location tile around verzik during p3 <br> Purple until tornadoes spawn. Orange after tornadoes spawn. Tank changes color if YOU are the tank.",
-            section = verzik
-    )
-    default meleeTileMode verzikMelee() {
-        return meleeTileMode.NORMAL;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 5,
-            keyName = "vMC",
-            name = "P3 Tile Color",
-            description = "Sets color of P3 True Location",
-            section = verzik
-    )
-    default Color verzikMeleeColor() {
-        return new Color(106, 61, 255);
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 6,
-            keyName = "p33AggCol",
-            name = "P3 Tile Aggro Color",
-            description = "Changes the color the tile will be if you are chosen as the tank <br> Must have 'Tank Notifier' selected",
-            section = verzik
-    )
-    default Color p3AggroColor() {
-        return Color.RED;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "vTT",
-            name = "Verzik Tank Target",
-            description = "Highlight the tile of the player who is tanking. Color set by aggro color",
-            section = verzik
-    )
-    default boolean verzikTankTarget() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "mVeSs",
-            name = "Mute Verzik Sounds",
-            description = "Woooooo.... more sounds to mute",
-            section = verzik
-    )
-    default boolean muteVerzikSounds() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 9,
-            name = "<html><p style=\"color:#25C54F\">—————— Nylocas</p></html>",
-            keyName = "ver divi8",
-            description = "",
-            section = verzik
-    )
-    void verzikDivider1();
-
-    @ConfigItem(
-            position = 10,
-            keyName = "VNAgg",
-            name = "Show Crab Targets",
-            description = "Show a text overlay on crab spawns that are aggressive to you.",
-            section = verzik
-    )
-    default boolean verzikNyloAggroWarning() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 11,
-            keyName = "VNExpl",
-            name = "Crab Tile",
-            description = "Show crab explosion range with a tile indicator.",
-            section = verzik
-    )
-    default VerzikNyloSetting verzikNyloExplodeRange() {
-        return VerzikNyloSetting.MY_CRABS;
-    }
-
-    @ConfigItem(
-            position = 12,
-            keyName = "VNloExpCol",
-            name = "Crab Tile Color",
-            description = "Color of the tile for the exploding range.",
-            section = verzik
-    )
-    default Color verzikNyloExplodeTileColor() {
-        return Color.RED;
-    }
-
-    @ConfigItem(
-            position = 13,
-            keyName = "hpr3",
-            name = "Show Red Crab Hp",
-            description = "Shows the hp % of red crabs during P2 verzik",
-            section = verzik
-    )
-    default boolean redsHp() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 14,
-            keyName = "purp lurk",
-            name = "Show Purple AoE",
-            description = "Where the purple is gonna land",
-            section = verzik
-    )
-    default boolean purpleAoe() { return false; }
-
-    @ConfigItem(
-            position = 15,
-            keyName = "hid purp",
-            name = "Hide Attack Purple",
-            description = "Removes clickbox on purple crab spawn at Verzik when not wearing poison weapons/serps",
-            section = verzik
-    )
-    default boolean hidePurple() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 16,
-            keyName = "pCInfbo",
-            name = "Attacks Until Purple Crab",
-            description = "Shows an infobox with the attacks left until purple crab can spawn",
-            section = verzik
-    )
-    default boolean purpleCrabInfobox() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 17,
-            name = "<html><p style=\"color:#25C54F\">—————— Yellows</p></html>",
-            keyName = "verz divi2",
-            description = "",
-            section = verzik
-    )
-    void verzikDivider2();
-
-    @ConfigItem(
-            position = 18,
-            keyName = "shwVerYel",
-            name = "Show Yellows Tick",
-            description = "<u>Count down the ticks until Verzik yellow's damage tick.</u>"
-                    + "<br> Thank you to Caps Lock13 for contributing to the 'groups' option",
-            section = verzik
-    )
-    default verzikYellowsMode showVerzikYellows() {
-        return verzikYellowsMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 19,
-            keyName = "yelTOnP",
-            name = "Yellows Ticks on Player",
-            description = "Displays the yellows ticks on the local player instead of on the yellows",
-            section = verzik
-    )
-    default boolean yellowTicksOnPlayer() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 20,
-            keyName = "hAtYell",
-            name = "Hide Attack Yellows",
-            description = "Hides attack option on Verzik during yellows",
-            section = verzik
-    )
-    default boolean hideAttackYellows() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 21,
-            name = "<html><p style=\"color:#25C54F\">—————— Tornadoes</p></html>",
-            keyName = "ver3 divi",
-            description = "",
-            section = verzik
-    )
-    void verzikDivider3();
-
-    @ConfigItem(
-            position = 22,
-            keyName = "shoVeNdo",
-            name = "Show Tornadoes",
-            description = "Highlights all or only your personal tornado",
-            section = verzik
-    )
-    default nadoMode showVerzikNados() {
-        return nadoMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 23,
-            keyName = "sVNdoSyl",
-            name = "Tornado Style",
-            description = "Sets the type of highlight for Show Tornadoes",
-            section = verzik
-    )
-    default nadoStyle showVerzikNadoStyle() {
-        return nadoStyle.TRUE_LOCATION;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 24,
-            keyName = "sVNdoCol",
-            name = "Verzik Nado Color",
-            description = "Color for the tornadoes",
-            section = verzik
-    )
-    default Color showVerzikNadoColor() { return Color.RED; }
-
-    @Alpha
-    @ConfigItem(
-            position = 25,
-            keyName = "vNdoOpaci",
-            name = "Verzik Nado Opacity",
-            description = "opacity for the tornadoes",
-            section = verzik
-    )
-    default int verzikNadoOpacity() { return 0; }
-
-    @ConfigItem(
-            position = 26,
-            keyName = "hid0therNdos",
-            name = "Hide Other Tornadoes",
-            description = "Hides any tornado not following you",
-            section = verzik
-    )
-    default boolean hideOtherNados() { return false; }
-
-    @ConfigItem(
-            position = 27,
-            name = "<html><p style=\"color:#25C54F\">—————— Projectiles</p></html>",
-            keyName = "v d 3",
-            description = "",
-            section = verzik
-    )
-    void verzikDivider4();
-
-    @ConfigItem(
-            position = 28,
-            keyName = "sVRngAtt",
-            name = "Show Verzik Range Attacks",
-            description = "Shows the tile in which a ranged attack on P2 will land.",
-            section = verzik
-    )
-    default boolean showVerzikRangeAttack() { return false; }
-
-    @Alpha
-    @ConfigItem(
-            position = 29,
-            keyName = "vRngeAttCol",
-            name = "Verzik Range Attacks Color",
-            description = "Color for the garlic balls",
-            section = verzik
-
-    )
-    default Color verzikRangeAttacksColor() { return new Color(106, 61, 255, 255); }
-
-    @Range(min = 0, max = 255)
-    @ConfigItem(
-            position = 31,
-            keyName = "vRgeAttaFil",
-            name = "Verzik Range Attacks Opacity",
-            description = "Changes the opacity of the Xarpus Line of Sight highlight",
-            section = verzik
-
-    )
-    default int verzikRangeAttacksFill() {
-        return 20;
-    }
-
-    @ConfigItem(
-            position = 32,
-            keyName = "lightInfobox",
-            name = "Attacks Until Lightning",
-            description = "Shows the attacks left until lightning",
-            section = verzik
-    )
-    default lightningMode lightningInfobox() {
-        return lightningMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 33,
-            keyName = "lightningAT",
-            name = "Lightning Attack Tick",
-            description = "Displays the number of ticks before a lightning ball hits you.",
-            section = verzik
-    )
-    default boolean lightningAttackTick() { return false; }
-
-    @ConfigItem(
-            position = 34,
-            keyName = "dispGrB",
-            name = "Show Green Ball",
-            description = "Highlights whoever the green ball is on",
-            section = verzik
-    )
-    default greenBallMode displayGreenBall() { return greenBallMode.OFF; }
-
-    @ConfigItem(
-            position = 35,
-            keyName = "dispGrBT",
-            name = "Show Green Ball Ticks",
-            description = "Shows ticks on the person who has green ball on them",
-            section = verzik
-    )
-    default boolean displayGreenBallTicks() { return false; }
-
-    @ConfigItem(
-            position = 36,
-            keyName = "gBPan",
-            name = "Green Bounce/Dmg Counter",
-            description = "Infobox to display how many times you have bounced the green ball",
-            section = verzik
-    )
-    default greenBouncePanelMode greenBouncePanel() { return greenBouncePanelMode.OFF; }
-
-    @ConfigItem(
-            position = 37,
-            name = "<html><p style=\"color:#25C54F\">—————— Hard Mode</p></html>",
-            keyName = "v di32",
-            description = "",
-            section = verzik
-    )
-    void verzikDivider5();
-
-    @ConfigItem(
-            position = 38,
-            keyName = "sVRock",
-            name = "Show HM Verzik Rocks",
-            description = "Shows the tile the rocks will land on in P1 of Hard mode",
-            section = verzik
-    )
-    default boolean showVerzikRocks() { return false; }
-
-    @Alpha
-    @ConfigItem(
-            position = 39,
-            keyName = "sVRockCol",
-            name = "Verzik Rock Color",
-            description = "Color for the rocks in P1",
-            section = verzik
-    )
-    default Color showVerzikRocksColor() { return new Color(106, 61, 255); }
-
-    @ConfigItem(
-            position = 40,
-            keyName = "sVAcid",
-            name = "Show HM Acid",
-            description = "Shows the tile the acid from hard mode Verzik range attacks is on",
-            section = verzik
-    )
-    default boolean showVerzikAcid() { return false; }
-
-    @Range(min = 1)
-    @ConfigItem(
-            position = 41,
-            keyName = "sVADist",
-            name = "Acid Render Distance",
-            description = "Only highlights acid within a certain distance",
-            section = verzik
-    )
-    default int showVerzikAcidDistance() { return 5; }
-
-    @Alpha
-    @ConfigItem(
-            position = 42,
-            keyName = "sVACol",
-            name = "Verzik Acid Color",
-            description = "Color for the acid from range attacks in P2",
-            section = verzik
-
-    )
-    default Color showVerzikAcidColor() { return Color.GREEN; }
-
-    //------------------------------------------------------------//
-    // Misc
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 0,
-            keyName = "rct3",
-            name = "Remove Cast ToB",
-            description = "Removes cast on players and thralls in Theatre of Blood",
-            section = misc
-    )
-    default boolean removeCastToB() { return false; }
-
-    @ConfigItem(
-            position = 1,
-            keyName = "eIT",
-            name = "Tick Entry Timer",
-            description = "Show the instance timer indicating when you should enter the Nylo and Xarpus rooms for perfect spawn.",
-            section = misc
-    )
-    default instancerTimerMode entryInstanceTimer() {
-        return instancerTimerMode.OVERHEAD;
-    }
-
-    @ConfigItem(
-            position = 2,
-            keyName = "remoFlag",
-            name = "Left Click Bank Loot",
-            description = "Removes the 'Force Right Click' flag from the [Bank-all] option inside the Monumental Chest in the Loot Room",
-            section = misc
-    )
-    default boolean removeFRCFlag() {
-        return true;
-    }
-
-    @ConfigItem(
-            position = 4,
-            keyName = "rTL4",
-            name = "Red Crabs True Tile",
-            description = "Shows the true tile for red crabs",
-            section = misc
-    )
-    default redsTlMode redsTL() {return redsTlMode.OFF;}
-
-    @ConfigItem(
-            position = 5,
-            keyName = "rTLCol",
-            name = "Red Crabs True Tile Color",
-            description = "Color for the reds true tile",
-            section = misc
-    )
-    default Color redsTLColor() {return new Color(207, 138, 253, 255);}
-
-    @ConfigItem(
-            position = 6,
-            keyName = "recolBar",
-            name = "Recolor Barriers",
-            description = "Recolors all the barriers inside the raid",
-            section = misc
-    )
-    default barrierMode recolorBarriers() {
-        return barrierMode.COLOR;
-    }
-
-    @ConfigItem(
-            position = 7,
-            keyName = "barrisCol",
-            name = "Barriers Color",
-            description = "Sets the color of barriers",
-            section = misc
-    )
-    @Alpha
-    default Color barriersColor() {
-        return new Color(106, 61, 255, 255);
-    }
-
-    @ConfigItem(
-            position = 8,
-            keyName = "sTBuy3",
-            name = "Swap value with buy 1",
-            description = "Swap value and buy 1 on tob chest items",
-            section = misc
-    )
-    default boolean swapTobBuys() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 9,
-            keyName = "situaT",
-            name = "Situational Ticks",
-            description = "Displays ticks till next attack on players with certain weapons <br> " +
-                    "Local player in Bloat and all players in Xarpus",
-            section = misc
-    )
-    default boolean situationalTicks() {return false;}
-
-    @ConfigItem(
-            position = 10,
-            keyName = "stR4",
-            name = "Stamina Requirement",
-            description = "Doesn't let you go to the next room if you don't have a stamina potion",
-            section = misc
-    )
-    default stamReqMode stamReq() {
-        return stamReqMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 11,
-            keyName = "oldhp4",
-            name = "Old HP Colors",
-            description = "Changes HP overlays from a gradual change to set colors <br>" +
-                    "Works for maiden reds, verzik reds, and nylo pillars",
-            section = misc
-    )
-    default boolean oldHpThreshold() {return false;}
-
-    @ConfigItem(
-            position = 66,
-            keyName = "vTCrysHelp",
-            name = "Remove Use Teleport Crystal",
-            description = "Removes use option for verzik's teleport crystals on anything other than players",
-            section = misc
-    )
-    default boolean verzikTeleportCrystalHelper() {return false;}
-
-    @ConfigItem(
-            position = 67,
-            keyName = "lRemi",
-            name = "Loot Reminder",
-            description = "Dont be a chest victim",
-            section = misc
-    )
-    default lootReminderMode lootReminder() {
-        return lootReminderMode.OFF;
-    }
-
-    @Alpha
-    @ConfigItem(
-            position = 68,
-            keyName = "lootRemiCol",
-            name = "Reminder Color",
-            description = "Sets color of the chest highlight from loot reminder",
-            section = misc
-    )
-    default Color lootReminderColor() {return new Color(106, 61, 255, 100);}
-
-    @ConfigItem(
-            position = 89,
-            name = "<html><p style=\"color:#25C54F\">—————— Rave</p></html>",
-            keyName = "misc1 divi1",
-            description = "",
-            section = misc
-    )
-    void miscDivider1();
-
-    @ConfigItem(
-            position = 90,
-            keyName = "fbl",
-            name = "Fuck Bluelite",
-            description = "Fuck Bluelite",
-            section = misc
-    )
-    default boolean fuckBluelite() {
-        return false;
-    }
-
-    @ConfigItem(
-            keyName = "raveN",
-            name = "Rave Nylos",
-            description = "Fucking crab rave",
-            section = misc,
-            position = 99
-    )
-    default boolean raveNylo() {
-        return false;
-    }
-
-    @ConfigItem(
-            keyName = "raveNad1",
-            name = "Rave Nados",
-            description = "Just incase you cant fucking see it",
-            section = misc,
-            position = 99
-    )
-    default raveNadoMode raveNados() {
-        return raveNadoMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 99,
-            keyName = "rh1",
-            name = "Rave Hats",
-            description = "Hats = $400<br>Rave Hats = my fucking sanity",
-            section = misc
-    )
-    default raveHatsMode raveHats() {
-        return raveHatsMode.OFF;
-    }
-
-    @ConfigItem(
-            position = 99,
-            keyName = "rl1",
-            name = "Rave Xarpus Line of Sight",
-            description = "No attack here... rave",
-            section = misc
-    )
-    default boolean raveLos() { return false; }
-
-    @ConfigItem(
-            position = 100,
-            keyName = "rSpeed5",
-            name = "Rave Speed",
-            description = "Sets the speed the overlays rave at",
-            section = misc
-    )
-    @Units(Units.MILLISECONDS)
-    default int raveSpeed() { return 6000; }
-
-    @ConfigItem(
-            keyName = "hlm4",
-            name = "",
-            description = "",
-            hidden = true
-    )
-    default boolean getHighlightMeleeNylo() {
-        return false;
-    }
-
-    @ConfigItem(
-            keyName = "hlm4",
-            name = "",
-            description = "",
-            hidden = true
-    )
-    void setHighlightMeleeNylo(boolean var1);
-
-    @ConfigItem(
-            keyName = "high2lightMa",
-            name = "",
-            description = "",
-            hidden = true
-    )
-    default boolean getHighlightMageNylo() {
-        return false;
-    }
-
-    @ConfigItem(
-            keyName = "high2lightMa",
-            name = "",
-            description = "",
-            hidden = true
-    )
-    void setHighlightMageNylo(boolean var1);
-
-    @ConfigItem(
-            keyName = "hig1lightRe",
-            name = "",
-            description = "",
-            hidden = true
-    )
-    default boolean getHighlightRangeNylo() {
-        return false;
-    }
-
-    @ConfigItem(
-            keyName = "hig1lightRe",
-            name = "",
-            description = "",
-            hidden = true
-    )
-    void setHighlightRangeNylo(boolean var1);
-
-    //------------------------------------------------------------//
-    // Font
-    //------------------------------------------------------------//
-    @ConfigItem(
-            position = 0,
-            keyName = "fontSyl1",
-            name = "Runelite Font",
-            description = "Replaces the default font with whatever you have the dynamic font set to",
-            section = font
-    )
-    default boolean fontStyle() {
-        return false;
-    }
-
-    @ConfigItem(
-            position = 1,
-            keyName = "resizeFon22",
-            name = "Allow Resizing Font",
-            description = "Lets you resize font for overlays in Tob. Resizes ALL overlays when turned on",
-            section = font
-    )
-    default boolean resizeFont() {
-        return false;
-    }
-
-    @Range(max = 30)
-    @ConfigItem(
-            position = 2,
-            keyName = "tFontSiz3",
-            name = "Overlay Font Size",
-            description = "Sets the font size for all Tob overlays. Must have 'Allow resizing font' on",
-            section = font
-    )
-    default int tobFontSize()
-    {
-        return 12;
-    }
-
-    @ConfigItem(
-            position = 3,
-            keyName = "fontWegh11",
-            name = "Font Weight",
-            description = "Bold/Italics/Plain.",
-            section = font
-    )
-    default FontStyle fontWeight()
-    {
-        return FontStyle.BOLD;
-    }
-
-    @ConfigItem(
-            position = 4,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "fntdiide22",
-            description = "",
-            section = font
-    )
-    void fontDivider1();
-
-    @ConfigItem(
-            position = 5,
-            keyName = "deble",
-            name = "Death Ball Font Size",
-            description = "Font size for the death ball ticks - must have on player selected",
-            section = font
-
-    )
-    default int deathballSize() {return 14;}
-
-    @Range(min = -60)
-    @ConfigItem(
-            position = 6,
-            keyName = "deballOffset",
-            name = "Death Ball Font Offset",
-            description = "Offset for the death ball ticks - must have on player selected",
-            section = font
-
-    )
-    default int deathballOffset() {return 0;}
-
-    @ConfigItem(
-            position = 7,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "font11ivide22",
-            description = "",
-            section = font
-    )
-    void fontDivider2();
-
-    @ConfigItem(
-            position = 8,
-            keyName = "ySiz1",
-            name = "Yellows Font Size",
-            description = "Font size for the yellows ticks - must have on player selected",
-            section = font
-
-    )
-    default int yellowsSize() {return 14;}
-
-    @Range(min = -60)
-    @ConfigItem(
-            position = 9,
-            keyName = "yelsOffse11",
-            name = "Yellows Font Offset",
-            description = "Offset for the yellows ticks - must have on player selected",
-            section = font
-
-    )
-    default int yellowsOffset() {return 0;}
-
-    @ConfigItem(
-            position = 10,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "font dide11",
-            description = "",
-            section = font
-    )
-    void fontDivider3();
-
-    @ConfigItem(
-            position = 11,
-            keyName = "zapS",
-            name = "Zap Font Size",
-            description = "Font size for the zap ticks - must have on player selected",
-            section = font
-
-    )
-    default int zapSize() {return 14;}
-
-    @Range(min = -60)
-    @ConfigItem(
-            position = 12,
-            keyName = "zapOset",
-            name = "Zap Font Offset",
-            description = "Offset for the zap ticks - must have on player selected",
-            section = font
-
-    )
-    default int zapOffset() {return 0;}
-
-    @ConfigItem(
-            position = 13,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "font divid1",
-            description = "",
-            section = font
-    )
-    void fontDivider4();
-
-    @ConfigItem(
-            position = 14,
-            keyName = "gBalle",
-            name = "Green Ball Font Size",
-            description = "Font size for the green ball ticks - must have on player selected",
-            section = font
-    )
-    default int greenBallSize() {return 15;}
-
-    @Range(min = -60)
-    @ConfigItem(
-            position = 15,
-            keyName = "setgrnoff",
-            name = "Green Ball Font Offset",
-            description = "Offset for the green ball ticks - must have on player selected",
-            section = font
-    )
-    default int greenBallOffset() {return 0;}
-
-    @ConfigItem(
-            position = 16,
-            name = "<html><p style=\"color:#25C54F\">——————</p></html>",
-            keyName = "fntivide33",
-            description = "",
-            section = font
-    )
-    void fontDivider5();
-
-    @ConfigItem(
-            position = 17,
-            keyName = "situaTS",
-            name = "Sit. Ticks Font Size",
-            description = "Font size for the situational ticks - must have on player selected",
-            section = font
-    )
-    default int situationalTicksSize() {return 14;}
-
-    @Range(min = -60)
-    @ConfigItem(
-            position = 18,
-            keyName = "situatTOffset",
-            name = "Sit. Ticks Font Offset",
-            description = "Offset for the situational ticks - must have on player selected",
-            section = font
-    )
-    default int situationalTicksOffset() {return 60;}
-
-    //------------------------------------------------------------//
-    // Maiden enums
-    //------------------------------------------------------------//
-    enum maidenBloodSplatMode {
-        OFF, COLOR, RAVE, RAVEST
-    }
-
-    enum maidenFreezeTimerMode {
-        OFF, TICKS, TILE
-    }
-
-    enum maidenBloodsMode{
-        OFF, CAST, ATTACK, BOTH
-    }
-
-    enum MaidenMaxHitTTMode {
-        OFF("Off"),
-        REGULAR("Regular"),
-        ELY("Elysian"),
-        BOTH("Both");
-
-        private final String name;
-
-        public String toString() {
-            return this.name;
-        }
-
-        public String getName() {
-            return this.name;
-        }
-
-        MaidenMaxHitTTMode(String name) {
-            this.name = name;
-        }
-    }
-
-    enum MaidenMaxHit {
-        OFF("Off"),
-        REGULAR("Regular"),
-        ELY("Elysian"),
-        BOTH("Both");
-
-        private final String name;
-
-        public String toString() {
-            return this.name;
-        }
-
-        public String getName() {
-            return this.name;
-        }
-
-        MaidenMaxHit(String name) {
-            this.name = name;
-        }
-    }
-
-    //------------------------------------------------------------//
-    // Bloat enums
-    //------------------------------------------------------------//
-    enum BloatIndicatorMode {
-        OFF, TILE, TRUE_LOCATION
-    }
-
-    enum bloatHandsMode{
-        OFF, COLOR, RAVE, RAVEST
-    }
-
-    enum bloatStompMode {
-        OFF, COLOR, RAVE
-    }
-
-    enum bloatTurnMode {
-        OFF, SOUND, CHA_CHA
-    }
-
-    enum annoyingObjectHideMode{
-        OFF, CHAINS, TANK, BOTH
-    }
-
-    //------------------------------------------------------------//
-    // Nylo enums
-    //------------------------------------------------------------//
-    enum wheelchairMode {
-        OFF, WAVES, BOSS, BOTH
-    }
-
-    enum nyloBossPhaseChange {
-        OFF, BOSS, BOTH
-    }
-
-    enum nyloExplosionType {
-        TILE, EXPLOSION
-    }
-
-    enum ExplosionWarning {
-        OFF, TILE, TICKS, BOTH
-    }
-
-    enum nylotimealive {
-        COUNTUP, COUNTDOWN
-    }
-
-    enum aggroStyle {
-        OFF, HULL, TILE
-    }
-
-    enum nyloSplitsMessage {
-        OFF, WAVES, BOSS, BOTH
-    }
-
-    enum splitsMsgTiming {
-        CLEANUP, FINISHED
-    }
-
-    enum smallSplitsMode {
-        CAP, TOTAL, BOTH
-    }
-
-    enum waveSpawnTimerMode {
-        OFF, INFOBOX, OVERLAY, BOTH
-    }
-
-    enum hidePillarsMode {
-        OFF, PILLARS, CLEAN
-    }
-
-    enum waveTimerMode {
-        WR5("2:45"),
-        WR4("2:48"),
-        FIVES("2:50"),
-        FOURS("2:52"),
-        TRIO("2:55"),
-        WR2("3:09"),
-        WR2_1("3:12"),
-        DUO("3:14");
-
-        private final String name;
-
-        public String toString() {
-            return this.name;
-        }
-
-        public String getName() {
-            return this.name;
-        }
-
-        waveTimerMode(String name) {
-            this.name = name;
-        }
-    }
-
-    //------------------------------------------------------------//
-    // Sote enums
-    //------------------------------------------------------------//
-    enum soteOrbMode {
-        OFF, TICKS, HATS, BOTH
-    }
-
-    enum soteDeathballMode {
-        OFF, INFOBOX, OVERLAY, BOTH
-    }
-
-    enum soteDeathballOverlayMode {
-        OFF, TICKS, NUKE, BOTH
-    }
-
-    enum raveHatsMode {
-        OFF, RAVE, EPILEPSY, TURBO
-    }
-
-    //------------------------------------------------------------//
-    // Xarpus enums
-    //------------------------------------------------------------//
-    enum exhumedMode {
-        OFF, TILE, TICKS, BOTH
-    }
-
-    enum stepOffMode {
-        OFF, TILE, TICKS, BOTH
-    }
-
-    enum meleeTileMode {
-        OFF, NORMAL, TANK_NOTIFIER
-    }
-
-    enum losMode {
-        OFF, MELEE, QUADRANT
-    }
-
-    //------------------------------------------------------------//
-    // Verzik enums
-    //------------------------------------------------------------//
-    enum verzikAttacksMode {
-        OFF, REDS, P2, ALL
-    }
-
-    enum VerzikNyloSetting {
-        OFF, MY_CRABS, ALL_CRABS
-    }
-
-    enum nadoMode {
-        OFF, ALL, PERSONAL
-    }
-
-    enum nadoStyle {
-        TILE, TRUE_LOCATION
-    }
-
-    enum verzikYellowsMode {
-        OFF, YELLOW, GROUPS
-    }
-
-    enum greenBouncePanelMode {
-        OFF, BOUNCES, DAMAGE, BOTH
-    }
-
-    enum greenBallMode{
-        OFF, TILE, AREA
-    }
-
-    enum lightningMode {
-        OFF, INFOBOX, OVERLAY, BOTH
-    }
-
-    //------------------------------------------------------------//
-    // Misc enums
-    //------------------------------------------------------------//
-    enum redsTlMode {
-        OFF, MAIDEN, VERZIK, BOTH
-    }
-
-    enum barrierMode {
-        OFF, COLOR, RAVE
-    }
-
-    enum instancerTimerMode {
-        OFF, OVERHEAD, OVERLAY
-    }
-
-    enum stamReqMode {
-        OFF, NYLO, XARPUS, BOTH
-    }
-
-    enum lootReminderMode {
-        OFF, DUMB, DUMBER, DUMBEST, DUMBEREST
-    }
-
-    enum raveNadoMode {
-        OFF, RAVE, RAVEST
-    }
-
-    @Getter(AccessLevel.PACKAGE)
-    @AllArgsConstructor
-    enum FontStyle
-    {
-        BOLD("Bold", Font.BOLD),
-        ITALIC("Italic", Font.ITALIC),
-        PLAIN("Plain", Font.PLAIN);
-
-        private final String name;
-        private final int font;
-
-        @Override
-        public String toString()
-        {
-            return getName();
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PurpleCrabPanel.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PurpleCrabPanel.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PurpleCrabPanel.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PurpleCrabPanel.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,58 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.Client;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayPanel;
-import net.runelite.client.ui.overlay.OverlayPosition;
-import net.runelite.client.ui.overlay.OverlayPriority;
-import net.runelite.client.ui.overlay.components.ImageComponent;
-import net.runelite.client.ui.overlay.components.TitleComponent;
-import net.runelite.client.util.ImageUtil;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-
-public class PurpleCrabPanel extends OverlayPanel {
-    private SpoonTobPlugin plugin;
-
-    private SpoonTobConfig config;
-
-    private Client client;
-
-    private Verzik verzik;
-
-    @Inject
-    public PurpleCrabPanel(SpoonTobPlugin plugin, SpoonTobConfig config, Client client, Verzik verzik) {
-        super(plugin);
-        this.plugin = plugin;
-        this.config = config;
-        this.client = client;
-        this.verzik = verzik;
-        setPriority(OverlayPriority.HIGH);
-        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        this.panelComponent.getChildren().clear();
-        if(config.purpleCrabInfobox() && this.verzik.isVerzikActive() && this.verzik.getVerzikPhase() == Verzik.Phase.PHASE2) {
-            Color color = Color.WHITE;
-            if(verzik.purpleAttacksLeft > 0) {
-                if (verzik.purpleAttacksLeft == 1) {
-                    color = Color.RED;
-                }
-                this.panelComponent.getChildren().add(TitleComponent.builder()
-                        .color(color)
-                        .text(Integer.toString(verzik.purpleAttacksLeft))
-                        .build());
-            }else {
-                BufferedImage img = ImageUtil.loadImageResource(SpoonTobPlugin.class, "purpleNylo.png");
-                ImageComponent imgComp = new ImageComponent(img);
-                this.panelComponent.getChildren().add(imgComp);
-            }
-            this.panelComponent.setPreferredSize(new Dimension(24, 24));
-        }
-        return super.render(graphics);
-    }
-}
Index: src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPluginConfig.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPluginConfig.java b/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPluginConfig.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPluginConfig.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,26 +0,0 @@
-package net.runelite.client.plugins.LavaRunecrafter;
-
-import net.runelite.client.config.Config;
-import net.runelite.client.config.ConfigGroup;
-import net.runelite.client.config.ConfigItem;
-
-@ConfigGroup("LavaRunecrafter")
-public interface LavaRunecrafterPluginConfig extends Config {
-    @ConfigItem(
-            keyName = "TeleMethod",
-            name = "Teleport Method",
-            description = "Which method you will use to get to the altar"
-    )
-    default TeleportMethods TeleMethod() {
-        return TeleportMethods.RING_OF_DUELING;
-    }
-
-    @ConfigItem(
-            keyName = "VialSmasher",
-            name = "Vial Smasher Enabled",
-            description = "Does the account have vial smasher enabled?"
-    )
-    default boolean VialSmasher() {
-        return false;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/Verzik.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/Verzik.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/Verzik.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/Verzik.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,1036 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import com.google.common.collect.ImmutableSet;
-import lombok.Getter;
-import net.runelite.api.*;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.api.events.*;
-import net.runelite.api.kit.KitType;
-import net.runelite.api.MenuEntry;
-import net.runelite.client.callback.ClientThread;
-import net.runelite.client.eventbus.Subscribe;
-import net.runelite.client.events.ConfigChanged;
-import net.runelite.client.plugins.spoontob.Room;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.plugins.spoontob.util.PoisonStyle;
-import net.runelite.client.plugins.spoontob.util.PoisonWeaponMap;
-import net.runelite.client.util.ImageUtil;
-import org.apache.commons.lang3.ObjectUtils;
-import org.apache.commons.lang3.tuple.MutablePair;
-import org.apache.commons.lang3.tuple.Pair;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.util.*;
-import java.util.List;
-import java.util.function.BiFunction;
-import java.util.function.Function;
-import java.util.function.Predicate;
-
-import static net.runelite.api.NpcID.*;
-
-public class Verzik extends Room {
-    @Inject
-    private Client client;
-
-    @Inject
-    private VerzikOverlay verzikOverlay;
-
-    @Inject
-    private LightningPanel lightningPanel;
-
-    @Inject
-    private PurpleCrabPanel purpleCrabPanel;
-
-    @Inject
-    private GreenBallPanel greenBallPanel;
-
-    @Inject
-    private YellowGrouperOverlay yellowGroupOverlay;
-
-    @Inject
-    private VerzikRedsOverlay redsOverlay;
-
-    private PoisonStyle poisonStyle;
-    private boolean skipTickCheck = false;
-
-    private ClientThread clientThread;
-
-    private static final Logger log = LoggerFactory.getLogger(SpoonTobPlugin.class);
-    private static final int REGULAR_TORNADO = 8386;
-    private static final int SM_TORNADO = 10846;
-    private static final int HM_TORNADO = 10863;
-
-    private static final int VERZIK_P1_MAGIC = 8109;
-    private static final int VERZIK_P2_REG = 8114;
-    private static final int VERZIK_P2_BOUNCE = 8116;
-    private static final int VERZIK_ORGASM = 8117;
-
-    private static final int p3_crab_attack_count = 5;
-    private static final int p3_web_attack_count = 10;
-    private static final int p3_yellow_attack_count = 15;
-    private static final int p3_green_attack_count = 20;
-
-    private static final int VERZIK_RANGE_BALL = 1583;
-    private static final int VERZIK_LIGHTNING_BALL = 1585;
-    private static final int VERZIK_YELLOW_OBJECT = 1595;
-    private static final int VERZIK_YELLOW_BALL = 1596;
-    private static final int VERZIK_GREEN_BALL = 1598;
-    private static final int VERZIK_PURPLE_SPAWN = 1586;
-    private static final int HM_ACID = 41747;
-
-    protected static final Set<Integer> BEFORE_START_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8369, VERZIK_VITUR_10830, VERZIK_VITUR_10847
-    );
-    protected static final Set<Integer> P1_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8370, VERZIK_VITUR_10831, VERZIK_VITUR_10848
-    );
-    protected static final Set<Integer> P12_TRANSITION_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8371, VERZIK_VITUR_10832, VERZIK_VITUR_10849
-    );
-    protected static final Set<Integer> P2_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8372, VERZIK_VITUR_10833, VERZIK_VITUR_10850
-    );
-    protected static final Set<Integer> P23_TRANSITION_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8373, VERZIK_VITUR_10834, VERZIK_VITUR_10851
-    );
-    protected static final Set<Integer> P3_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8374, VERZIK_VITUR_10835, VERZIK_VITUR_10852
-    );
-    protected static final Set<Integer> DEAD_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8375, VERZIK_VITUR_10836, VERZIK_VITUR_10853
-    );
-    protected static final Set<Integer> NADO_IDS = ImmutableSet.of(
-            REGULAR_TORNADO, SM_TORNADO, HM_TORNADO
-    );
-    protected static final Set<Integer> VERZIK_ACTIVE_IDS = ImmutableSet.of(
-            VERZIK_VITUR_8370, VERZIK_VITUR_8371, VERZIK_VITUR_8372, VERZIK_VITUR_8373, VERZIK_VITUR_8374,
-            VERZIK_VITUR_10831, VERZIK_VITUR_10832, VERZIK_VITUR_10833, VERZIK_VITUR_10834, VERZIK_VITUR_10835,
-            VERZIK_VITUR_10848, VERZIK_VITUR_10849, VERZIK_VITUR_10850, VERZIK_VITUR_10851, VERZIK_VITUR_10852
-    );
-
-    @Getter
-    private NPC verzikNPC;
-    @Getter
-    private boolean verzikActive;
-    @Getter
-    private Map<NPC, Pair<Integer, Integer>> verzikReds = new HashMap();
-    @Getter
-    private HashSet<NPC> verzikAggros = new HashSet();
-    @Getter
-    private int verzikTicksUntilAttack = -1;
-    @Getter
-    private int verzikTotalTicksUntilAttack = 0;
-    @Getter
-    private boolean verzikEnraged = false;
-    private boolean verzikFirstEnraged = false;
-    @Getter
-    private int verzikAttackCount;
-    @Getter
-    protected Phase verzikPhase;
-    private boolean verzikTickPaused = true;
-    protected boolean verzikRedPhase = false;
-    @Getter
-    private SpecialAttack verzikSpecial;
-    private int verzikLastAnimation;
-
-    @Getter
-    public final Map<Projectile, WorldPoint> verzikRangeProjectiles = new HashMap();
-
-    @Getter
-    private final Map<LocalPoint, Integer> purpleCrabProjectile = new HashMap();
-    @Getter
-    private NPC purpleCrabNpc = null;
-    public int purpleAttacksLeft = 0;
-
-    public ArrayList<Integer> WEAPONS = new ArrayList<>(Arrays.asList(12926, 12006, 12899, 22292, 5698));
-    public ArrayList<Integer> SERPS = new ArrayList<>(Arrays.asList(12931, 13197, 13199));
-    public int weaponId = 0;
-    public int helmId = 0;
-
-    public boolean yellowsOut;
-    public int yellowTimer;
-    public int hmYellowSpotNum;
-
-    public ArrayList<NPC> redCrabs = new ArrayList<>();
-    public ArrayList<Integer> lastRatioList = new ArrayList<>();
-    public ArrayList<Integer> lastHealthScaleList = new ArrayList<>();
-
-    public ArrayList<GameObject> acidSpots = new ArrayList<>();
-    public ArrayList<Integer> acidSpotsTimer = new ArrayList<>();
-
-    public int lightningAttacks;
-    public int lightningAttacksDelay;
-    @Getter
-    private Map<Projectile, Integer> verzikLightningProjectiles = new HashMap<>();
-
-    public ArrayList<ArrayList<WorldPoint>> yellowGroups;
-    private ArrayList<WorldPoint> yellows;
-    public ArrayList<WorldPoint> yellowsList;
-
-    @Getter
-    private NPC personalNado = null;
-    public ArrayList<TornadoTracker> nadoList;
-    private WorldPoint prevPlayerWp;
-    private int nadosOut;
-    private int personalNadoRespawn = 0;
-
-    private ArrayList<String> partyMembersNames = new ArrayList<>();
-
-    public int greenBallBounces = 0;
-    public boolean greenBallOut = false;
-    public int greenBallDelay = 0;
-
-    List<GameObject> pillarsPendingRemoval;
-    public List<WorldPoint> pillarLocations;
-
-    @Inject
-    private Verzik(SpoonTobPlugin plugin, SpoonTobConfig config) {
-        super(plugin, config);
-        verzikSpecial = SpecialAttack.NONE;
-        verzikLastAnimation = -1;
-
-        purpleCrabProjectile.clear();
-        purpleCrabNpc = null;
-        purpleAttacksLeft = 0;
-        weaponId = 0;
-        helmId = 0;
-        poisonStyle = null;
-
-        yellowsOut = false;
-        yellowTimer = 14;
-        hmYellowSpotNum = 1;
-
-        lightningAttacks = 4;
-        lightningAttacksDelay = 0;
-        yellowGroups = new ArrayList<>();
-        yellows = new ArrayList<>();
-        yellowsList = new ArrayList<>();
-        nadosOut = 0;
-        nadoList = new ArrayList<>();
-        personalNadoRespawn = 0;
-        greenBallBounces = 0;
-        greenBallOut = false;
-        greenBallDelay = 0;
-        pillarsPendingRemoval = new ArrayList<>();
-        pillarLocations = new ArrayList<>();
-    }
-
-    public void load() {
-        overlayManager.add(verzikOverlay);
-        overlayManager.add(lightningPanel);
-        overlayManager.add(yellowGroupOverlay);
-        overlayManager.add(greenBallPanel);
-        overlayManager.add(purpleCrabPanel);
-        overlayManager.add(redsOverlay);
-        poisonStyle = null;
-    }
-
-    public void unload() {
-        overlayManager.remove(verzikOverlay);
-        overlayManager.remove(lightningPanel);
-        overlayManager.remove(yellowGroupOverlay);
-        overlayManager.remove(greenBallPanel);
-        overlayManager.remove(purpleCrabPanel);
-        overlayManager.remove(redsOverlay);
-        verzikCleanup();
-        plugin.clearHiddenNpcs();
-        poisonStyle = null;
-    }
-
-    @Subscribe
-    public void onNpcSpawned(NpcSpawned npcSpawned) {
-        NPC npc = npcSpawned.getNpc();
-        switch(npc.getId()) {
-            case VERZIK_VITUR_8369:
-            case VERZIK_VITUR_8371:
-            case VERZIK_VITUR_8373:
-            case VERZIK_VITUR_8375:
-            case VERZIK_VITUR_10830: //Story mode
-            case VERZIK_VITUR_10832:
-            case VERZIK_VITUR_10834:
-            case VERZIK_VITUR_10836:
-            case VERZIK_VITUR_10847: //Hard mode
-            case VERZIK_VITUR_10849:
-            case VERZIK_VITUR_10851:
-            case VERZIK_VITUR_10853:
-                verzikSpawn(npc);
-                break;
-            case VERZIK_VITUR_8370:
-            case VERZIK_VITUR_10831: //Story Mode
-            case VERZIK_VITUR_10848: //Hard Mode
-                verzikPhase = Phase.PHASE1;
-                verzikSpawn(npc);
-                break;
-            case VERZIK_VITUR_8372:
-            case VERZIK_VITUR_10833: //Story Mode
-            case VERZIK_VITUR_10850: //Hard Mode
-                verzikPhase = Phase.PHASE2;
-                verzikSpawn(npc);
-                lightningAttacks = 4;
-                break;
-            case VERZIK_VITUR_8374:
-            case VERZIK_VITUR_10835: //Story Mode
-            case VERZIK_VITUR_10852: //Hard Mode
-                verzikPhase = Phase.PHASE3;
-                verzikSpawn(npc);
-                break;
-            case WEB:
-            case WEB_10837: //Story Mode
-            case WEB_10854: //Hard Mode
-                if (verzikNPC != null && verzikNPC.getInteracting() == null) {
-                    verzikSpecial = SpecialAttack.WEBS;
-                }
-                break;
-            case NYLOCAS_ISCHYROS_8381:
-            case NYLOCAS_TOXOBOLOS_8382:
-            case NYLOCAS_HAGIOS_8383:
-            case NYLOCAS_ISCHYROS_10841: //Story mode
-            case NYLOCAS_TOXOBOLOS_10842:
-            case NYLOCAS_HAGIOS_10843:
-            case NYLOCAS_ISCHYROS_10858: //Hard mode
-            case NYLOCAS_TOXOBOLOS_10859:
-            case NYLOCAS_HAGIOS_10860:
-                verzikAggros.add(npc);
-                break;
-            case NYLOCAS_MATOMENOS_8385:
-            case NYLOCAS_MATOMENOS_10845: //Story Mode
-            case NYLOCAS_MATOMENOS_10862: //Hard Mode
-                verzikReds.putIfAbsent(npc, new MutablePair(npc.getHealthRatio(), npc.getHealthScale()));
-                break;
-            case REGULAR_TORNADO:
-            case SM_TORNADO: //Story Mode
-            case HM_TORNADO: //Hard Mode
-                if (personalNado == null && personalNadoRespawn == 0){
-                    nadoList.add(new TornadoTracker(npc));
-                }
-
-                if (!verzikEnraged) {
-                    verzikEnraged = true;
-                    verzikFirstEnraged = true;
-                }
-                nadosOut++;
-        }
-        if (npc.getName() != null && npc.getName().equals("Nylocas Athanatos")){
-            purpleCrabNpc = npc;
-        }
-
-        if (npc.getName() != null && npc.getName().equals("Nylocas Matomenos")){
-            redCrabs.add(npc);
-            lastRatioList.add(0);
-            lastHealthScaleList.add(0);
-        }
-    }
-
-    @Subscribe
-    public void onNpcChanged (NpcChanged event) {
-        int id = event.getNpc().getId();
-        if (DEAD_IDS.contains(id)) {
-            verzikCleanup();
-        } else if (P1_IDS.contains(id)) {
-            partyMembersNames.clear();
-            for (int i = 330; i < 335; i++) {
-                if (client.getVarcStrValue(i) != null && !client.getVarcStrValue(i).equals("")) {
-                    partyMembersNames.add(client.getVarcStrValue(i).replaceAll("[^A-Za-z0-9_-]", " ").trim());
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onNpcDespawned(NpcDespawned npcDespawned) {
-        NPC npc = npcDespawned.getNpc();
-        switch(npc.getId()) {
-            case VERZIK_VITUR_8369:
-            case VERZIK_VITUR_8370:
-            case VERZIK_VITUR_8371:
-            case VERZIK_VITUR_8372:
-            case VERZIK_VITUR_8373:
-            case VERZIK_VITUR_8374:
-            case VERZIK_VITUR_8375:
-            case VERZIK_VITUR_10830: //Story mode
-            case VERZIK_VITUR_10831:
-            case VERZIK_VITUR_10832:
-            case VERZIK_VITUR_10833:
-            case VERZIK_VITUR_10834:
-            case VERZIK_VITUR_10835:
-            case VERZIK_VITUR_10836:
-            case VERZIK_VITUR_10847: //Hard mode
-            case VERZIK_VITUR_10848:
-            case VERZIK_VITUR_10849:
-            case VERZIK_VITUR_10850:
-            case VERZIK_VITUR_10851:
-            case VERZIK_VITUR_10852:
-            case VERZIK_VITUR_10853:
-                verzikCleanup();
-            case NYLOCAS_ISCHYROS_8381:
-            case NYLOCAS_TOXOBOLOS_8382:
-            case NYLOCAS_HAGIOS_8383:
-            case NYLOCAS_ISCHYROS_10841: //Story mode
-            case NYLOCAS_TOXOBOLOS_10842:
-            case NYLOCAS_HAGIOS_10843:
-            case NYLOCAS_ISCHYROS_10858: //Hard mode
-            case NYLOCAS_TOXOBOLOS_10859:
-            case NYLOCAS_HAGIOS_10860:
-                verzikAggros.remove(npc);
-                break;
-            case NYLOCAS_MATOMENOS_8385:
-            case NYLOCAS_MATOMENOS_10845: //Story Mode
-            case NYLOCAS_MATOMENOS_10862: //Hard Mode
-                verzikReds.remove(npc);
-                break;
-            case REGULAR_TORNADO:
-            case SM_TORNADO: //Story Mode
-            case HM_TORNADO: //Hard Mode
-                if (personalNado == npc){
-                    personalNado = null;
-                    personalNadoRespawn = 18;
-                }
-                nadoList.removeIf(tt -> tt.getNpc() == npc);
-                nadosOut--;
-                if (plugin.hiddenIndices.contains(npc.getIndex())) {
-                    plugin.setHiddenNpc(npc, false);
-                }
-        }
-        if (npc.getName() != null && npc.getName().equals("Nylocas Athanatos")){
-            purpleCrabNpc = null;
-        }
-    }
-
-    @Subscribe
-    public void onProjectileMoved(ProjectileMoved event) {
-        int id = event.getProjectile().getId();
-        Projectile p = event.getProjectile();
-        int ticks = (int) Math.round(p.getRemainingCycles() / 30D);
-
-        if (id == VERZIK_RANGE_BALL) {
-            WorldPoint wp = WorldPoint.fromLocal(client, event.getPosition());
-            verzikRangeProjectiles.put(event.getProjectile(), wp);
-            if (lightningAttacksDelay == 0) {
-                lightningAttacks--;
-                lightningAttacksDelay = 4;
-            }
-        } else if (id == VERZIK_PURPLE_SPAWN) {
-            purpleCrabProjectile.put(event.getPosition(), ticks);
-            purpleAttacksLeft = 21;
-        } else if (id == VERZIK_LIGHTNING_BALL && lightningAttacks < 2) {
-            lightningAttacks = 4;
-            if (ticks > 0) {
-                verzikLightningProjectiles.putIfAbsent(p, ticks);
-            }
-        } else if (id == VERZIK_GREEN_BALL){
-            if (!greenBallOut){
-                greenBallOut = true;
-            }
-
-            if (p.getRemainingCycles() == 0){
-                greenBallOut = false;
-                greenBallBounces++;
-                greenBallDelay = 3;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGraphicsObjectCreated(GraphicsObjectCreated event){
-        if (event.getGraphicsObject().getId() == VERZIK_YELLOW_OBJECT && !yellowsOut) {
-            WorldPoint wp = WorldPoint.fromLocal(client, event.getGraphicsObject().getLocation());
-            if (!yellows.contains(wp)) {
-                yellows.add(wp);
-            }
-
-            if (!yellowsList.contains(wp)) {
-                yellowsList.add(wp);
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameObjectDespawned(GameObjectDespawned event){
-        if (config.showVerzikAcid() && event.getGameObject().getId() == HM_ACID) {
-            int index = acidSpots.indexOf(event.getGameObject());
-            acidSpots.remove(event.getGameObject());
-            if (index != -1) {
-                acidSpotsTimer.remove(index);
-            }
-        }
-    }
-
-    @Subscribe
-    public void onConfigChanged(ConfigChanged event) {
-        if (event.getGroup().equals("spoontob")) {
-            if (event.getKey().equals("hideOtherNados")) {
-                if (!config.hideOtherNados()){
-                    plugin.clearHiddenNpcs();
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onAnimationChanged(AnimationChanged event) {
-        if (verzikActive) {
-            Actor actor = event.getActor();
-            if (actor instanceof NPC) {
-                NPC npc = (NPC)actor;
-                if (npc.getName() != null && npc.getName().equals("Nylocas Matomenos") && npc.getAnimation() == 8097){
-                    int index = redCrabs.indexOf(npc);
-                    if (index != -1) {
-                        lastRatioList.remove(index);
-                        lastHealthScaleList.remove(index);
-                    }
-                    redCrabs.remove(npc);
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onMenuEntryAdded(MenuEntryAdded event) {
-        if (verzikNPC != null) {
-            String target = event.getTarget();
-            Player player = client.getLocalPlayer();
-            PlayerComposition playerComp = player != null ? player.getPlayerComposition() : null;
-            MenuEntry pvEntry = event.getMenuEntry();
-
-            if (config.hidePurple() && P2_IDS.contains(verzikNPC.getId())
-                    && target.contains("Nylocas Athanatos") && event.getType() == MenuAction.NPC_SECOND_OPTION.getId() && poisonStyle != null) {
-                switch (poisonStyle) {
-                    case NOT:
-                        if (playerComp != null && !SERPS.contains(playerComp.getEquipmentId(KitType.HEAD))) {
-                            pvEntry.setDeprioritized(true);
-                        }
-                        break;
-                    case POISON:
-                        break;
-                }
-            } else if (P3_IDS.contains(verzikNPC.getId())) {
-                if (config.hideAttackYellows() && verzikSpecial == SpecialAttack.YELLOWS && verzikTicksUntilAttack > 8) {
-                    if (target.contains("Verzik Vitur") && event.getType() == MenuAction.NPC_SECOND_OPTION.getId()) {
-                        pvEntry.setDeprioritized(true);
-                    }
-
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onMenuOptionClicked(MenuOptionClicked event) {
-        Player player = client.getLocalPlayer();
-        PlayerComposition playerComp = player != null ? player.getPlayerComposition() : null;
-
-        if (event.getMenuOption().equalsIgnoreCase("wield")) {
-            PoisonStyle newStyle = PoisonWeaponMap.PoisonType.get(event.getItemId());
-            if (newStyle != null) {
-                skipTickCheck = true;
-                poisonStyle = newStyle;
-            }
-        } else if (config.hidePurple() && verzikNPC != null && P2_IDS.contains(verzikNPC.getId())
-                && event.getMenuTarget().contains("Nylocas Athanatos") && event.getMenuAction() == MenuAction.NPC_SECOND_OPTION && poisonStyle != null) {
-            switch (poisonStyle) {
-                case NOT:
-                    if (playerComp != null && !SERPS.contains(playerComp.getEquipmentId(KitType.HEAD))) {
-                    }
-                    break;
-                case POISON:
-                    break;
-            }
-        }
-    }
-
-    @Subscribe
-    public void onActorDeath(ActorDeath event) {
-        if (verzikNPC != null && event.getActor() instanceof Player && event.getActor().getName() != null){
-            partyMembersNames.remove(event.getActor().getName());
-        }
-    }
-
-    @Subscribe
-    public void onGraphicChanged(GraphicChanged event) {
-        if (event.getActor() != null  && event.getActor().getName() != null && event.getActor() instanceof Player && verzikPhase == Phase.PHASE3){
-            Actor actor = event.getActor();
-            if (actor.getGraphic() == 1602 && actor.getName().equals(client.getLocalPlayer().getName())){
-                personalNado = null;
-                personalNadoRespawn = 18;
-                if (nadoList.size() == 1){
-                    nadoList.clear();
-                }
-            }
-        }
-    }
-
-    @Subscribe
-    public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed event){
-        if (event.getSource() != null && event.getSource().getName() != null && verzikNPC != null && config.muteVerzikSounds()) {
-            if (event.getSoundId() == 3991 || event.getSoundId() == 3987){
-                event.consume();
-            }
-        }
-    }
-
-    @Subscribe
-    public void onGameTick(GameTick event) {
-        if (verzikActive) {
-            if (skipTickCheck) {
-                skipTickCheck = false;
-            } else {
-                if (client.getLocalPlayer() == null || client.getLocalPlayer().getPlayerComposition() == null) {
-                    return;
-                }
-                int equippedWeapon = ObjectUtils.defaultIfNull(client.getLocalPlayer().getPlayerComposition().getEquipmentId(KitType.WEAPON), -1);
-                int equippedHelm = ObjectUtils.defaultIfNull(client.getLocalPlayer().getPlayerComposition().getEquipmentId(KitType.HEAD), -1);
-                poisonStyle = PoisonWeaponMap.PoisonType.get(equippedWeapon);
-                helmId = equippedHelm;
-            }
-
-            if (lightningAttacksDelay > 0){
-                lightningAttacksDelay--;
-            }
-
-            if (personalNadoRespawn > 0){
-                personalNadoRespawn--;
-            }
-
-            if (greenBallDelay > 0){
-                greenBallDelay--;
-                if (greenBallDelay == 0 && !greenBallOut){
-                    greenBallBounces = 0;
-                }
-            }
-
-            if (acidSpots.size() > 0 && acidSpotsTimer.size() > 0){
-                for(int i=0; i<acidSpotsTimer.size(); i++){
-                    acidSpotsTimer.set(i, acidSpotsTimer.get(i) - 1);
-                }
-            }
-
-            if (!verzikRangeProjectiles.isEmpty()) {
-                verzikRangeProjectiles.keySet().removeIf((projectile) -> projectile.getRemainingCycles() < 1);
-            }
-
-            if (verzikPhase == Phase.PHASE3) {
-                if (yellowsList.size() > 0){
-                    if (!yellowsOut) {
-                        if (verzikNPC.getId() == VERZIK_VITUR_10852) {
-                            yellowGroups = findYellows(yellows);
-                        }
-                        yellowsOut = true;
-                    }else {
-                        yellowTimer--;
-                        if (yellowTimer <= 0) {
-                            if (verzikNPC.getId() == VERZIK_VITUR_10852) {
-                                if (hmYellowSpotNum < 3) {
-                                    yellowTimer = 3;
-                                    hmYellowSpotNum++;
-
-                                    for(Player p : client.getPlayers()){
-                                        if (p.getName() != null && partyMembersNames.contains(p.getName())){
-                                            WorldPoint wp = WorldPoint.fromLocal(client, p.getLocalLocation());
-                                            int index = 0;
-
-                                            for(ArrayList<WorldPoint> yg : yellowGroups){
-                                                if (yg.contains(wp)){
-                                                    yellowGroups.get(index).remove(wp);
-                                                    break;
-                                                }else {
-                                                    boolean exitLoop = false;
-                                                    for(int i = yg.size() - 1; i>=0; i--){
-                                                        if (yg.get(i).distanceTo(wp) <= 1) {
-                                                            yellowGroups.get(index).remove(i);
-                                                            exitLoop = true;
-                                                            break;
-                                                        }
-                                                    }
-
-                                                    if (exitLoop){
-                                                        break;
-                                                    }
-                                                }
-                                                index++;
-                                            }
-
-                                            if (yellowsList.contains(wp)){
-                                                yellowsList.remove(wp);
-                                            }else {
-                                                for(int i = yellowsList.size() - 1; i>=0; i--){
-                                                    if (yellowsList.get(i).distanceTo(wp) <= 1){
-                                                        yellowsList.remove(i);
-                                                        break;
-                                                    }
-                                                }
-                                            }
-                                        }
-                                    }
-                                } else {
-                                    yellowsOut = false;
-                                    yellowTimer = 14;
-                                    hmYellowSpotNum = 1;
-                                    yellows.clear();
-                                    yellowsList.clear();
-                                    yellowGroups.clear();
-                                }
-                            } else {
-                                yellowsOut = false;
-                                yellowTimer = 14;
-                                yellows.clear();
-                                yellowsList.clear();
-                                yellowGroups.clear();
-                            }
-                        }
-                    }
-                }
-            }
-
-            if (verzikPhase == Phase.PHASE3 && nadoList.size() > 0 && client.getLocalPlayer() != null){
-                boolean recalc = false;
-                for (int i = nadoList.size() - 1; i>=0; i--){
-                    if (nadoList.get(i).checkMovement(prevPlayerWp, nadoList.get(i).getNpc().getWorldLocation()) != -1){
-                        nadoList.remove(i);
-                        if (nadoList.size() == 0) {
-                            for (NPC npc : client.getNpcs()) {
-                                if (NADO_IDS.contains(npc.getId()))
-                                    nadoList.add(new TornadoTracker(npc));
-                                personalNado = null;
-                                recalc = true;
-
-                                if (plugin.hiddenIndices.contains(npc.getIndex())) {
-                                    plugin.setHiddenNpc(npc, false);
-                                }
-                            }
-                        }
-                    } else {
-                        nadoList.get(i).setPrevLoc(nadoList.get(i).getNpc().getWorldLocation());
-                    }
-                }
-
-                if (nadoList.size() == 1 && personalNado == null && !recalc){
-                    personalNado = nadoList.get(0).getNpc();
-                }
-                prevPlayerWp = client.getLocalPlayer().getWorldLocation();
-            }
-
-            Function<Integer, Integer> adjust_for_enrage = (i) -> isVerzikEnraged() ? i - 2 : i;
-
-            if (verzikTickPaused) {
-                switch (verzikNPC.getId()) {
-                    case VERZIK_VITUR_8370:
-                    case VERZIK_VITUR_10831:
-                    case VERZIK_VITUR_10848:
-                        verzikPhase = Phase.PHASE1;
-                        verzikAttackCount = 0;
-                        verzikTicksUntilAttack = 18;
-                        verzikTickPaused = false;
-                        break;
-                    case VERZIK_VITUR_8372:
-                    case VERZIK_VITUR_10832:
-                    case VERZIK_VITUR_10850:
-                        verzikPhase = Phase.PHASE2;
-                        verzikAttackCount = 0;
-                        verzikTicksUntilAttack = 3;
-                        verzikTickPaused = false;
-                        purpleAttacksLeft = 21;
-                        break;
-                    case VERZIK_VITUR_8374:
-                    case VERZIK_VITUR_10835:
-                    case VERZIK_VITUR_10852:
-                        verzikPhase = Phase.PHASE3;
-                        verzikAttackCount = 0;
-                        verzikTicksUntilAttack = 6;
-                        verzikTickPaused = false;
-                        break;
-                }
-            }
-            else if (verzikSpecial == SpecialAttack.WEBS)
-            {
-                verzikTotalTicksUntilAttack++;
-
-                if (verzikNPC.getInteracting() != null)
-                {
-                    verzikSpecial = SpecialAttack.WEB_COOLDOWN;
-                    verzikAttackCount = 10;
-                    verzikTicksUntilAttack = 10;
-                    verzikFirstEnraged = false;
-                }
-            } else {
-                verzikTicksUntilAttack = Math.max(0, verzikTicksUntilAttack - 1);
-                verzikTotalTicksUntilAttack++;
-
-                int animationID = verzikNPC.getAnimation();
-
-                if (animationID > -1 && verzikPhase == Phase.PHASE1 && verzikTicksUntilAttack < 5 && animationID != verzikLastAnimation)
-                {
-                    if (animationID == VERZIK_P1_MAGIC)
-                    {
-                        verzikTicksUntilAttack = 14;
-                        verzikAttackCount++;
-                    }
-                }
-
-                if (animationID > -1 && verzikPhase == Phase.PHASE2 && verzikTicksUntilAttack < 3 && animationID != verzikLastAnimation)
-                {
-                    switch (animationID)
-                    {
-                        case VERZIK_P2_REG:
-                        case VERZIK_P2_BOUNCE:
-                            verzikTicksUntilAttack = 4;
-                            verzikAttackCount++;
-                            purpleAttacksLeft--;
-                            if (verzikAttackCount == 7 && verzikRedPhase)
-                            {
-                                verzikTicksUntilAttack = 8;
-                            }
-                            break;
-                        case VERZIK_ORGASM:
-                            verzikRedPhase = true;
-                            verzikAttackCount = 0;
-                            verzikTicksUntilAttack = 12;
-                            break;
-                    }
-                }
-
-                verzikLastAnimation = animationID;
-                if (verzikPhase == Phase.PHASE3) {
-                    verzikAttackCount = verzikAttackCount % p3_green_attack_count;
-
-                    if (verzikTicksUntilAttack <= 0) {
-                        verzikAttackCount++;
-
-                        // First 9 Attacks, Including Crabs
-                        if (verzikAttackCount < p3_web_attack_count) {
-                            verzikSpecial = SpecialAttack.NONE;
-                            verzikTicksUntilAttack = adjust_for_enrage.apply(7);
-                        }
-                        // Between Webs and Yellows
-                        else if (verzikAttackCount < p3_yellow_attack_count) {
-                            verzikSpecial = SpecialAttack.NONE;
-                            verzikTicksUntilAttack = adjust_for_enrage.apply(7);
-                        }
-                        // Yellows - Can't Attack
-                        else if (verzikAttackCount < p3_yellow_attack_count + 1) {
-                            verzikSpecial = SpecialAttack.YELLOWS;
-                            if (verzikNPC.getId() == 10852) {
-                                verzikTicksUntilAttack = 27;
-                            } else {
-                                verzikTicksUntilAttack = 21;
-                            }
-                        }
-                        // Between Yellows and Green Ball
-                        else if (verzikAttackCount < p3_green_attack_count) {
-                            verzikSpecial = SpecialAttack.NONE;
-                            verzikTicksUntilAttack = adjust_for_enrage.apply(7);
-                        }
-                        // Ready for Green Ball
-                        else if (verzikAttackCount < p3_green_attack_count + 1) {
-                            verzikSpecial = SpecialAttack.GREEN;
-                            // 12 During Purples?
-                            verzikTicksUntilAttack = 12;
-                        } else {
-                            verzikSpecial = SpecialAttack.NONE;
-                            verzikTicksUntilAttack = adjust_for_enrage.apply(7);
-                        }
-                    }
-
-                    if (verzikFirstEnraged) {
-                        verzikFirstEnraged = false;
-                        if (verzikSpecial != SpecialAttack.YELLOWS || verzikTicksUntilAttack <= 7) {
-                            verzikTicksUntilAttack = 5;
-                        }
-                    }
-                }
-            }
-            if (purpleCrabProjectile.size() > 0) {
-                purpleCrabProjectile.values().removeIf(valueIsZero);
-                purpleCrabProjectile.replaceAll(updateTicks);
-            }
-
-            if (verzikPhase == Phase.PHASE2) {
-                for (Iterator<Projectile> it = verzikLightningProjectiles.keySet().iterator(); it.hasNext(); ) {
-                    Projectile key = it.next();
-                    verzikLightningProjectiles.replace(key, verzikLightningProjectiles.get(key) - 1);
-                    if (verzikLightningProjectiles.get(key) < 0) {
-                        it.remove();
-                    }
-                }
-            }
-        }
-    }
-
-    Color verzikSpecialWarningColor() {
-        Color col = Color.WHITE;
-
-        if (verzikPhase != Phase.PHASE3) {
-            return col;
-        }
-
-        switch (verzikAttackCount) {
-            case Verzik.p3_crab_attack_count - 1:
-                col = Color.MAGENTA;
-                break;
-            case Verzik.p3_web_attack_count - 1:
-                col = Color.ORANGE;
-                break;
-            case Verzik.p3_yellow_attack_count - 1:
-                col = Color.YELLOW;
-                break;
-            case Verzik.p3_green_attack_count - 1:
-                col = Color.GREEN;
-                break;
-        }
-
-        return col;
-    }
-
-    private void verzikSpawn(NPC npc) {
-        verzikEnraged = false;
-        verzikRedPhase = false;
-        verzikFirstEnraged = false;
-        verzikTicksUntilAttack = 0;
-        verzikAttackCount = 0;
-        verzikNPC = npc;
-        verzikActive = true;
-        verzikTickPaused = true;
-        verzikSpecial = SpecialAttack.NONE;
-        verzikTotalTicksUntilAttack = 0;
-        verzikLastAnimation = -1;
-    }
-
-    private void verzikCleanup() {
-        verzikAggros.clear();
-        verzikReds.clear();
-        verzikEnraged = false;
-        verzikFirstEnraged = false;
-        verzikRedPhase = false;
-        verzikActive = false;
-        yellowsList.clear();
-        yellowGroups.clear();
-        yellowsOut = false;
-        yellowTimer = 14;
-        hmYellowSpotNum = 1;
-        nadoList.clear();
-        prevPlayerWp = null;
-        personalNado = null;
-        nadosOut = 0;
-        verzikNPC = null;
-        verzikPhase = null;
-        verzikTickPaused = true;
-        verzikSpecial = SpecialAttack.NONE;
-        verzikTotalTicksUntilAttack = 0;
-        verzikLastAnimation = -1;
-
-        redCrabs.clear();
-        lastRatioList.clear();
-        lastHealthScaleList.clear();
-        acidSpots.clear();
-        acidSpotsTimer.clear();
-        lightningAttacks = 4;
-        lightningAttacksDelay = 0;
-        greenBallBounces = 0;
-        greenBallOut = false;
-        greenBallDelay = 0;
-        pillarsPendingRemoval = new ArrayList<>();
-        pillarLocations = new ArrayList<>();
-    }
-
-    enum SpecialAttack {
-        WEB_COOLDOWN,
-        WEBS,
-        YELLOWS,
-        GREEN,
-        NONE;
-    }
-
-    public enum Phase {
-        PHASE1,
-        PHASE2,
-        PHASE3;
-    }
-
-    public static final Predicate<Integer> valueIsZero = (v) -> v <= 0;
-    public static final BiFunction<Object, Integer, Integer> updateTicks = (k, v) -> v - 1;
-
-    public WorldPoint getNearestPoint(WorldPoint corner, ArrayList<WorldPoint> points) {
-        double minDistance = Integer.MAX_VALUE;
-        WorldPoint point = new WorldPoint(corner.getX(), corner.getY(), corner.getPlane());
-        for (WorldPoint p : points) {
-            double distance = distanceBetween(p, corner);
-            if (distance < minDistance) {
-                minDistance = distance;
-                point = p;
-            }
-        }
-        return point;
-    }
-
-    public int isSetSpawn(WorldPoint p) {
-        if (p.getRegionX() == 7 && p.getRegionY() == 11) {
-            return 1;
-        }
-        else if (p.getRegionX() == 16 && p.getRegionY() == 17) {
-            return 2;
-        }
-        else if (p.getRegionX() == 25 && p.getRegionY() == 11) {
-            return 3;
-        }
-        else if (p.getRegionX() == 7 && p.getRegionY() == 23) {
-            return 4;
-        }
-        else if (p.getRegionX() == 25 && p.getRegionY() == 23) {
-            return 5;
-        }
-        else {
-            return -1;
-        }
-    }
-
-    public WorldPoint getNextValidPoint(ArrayList<WorldPoint> points) {
-        for(WorldPoint p : points) {
-            if (isSetSpawn(p) != -1) {
-                return p;
-            }
-        }
-        return null;
-    }
-
-    public ArrayList<ArrayList<WorldPoint>> findYellows(ArrayList<WorldPoint> points) {
-        ArrayList<ArrayList<WorldPoint>> groups = new ArrayList<>();
-        while(points.size() > 0) {
-            ArrayList<WorldPoint> group = new ArrayList<>();
-            WorldPoint initial = getNextValidPoint(points);
-            group.add(initial);
-            points.remove(initial);
-            WorldPoint second = getNearestPoint(initial, points);
-            group.add(second);
-            points.remove(second);
-            WorldPoint third = getNearestPoint(initial, points);
-            group.add(third);
-            points.remove(third);
-            groups.add(group);
-        }
-        return groups;
-    }
-
-    public double distanceBetween(WorldPoint a, WorldPoint b) {
-        return Math.sqrt(Math.pow(a.getRegionX()-b.getRegionX(), 2) + Math.pow(a.getRegionY()-b.getRegionY(), 2));
-    }
-
-    @Subscribe
-    public void onClientTick(ClientTick event) {
-        if (config.hideOtherNados()) {
-            for (NPC npc : client.getNpcs()) {
-                if (npc != null && NADO_IDS.contains(npc.getId())) {
-                    if (personalNado != null && personalNado.getIndex() != npc.getIndex()) {
-                        if (!plugin.hiddenIndices.contains(npc.getIndex())) {
-                            plugin.setHiddenNpc(npc, true);
-                        }
-                    }
-                }
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikOverlay.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikOverlay.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikOverlay.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikOverlay.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,425 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Verzik;
-
-import net.runelite.api.Point;
-import net.runelite.api.*;
-import net.runelite.api.coords.LocalPoint;
-import net.runelite.api.coords.WorldPoint;
-import net.runelite.client.plugins.spoontob.RoomOverlay;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-import net.runelite.client.plugins.spoontob.SpoonTobPlugin;
-import net.runelite.client.ui.overlay.OverlayUtil;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.inject.Inject;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.text.DecimalFormat;
-
-public class VerzikOverlay extends RoomOverlay {
-    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("##0");
-
-    @Inject
-    private Verzik verzik;
-
-    @Inject
-    private SpoonTobPlugin plugin;
-
-    @Inject
-    protected VerzikOverlay(SpoonTobConfig config) {
-        super(config);
-    }
-
-    public Dimension render(Graphics2D graphics) {
-        if (verzik.isVerzikActive() && verzik.getVerzikNPC() != null) {
-            int id = verzik.getVerzikNPC().getId();
-            if (Verzik.VERZIK_ACTIVE_IDS.contains(id)) {
-                if (config.displayGreenBall() != SpoonTobConfig.greenBallMode.OFF || config.displayGreenBallTicks()) {
-                    displayProjectiles(graphics);
-                }
-
-                if (config.purpleAoe()) {
-                    displayPurpleCrabAOE(graphics, verzik.getVerzikNPC());
-                }
-            }
-
-            if (config.verzikMelee() != SpoonTobConfig.meleeTileMode.OFF) {
-                int size = 1;
-                NPCComposition composition = verzik.getVerzikNPC().getTransformedComposition();
-                if (composition != null)
-                    size = composition.getSize();
-                LocalPoint lp = LocalPoint.fromWorld(client, verzik.getVerzikNPC().getWorldLocation());
-                if (lp != null) {
-                    Polygon tilePoly = getCanvasTileAreaPoly(client, lp, size, false);
-                    if (tilePoly != null && verzik.verzikPhase == Verzik.Phase.PHASE3) {
-                        if (config.verzikMelee() == SpoonTobConfig.meleeTileMode.TANK_NOTIFIER) {
-                            if (verzik.getVerzikNPC().getInteracting() == client.getLocalPlayer()) {
-                                renderPoly(graphics, config.p3AggroColor(), tilePoly);
-                            } else {
-                                renderPoly(graphics, config.verzikMeleeColor(), tilePoly);
-                            }
-                        }else {
-                            renderPoly(graphics, config.verzikMeleeColor(), tilePoly);
-                        }
-                    }
-                }
-            }
-
-            if(config.verzikTankTarget() && verzik.verzikPhase == Verzik.Phase.PHASE3){
-                if(verzik.getVerzikNPC() != null && verzik.getVerzikNPC().getInteracting() != null){
-                    Actor actor = verzik.getVerzikNPC().getInteracting();
-                    Polygon tilePoly = getCanvasTileAreaPoly(client, actor.getLocalLocation(), 1, false);
-                    if (tilePoly != null) {
-                        renderPoly(graphics, config.p3AggroColor(), tilePoly);
-                    }
-                }
-            }
-
-            if (config.showVerzikNados() != SpoonTobConfig.nadoMode.OFF && verzik.verzikPhase == Verzik.Phase.PHASE3) {
-                if (config.showVerzikNados() == SpoonTobConfig.nadoMode.ALL) {
-                    for(NPC nado : client.getNpcs()){
-                        if (Verzik.NADO_IDS.contains(nado.getId())){
-                            if (config.showVerzikNadoStyle() == SpoonTobConfig.nadoStyle.TILE){
-                                renderNpcOverlay(graphics, nado, config.showVerzikNadoColor(), 2, config.showVerzikNadoColor().getAlpha(), config.verzikNadoOpacity());
-                            } else if (config.showVerzikNadoStyle() == SpoonTobConfig.nadoStyle.TRUE_LOCATION){
-                                renderNpcTLOverlay(graphics, nado, config.showVerzikNadoColor(), 2, config.showVerzikNadoColor().getAlpha(), config.verzikNadoOpacity());
-                            }
-                        }
-                    }
-                }else if (config.showVerzikNados() == SpoonTobConfig.nadoMode.PERSONAL && verzik.getPersonalNado() != null) {
-                    if(config.showVerzikNadoStyle() == SpoonTobConfig.nadoStyle.TILE){
-                        renderNpcOverlay(graphics, verzik.getPersonalNado(), config.showVerzikNadoColor(), 2, config.showVerzikNadoColor().getAlpha(), config.verzikNadoOpacity());
-                    }else if(config.showVerzikNadoStyle() == SpoonTobConfig.nadoStyle.TRUE_LOCATION){
-                        renderNpcTLOverlay(graphics, verzik.getPersonalNado(), config.showVerzikNadoColor(), 2, config.showVerzikNadoColor().getAlpha(), config.verzikNadoOpacity());
-                    }
-                }
-            }
-
-            if(config.raveNados() != SpoonTobConfig.raveNadoMode.OFF && verzik.verzikPhase == Verzik.Phase.PHASE3){
-                int index = 0;
-                Color color;
-                for (NPC nado : client.getNpcs()) {
-                    if (Verzik.NADO_IDS.contains(nado.getId())){
-                        if (config.raveNados() == SpoonTobConfig.raveNadoMode.RAVE) {
-                            color = plugin.raveUtils.getColor(nado.hashCode(), true);
-                        } else {
-                            color = plugin.raveUtils.getColor(index * 50, false);
-                        }
-                        renderTargetOverlay(graphics, nado, color);
-                    }
-                    index++;
-                }
-            }
-
-            if (config.showVerzikRangeAttack()){
-                for (WorldPoint p : verzik.verzikRangeProjectiles.values()) {
-                    LocalPoint point = LocalPoint.fromWorld(client, p);
-                    if(point != null) {
-                        Polygon poly = Perspective.getCanvasTilePoly(client, point);
-                        graphics.setColor(new Color(config.verzikRangeAttacksColor().getRed(), config.verzikRangeAttacksColor().getGreen(), config.verzikRangeAttacksColor().getBlue(), config.verzikRangeAttacksColor().getAlpha()));
-                        graphics.drawPolygon(poly);
-                        graphics.setColor(new Color(config.verzikRangeAttacksColor().getRed(), config.verzikRangeAttacksColor().getGreen(), config.verzikRangeAttacksColor().getBlue(), config.verzikRangeAttacksFill()));
-                        graphics.fillPolygon(poly);
-                    }
-                }
-            }
-
-            if ((config.showVerzikYellows() == SpoonTobConfig.verzikYellowsMode.YELLOW
-                    || (config.showVerzikYellows() == SpoonTobConfig.verzikYellowsMode.GROUPS && verzik.yellowGroups.size() == 0)) && verzik.yellowsOut) {
-                String text = Integer.toString(verzik.yellowTimer);
-                Point point;
-
-                if(config.yellowTicksOnPlayer() && client.getLocalPlayer() != null) {
-                    point = Perspective.getCanvasTextLocation(client, graphics, client.getLocalPlayer().getLocalLocation(), text, config.yellowsOffset());
-
-                    if (config.fontStyle()) {
-                        renderTextLocation(graphics, text, Color.WHITE, point);
-                    } else {
-                        renderSteroidsTextLocation(graphics, text, config.yellowsSize(), Font.BOLD, Color.WHITE, point);
-                    }
-                }
-
-                for (WorldPoint wp : verzik.yellowsList) {
-                    LocalPoint lp = LocalPoint.fromWorld(client, wp);
-                    drawTile(graphics, wp, Color.YELLOW, 2, 255, 0);
-
-                    if (!config.yellowTicksOnPlayer() && lp != null) {
-                        point = Perspective.getCanvasTextLocation(client, graphics, lp, text, 0);
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, text, Color.WHITE, point);
-                        } else {
-                            renderResizeTextLocation(graphics, text, 12, Font.BOLD, Color.WHITE, point);
-                        }
-                    }
-                }
-            }
-
-            if (config.showVerzikRocks() && verzik.verzikPhase == Verzik.Phase.PHASE1) {
-                for (GraphicsObject object : client.getGraphicsObjects()) {
-                    if (object.getId() == 1436) {
-                        LocalPoint lp = object.getLocation();
-                        drawTile(graphics, WorldPoint.fromLocal(client, lp), config.showVerzikRocksColor(), 2, 255, 50);
-                    }
-                }
-            }
-
-            if (config.showVerzikAcid() && verzik.verzikPhase == Verzik.Phase.PHASE2 && client.getLocalPlayer() != null) {
-                int index = 0;
-                for (GameObject object : verzik.acidSpots) {
-                    if(client.getLocalPlayer().getWorldLocation().distanceTo(object.getWorldLocation()) <= config.showVerzikAcidDistance()) {
-                        LocalPoint lp = object.getLocalLocation();
-                        String text = String.valueOf(verzik.acidSpotsTimer.get(index));
-                        Point point = Perspective.getCanvasTextLocation(client, graphics, lp, text, 0);
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, text, Color.WHITE, point);
-                        } else {
-                            renderSteroidsTextLocation(graphics, text, 12, Font.BOLD, Color.WHITE, point);
-                        }
-                        drawTile(graphics, WorldPoint.fromLocal(client, lp), config.showVerzikAcidColor(), 2, 255, 0);
-                    }
-                    index++;
-                }
-            }
-
-            verzik.getVerzikAggros().forEach(k -> {
-                if (config.verzikNyloAggroWarning() && k.getInteracting() != null && !k.isDead()) {
-                    String targetText = "";
-
-                    if (k.getInteracting().getName() != null) {
-                        if (k.getInteracting().getName().equalsIgnoreCase("wayabove") || k.getInteracting().getName().equalsIgnoreCase("oblv way")) {
-                            targetText = "Wayaboob";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("flaw less") || k.getInteracting().getName().equalsIgnoreCase("oblv flaw")
-                                || k.getInteracting().getName().equalsIgnoreCase("flaaw less")) {
-                            targetText = "Glennjamin";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("xelywood")) {
-                            targetText = "Femboy";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("afka") || k.getInteracting().getName().equalsIgnoreCase("rattori")
-                                || k.getInteracting().getName().equalsIgnoreCase("sadgecry") || k.getInteracting().getName().equalsIgnoreCase("squish that")) {
-                            targetText = "thisiswhyudonthavedust";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("messywalcott")) {
-                            targetText = "Rat";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("divinesdream") || k.getInteracting().getName().equalsIgnoreCase("divine dream")
-                                || k.getInteracting().getName().equalsIgnoreCase("trio tob")) {
-                            targetText = "Lil Bitch";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("null god")) {
-                            targetText = "Click";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("noobtype")) {
-                            targetText = "Sick Invite";
-                        } else if (k.getInteracting().getName().equalsIgnoreCase("turbosmurf") || k.getInteracting().getName().equalsIgnoreCase("yukinon fan") ) {
-                            targetText = k.getInteracting().getName();
-
-                        } else {
-                            targetText = k.getInteracting().getName();
-                        }
-                    }
-                    Point textLocation = k.getCanvasTextLocation(graphics, targetText, 80);
-                    if (textLocation != null) {
-                        Color color = Color.GREEN;
-                        if (k.getInteracting().equals(client.getLocalPlayer()))
-                            color = Color.RED;
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, targetText, color, textLocation);
-                        } else {
-                            renderResizeTextLocation(graphics, targetText, 14, Font.BOLD, color, textLocation);
-                        }
-                    }
-                }
-
-                if (config.verzikNyloExplodeRange() == SpoonTobConfig.VerzikNyloSetting.ALL_CRABS || (config.verzikNyloExplodeRange() == SpoonTobConfig.VerzikNyloSetting.MY_CRABS && client.getLocalPlayer() != null && client.getLocalPlayer().equals(k.getInteracting()))) {
-                    int size = 1;
-                    int thick_size = 1;
-                    NPCComposition composition = k.getTransformedComposition();
-                    if (composition != null)
-                        size = composition.getSize() + 2 * thick_size;
-                    LocalPoint lp = LocalPoint.fromWorld(client, k.getWorldLocation());
-                    if (lp != null) {
-                        lp = new LocalPoint(lp.getX() - thick_size * 128, lp.getY() - thick_size * 128);
-                        Polygon tilePoly = getCanvasTileAreaPoly(client, lp, size, false);
-                        if (tilePoly != null)
-                            renderPoly(graphics, config.verzikNyloExplodeTileColor(), tilePoly);
-                    }
-                }
-            });
-
-            if (config.redsHp() && verzik.redCrabs.size() > 0 && verzik.verzikPhase == Verzik.Phase.PHASE2) {
-                int index = 0;
-                for (NPC crab : verzik.redCrabs) {
-                    Color textColor = Color.WHITE;
-                    String text = "";
-
-                    if (crab.getHealthRatio() > 0 || (verzik.lastRatioList.get(index) != 0 && verzik.lastHealthScaleList.get(index) != 0)) {
-                        if (crab.getHealthRatio() > 0) {
-                            verzik.lastRatioList.set(index, crab.getHealthRatio());
-                            verzik.lastHealthScaleList.set(index, crab.getHealthScale());
-                        }
-                        float floatRatio = ((float) verzik.lastRatioList.get(index) / (float) verzik.lastHealthScaleList.get(index)) * 100;
-                        if (config.oldHpThreshold()) {
-                            textColor = plugin.oldHitpointsColor(floatRatio);
-                        } else {
-                            textColor = plugin.calculateHitpointsColor(floatRatio);
-                        }
-                        text = Float.toString(floatRatio).substring(0, 4) + "%";
-                        Point textLoc = crab.getCanvasTextLocation(graphics, text, 50);
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, text, textColor, textLoc);
-                        } else {
-                            renderResizeTextLocation(graphics, text, 14, Font.BOLD, textColor, textLoc);
-                        }
-                    }
-                    index++;
-                }
-            }
-
-            if ((config.showVerzikTicks() || config.showVerzikAttacks() != SpoonTobConfig.verzikAttacksMode.OFF || config.showVerzikTotalTicks())) {
-                String text = "";
-
-                if ((((config.showVerzikAttacks() == SpoonTobConfig.verzikAttacksMode.ALL && verzik.getVerzikSpecial() != Verzik.SpecialAttack.WEBS)
-                        || (config.showVerzikAttacks() == SpoonTobConfig.verzikAttacksMode.P2 && verzik.verzikPhase == Verzik.Phase.PHASE2))
-                        || (config.showVerzikAttacks() == SpoonTobConfig.verzikAttacksMode.REDS && verzik.verzikRedPhase))
-                        && ((config.showVerzikAttacks() == SpoonTobConfig.verzikAttacksMode.REDS && verzik.verzikRedPhase) || config.showVerzikAttacks() != SpoonTobConfig.verzikAttacksMode.REDS)) {
-                    text = text + "Att " + verzik.getVerzikAttackCount();
-                    if (config.showVerzikTicks() || config.showVerzikTotalTicks())
-                        text = text + " : ";
-                }
-                if (config.showVerzikTicks() && verzik.getVerzikSpecial() != Verzik.SpecialAttack.WEBS && verzik.verzikPhase == Verzik.Phase.PHASE1) {
-                    text = text + verzik.getVerzikTicksUntilAttack();
-                    if (config.showVerzikTotalTicks())
-                        text = text + " : ";
-                }
-                if (config.showVerzikTicks() && verzik.getVerzikSpecial() != Verzik.SpecialAttack.WEBS && verzik.verzikPhase == Verzik.Phase.PHASE2
-                        && !verzik.verzikRedPhase) {
-                    text = text + verzik.getVerzikTicksUntilAttack();
-                    if (config.showVerzikTotalTicks())
-                        text = text + " : ";
-                }
-                if (config.showVerzikTicks() && verzik.getVerzikSpecial() != Verzik.SpecialAttack.WEBS && verzik.verzikPhase == Verzik.Phase.PHASE2
-                        && verzik.verzikRedPhase) {
-                    text = text + verzik.getVerzikTicksUntilAttack();
-                    if (config.showVerzikTotalTicks())
-                        text = text + " : ";
-                }
-                if (config.showVerzikTicks() && verzik.getVerzikSpecial() != Verzik.SpecialAttack.WEBS && verzik.verzikPhase == Verzik.Phase.PHASE3) {
-                    text = text + verzik.getVerzikTicksUntilAttack();
-                    if (config.showVerzikTotalTicks())
-                        text = text + " : ";
-                }
-                if (config.showVerzikTotalTicks()) {
-                    text = text + "(" + verzik.getVerzikTotalTicksUntilAttack() + ")";
-                }
-                Point canvasPoint = verzik.getVerzikNPC().getCanvasTextLocation(graphics, text, 60);
-                if (canvasPoint != null) {
-                    Color col = verzik.verzikSpecialWarningColor();
-                    if (config.fontStyle()) {
-                        renderTextLocation(graphics, text, col, canvasPoint);
-                    } else {
-                        renderResizeTextLocation(graphics, text, 15, Font.BOLD, col, canvasPoint);
-                    }
-                }
-            }
-
-            if (config.lightningInfobox() != SpoonTobConfig.lightningMode.OFF) {
-                if ((config.lightningInfobox() == SpoonTobConfig.lightningMode.OVERLAY || config.lightningInfobox() == SpoonTobConfig.lightningMode.BOTH)
-                        && verzik.verzikPhase == Verzik.Phase.PHASE2) {
-                    String zapText;
-                    if (verzik.lightningAttacks > 0) {
-                        zapText = Integer.toString(verzik.lightningAttacks);
-                    } else {
-                        zapText = "ZAP";
-                    }
-                    Point canvasPoint = verzik.getVerzikNPC().getCanvasTextLocation(graphics, zapText, 270);
-                    if (canvasPoint != null && !verzik.getVerzikNPC().isDead()) {
-                        if (config.fontStyle()) {
-                            renderTextLocation(graphics, zapText, Color.ORANGE, canvasPoint);
-                        } else {
-                            renderResizeTextLocation(graphics, zapText, 15, Font.BOLD, Color.ORANGE, canvasPoint);
-                        }
-                    }
-                }
-            }
-
-            if (config.lightningAttackTick() && verzik.verzikPhase == Verzik.Phase.PHASE2) {
-                for (Projectile p : verzik.getVerzikLightningProjectiles().keySet()) {
-                    Player localPlayer = client.getLocalPlayer();
-                    if (localPlayer != null && p.getInteracting() == localPlayer) {
-                        int ticks = verzik.getVerzikLightningProjectiles().get(p);
-                        String tickstring = String.valueOf(ticks);
-                        Point point = Perspective.getCanvasTextLocation(client, graphics, localPlayer.getLocalLocation(), tickstring, config.zapOffset());
-                        if (point != null) {
-                            if (config.fontStyle()) {
-                                renderTextLocation(graphics, tickstring, (ticks > 0 ? Color.WHITE : Color.ORANGE), point);
-                            } else {
-                                renderSteroidsTextLocation(graphics, tickstring, config.zapSize(), Font.BOLD, (ticks > 0 ? Color.WHITE : Color.ORANGE), point);
-                            }
-                        }
-                    }
-                }
-            }
-
-        }
-        return null;
-    }
-
-    private void displayProjectiles(Graphics2D graphics) {
-        for(Projectile p : client.getProjectiles()){
-            Actor interacting = p.getInteracting();
-            if (p.getId() == 1598 && interacting != null) {
-                if(config.displayGreenBall() != SpoonTobConfig.greenBallMode.OFF) {
-                    int size;
-                    if (config.displayGreenBall() == SpoonTobConfig.greenBallMode.TILE) {
-                        size = 1;
-                    } else {
-                        size = 3;
-                    }
-                    Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, interacting.getLocalLocation(), size);
-                    renderPolygon(graphics, tilePoly, Color.GREEN);
-                }
-
-                if (config.displayGreenBallTicks()) {
-                    String text = String.valueOf(p.getRemainingCycles() / 30);
-                    LocalPoint lp = interacting.getLocalLocation();
-                    Point point = Perspective.getCanvasTextLocation(client, graphics, lp, text, config.greenBallOffset());
-                    Color color = Color.RED;
-                    if (config.fontStyle()) {
-                        renderTextLocation(graphics, text, color, point);
-                    } else {
-                        renderSteroidsTextLocation(graphics, text, config.greenBallSize(), Font.BOLD, color, point);
-                    }
-                }
-            }
-        }
-    }
-
-    private void displayPurpleCrabAOE(Graphics2D graphics, NPC npc) {
-        if (config.purpleAoe() && Verzik.P2_IDS.contains(npc.getId()) && verzik.getPurpleCrabProjectile().size() > 0) {
-            verzik.getPurpleCrabProjectile().forEach((point, ticks) -> {
-                Point textLocation = Perspective.getCanvasTextLocation(client, graphics, point, "#", 0);
-                if (config.fontStyle()){
-                    renderTextLocation(graphics, Integer.toString(ticks), Color.WHITE, textLocation);
-                } else {
-                    renderSteroidsTextLocation(graphics, Integer.toString(ticks),13, Font.BOLD, Color.WHITE, textLocation);
-                }
-                Polygon tileAreaPoly = Perspective.getCanvasTileAreaPoly(client, point, 3);
-                renderPolygon(graphics, tileAreaPoly, new Color(106, 61, 255));
-            });
-        }
-    }
-
-    protected void renderPolygon(Graphics2D graphics, @Nullable Shape polygon, @Nonnull Color color) {
-        if (polygon != null) {
-            graphics.setColor(color);
-            graphics.setStroke(new BasicStroke(2));
-            graphics.draw(polygon);
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 0));
-            graphics.fill(polygon);
-        }
-    }
-
-    private void renderTargetOverlay(Graphics2D graphics, NPC actor, Color color){
-        Shape objectClickbox = actor.getConvexHull();
-
-        if (objectClickbox != null){
-            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 50));
-            graphics.fill(actor.getConvexHull());
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloNPC.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloNPC.java b/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloNPC.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloNPC.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,45 +0,0 @@
-package net.runelite.client.plugins.spoontob.rooms.Nylocas;
-
-import lombok.Data;
-
-import java.util.Objects;
-
-@Data
-class NyloNPC
-{
-    private NylocasType nyloType;
-
-    private NylocasSpawnPoint spawnPoint;
-
-    private boolean aggressive = false;
-
-    NyloNPC(NylocasType nyloType, NylocasSpawnPoint nylocasSpawnPoint)
-    {
-        this.nyloType = nyloType;
-        this.spawnPoint = nylocasSpawnPoint;
-    }
-
-    NyloNPC(NylocasType nyloType, NylocasSpawnPoint nylocasSpawnPoint, boolean aggressive)
-    {
-        this(nyloType, nylocasSpawnPoint);
-        this.aggressive = aggressive;
-    }
-
-    @Override
-    public boolean equals(Object other)
-    {
-        if (!(other instanceof NyloNPC))
-        {
-            return false;
-        }
-        NyloNPC otherNpc = (NyloNPC) other;
-        return nyloType.equals(otherNpc.getNyloType()) && spawnPoint.equals(otherNpc.getSpawnPoint());
-    }
-
-    @Override
-    public int hashCode()
-    {
-        return Objects.hash(nyloType, spawnPoint);
-    }
-
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/CustomGameObject.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/CustomGameObject.java b/src/main/java/net/runelite/client/plugins/spoontob/util/CustomGameObject.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/CustomGameObject.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,134 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import net.runelite.api.GameObject;
-import net.runelite.api.Model;
-
-import java.awt.*;
-import java.util.Arrays;
-
-public class CustomGameObject {
-    private final GameObject obj;
-    private final int id;
-    private int[] oldColors1;
-    private int[] oldColors2;
-    private int[] oldColors3;
-
-    public CustomGameObject(GameObject obj, int id) {
-        this.obj = obj;
-        this.id = id;
-    }
-
-    public void setFaceColorValues(Color color) {
-        Model model = this.obj.getRenderable().getModel();
-        if (model != null && color != null) {
-            int[] colors1 = model.getFaceColors1();
-            int[] colors2 = model.getFaceColors2();
-            int[] colors3 = model.getFaceColors3();
-            if (this.isFaceColorsNullOrEmpty(this.oldColors1, this.oldColors2, this.oldColors3)) {
-                this.oldColors1 = colors1.clone();
-                this.oldColors2 = colors2.clone();
-                this.oldColors3 = colors3.clone();
-            }
-
-            this.replaceFaceColors123(color, colors1, colors2, colors3);
-        }
-    }
-
-    private void replaceFaceColors123(Color color, int[]... args) {
-        int rs2 = ColorsUtil.RGBtoRS2HSB(color.getRed(), color.getGreen(), color.getBlue());
-        int[][] var4 = args;
-        int var5 = args.length;
-
-        for(int var6 = 0; var6 < var5; ++var6) {
-            int[] faceColors = var4[var6];
-            if (faceColors.length > 0) {
-                Arrays.fill(faceColors, rs2);
-            }
-        }
-
-    }
-
-    public void restore() {
-        Model model = this.obj.getRenderable().getModel();
-        if (model != null && !this.isFaceColorsNullOrEmpty(this.oldColors1, this.oldColors2, this.oldColors3)) {
-            System.arraycopy(this.oldColors1, 0, model.getFaceColors1(), 0, this.oldColors1.length);
-            System.arraycopy(this.oldColors2, 0, model.getFaceColors2(), 0, this.oldColors2.length);
-            System.arraycopy(this.oldColors3, 0, model.getFaceColors3(), 0, this.oldColors3.length);
-            this.oldColors1 = null;
-            this.oldColors2 = null;
-            this.oldColors3 = null;
-        }
-    }
-
-    private boolean isFaceColorsNullOrEmpty(int[]... args) {
-        boolean flag = false;
-        int[][] var3 = args;
-        int var4 = args.length;
-
-        for(int var5 = 0; var5 < var4; ++var5) {
-            int[] faceColors = var3[var5];
-            if (faceColors == null || faceColors.length <= 0) {
-                flag = true;
-                break;
-            }
-        }
-
-        return flag;
-    }
-
-    public boolean equals(Object o) {
-        if (o == this) {
-            return true;
-        } else if (!(o instanceof CustomGameObject)) {
-            return false;
-        } else {
-            CustomGameObject other = (CustomGameObject)o;
-            if (!other.canEqual(this)) {
-                return false;
-            } else {
-                Object this$obj = this.getObj();
-                Object other$obj = other.getObj();
-                if (this$obj == null) {
-                    if (other$obj != null) {
-                        return false;
-                    }
-                } else if (!this$obj.equals(other$obj)) {
-                    return false;
-                }
-
-                return true;
-            }
-        }
-    }
-
-    protected boolean canEqual(Object other) {
-        return other instanceof CustomGameObject;
-    }
-
-    public int hashCode() {
-        int PRIME = 59;
-        int result = 1;
-        Object $obj = getObj();
-        return result * 59 + (($obj == null) ? 43 : $obj.hashCode());
-    }
-
-    public GameObject getObj() {
-        return this.obj;
-    }
-
-    public int getId() {
-        return this.id;
-    }
-
-    public int[] getOldColors1() {
-        return this.oldColors1;
-    }
-
-    public int[] getOldColors2() {
-        return this.oldColors2;
-    }
-
-    public int[] getOldColors3() {
-        return this.oldColors3;
-    }
-}
\ No newline at end of file
Index: src/main/java/net/runelite/client/plugins/spoontob/util/TheatreInputListener.java
===================================================================
diff --git a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreInputListener.java b/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreInputListener.java
deleted file mode 100644
--- a/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreInputListener.java	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ /dev/null	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
@@ -1,116 +0,0 @@
-package net.runelite.client.plugins.spoontob.util;
-
-import net.runelite.client.plugins.spoontob.rooms.Nylocas.Nylocas;
-import net.runelite.client.plugins.spoontob.rooms.Verzik.Verzik;
-import com.google.inject.Provides;
-import net.runelite.client.config.ConfigManager;
-import net.runelite.client.input.MouseAdapter;
-import net.runelite.client.plugins.spoontob.SpoonTobConfig;
-
-import javax.inject.Inject;
-import java.awt.event.MouseEvent;
-
-public class TheatreInputListener extends MouseAdapter {
-    @Inject
-    private Nylocas nylocas;
-    @Inject
-    private Verzik verzik;
-    @Inject
-    private SpoonTobConfig config;
-
-    @Provides
-    SpoonTobConfig getConfig(ConfigManager configManager) {
-        return (SpoonTobConfig)configManager.getConfig(SpoonTobConfig.class);
-    }
-
-    @Override
-    public MouseEvent mouseReleased(MouseEvent event)
-    {
-        if (nylocas.getNyloSelectionManager().isHidden())
-        {
-            return event;
-        }
-
-        if (nylocas.getNyloSelectionManager().getBounds().contains(event.getPoint()))
-        {
-            event.consume();
-            return event;
-        }
-        return event;
-    }
-
-    @Override
-    public MouseEvent mousePressed(MouseEvent event)
-    {
-        if (nylocas.getNyloSelectionManager().isHidden())
-        {
-            return event;
-        }
-
-        if (nylocas.getNyloSelectionManager().getBounds().contains(event.getPoint()))
-        {
-            event.consume();
-            return event;
-        }
-        return event;
-    }
-
-    @Override
-    public MouseEvent mouseClicked(MouseEvent event)
-    {
-        if (nylocas.getNyloSelectionManager().isHidden())
-        {
-            return event;
-        }
-        if (event.getButton() == MouseEvent.BUTTON1 && nylocas.getNyloSelectionManager().getBounds().contains(event.getPoint()))
-        {
-            if (nylocas.getNyloSelectionManager().getMeleeBounds().contains(event.getPoint()))
-            {
-                config.setHighlightMeleeNylo(!config.getHighlightMeleeNylo());
-                nylocas.getNyloSelectionManager().getMelee().setSelected(config.getHighlightMeleeNylo());
-            }
-            else if (nylocas.getNyloSelectionManager().getRangeBounds().contains(event.getPoint()))
-            {
-                config.setHighlightRangeNylo(!config.getHighlightRangeNylo());
-                nylocas.getNyloSelectionManager().getRange().setSelected(config.getHighlightRangeNylo());
-            }
-            else if (nylocas.getNyloSelectionManager().getMageBounds().contains(event.getPoint()))
-            {
-                config.setHighlightMageNylo(!config.getHighlightMageNylo());
-                nylocas.getNyloSelectionManager().getMage().setSelected(config.getHighlightMageNylo());
-            }
-            event.consume();
-        }
-        return event;
-    }
-
-    @Override
-    public MouseEvent mouseMoved(MouseEvent event)
-    {
-        if (nylocas.getNyloSelectionManager().isHidden())
-        {
-            return event;
-        }
-
-        nylocas.getNyloSelectionManager().getMelee().setHovered(false);
-        nylocas.getNyloSelectionManager().getRange().setHovered(false);
-        nylocas.getNyloSelectionManager().getMage().setHovered(false);
-
-        if (nylocas.getNyloSelectionManager().getBounds().contains(event.getPoint()))
-        {
-            if (nylocas.getNyloSelectionManager().getMeleeBounds().contains(event.getPoint()))
-            {
-                nylocas.getNyloSelectionManager().getMelee().setHovered(true);
-            }
-            else if (nylocas.getNyloSelectionManager().getRangeBounds().contains(event.getPoint()))
-            {
-                nylocas.getNyloSelectionManager().getRange().setHovered(true);
-            }
-            else if (nylocas.getNyloSelectionManager().getMageBounds().contains(event.getPoint()))
-            {
-                nylocas.getNyloSelectionManager().getMage().setHovered(true);
-            }
-        }
-        return event;
-    }
-}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"43fcba0a-a89a-4c77-a958-0fb191f120c5\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/modules.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/build.gradle\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/build.gradle\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"example\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"example\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"example\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"other\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"example\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"publishing\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"example\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"verification\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2flpA5yV3RXn0X8le8lPhZC40Cj\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Gradle.RunebotFreePlugins [aio].executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.RunebotFreePlugins [build-all].executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Gradle.RunebotFreePlugins [build-all]\">\r\n    <configuration name=\"RunebotFreePlugins [aio]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"aio\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"RunebotFreePlugins [build-all]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build-all\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.RunebotFreePlugins [build-all]\" />\r\n        <item itemvalue=\"Gradle.RunebotFreePlugins [aio]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-11.0.21-temurin-11.0.21-f644763e9732-213f029c\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"43fcba0a-a89a-4c77-a958-0fb191f120c5\" name=\"Changes\" comment=\"\" />\r\n      <created>1714385371273</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1714385371273</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 29a28d350613b31e9dbbab88d634c8c3da254d30)
+++ b/.idea/workspace.xml	(date 1716846230090)
@@ -4,10 +4,86 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="43fcba0a-a89a-4c77-a958-0fb191f120c5" name="Changes" comment="">
+    <list default="true" id="43fcba0a-a89a-4c77-a958-0fb191f120c5" name="Changes" comment="32">
       <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPlugin.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/LavaRunecrafter/LavaRunecrafterPluginConfig.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/LavaRunecrafter/TeleportMethods.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/ocarial/OneClickAerialFishingPlugin.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstoneConfig.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/ocsand/OneClickSandstonePlugin.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/renderstop/DisableRenderCallbacks.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/MiscOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/RedsOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/Room.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/RoomOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/SituationalTickOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobConfig.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/SpoonTobPlugin.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/Bloat.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/BloatOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatDown.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/BloatSafespot.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/Coordinates.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/SSLine.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatChunk.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatPath.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/BloatRotation.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/DistanceInfo.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Bloat/stomp/def/IPath.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/Maiden.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenBloodSplatInfo.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenCrabInfo.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenMaxHitToolTip.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/MaidenRedsOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Maiden/ThresholdOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloInfo.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloNPC.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionBox.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloSelectionManager.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloTimer.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NyloWaveSpawnInfobox.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/Nylocas.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasAliveCounterOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasSpawnPoint.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasType.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Nylocas/NylocasWave.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/DeathBallPanel.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/Sotetseg.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Sotetseg/SotetsegOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/GreenBallPanel.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/LightningPanel.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PlayerShell.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/PurpleCrabPanel.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/TornadoTracker.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/Verzik.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/VerzikRedsOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGroup.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Verzik/YellowGrouperOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Direction.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/LineOfSight.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/Xarpus.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusCounterPanel.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusOverlay.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/rooms/Xarpus/XarpusTimer.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/ColorsUtil.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/CustomGameObject.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonStyle.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/PoisonWeaponMap.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/RaveUtils.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreConstant.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreInputListener.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/TheatrePerspective.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/TheatreRegions.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponMap.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/net/runelite/client/plugins/spoontob/util/WeaponStyle.java" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -151,6 +227,19 @@
       <option name="presentableId" value="Default" />
       <updated>1714385371273</updated>
     </task>
+    <task id="LOCAL-00001" summary="32">
+      <option name="closed" value="true" />
+      <created>1714391760025</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1714391760025</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="32" />
+    <option name="LAST_COMMIT_MESSAGE" value="32" />
+  </component>
 </project>
\ No newline at end of file
